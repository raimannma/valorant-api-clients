/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package henrikdevApiClient.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import henrikdevApiClient.apis.ValorantApi
import henrikdevApiClient.models.AccountV1Response
import henrikdevApiClient.models.AccountV2Response
import henrikdevApiClient.models.ContentV1Response
import henrikdevApiClient.models.EsportsV1Response
import henrikdevApiClient.models.LeaderboardV2Response
import henrikdevApiClient.models.LeaderboardV3Response
import henrikdevApiClient.models.MMRHistoryV1Response
import henrikdevApiClient.models.MMRHistoryV2Response
import henrikdevApiClient.models.MMRV1Response
import henrikdevApiClient.models.MMRV2Response
import henrikdevApiClient.models.MMRV3Response
import henrikdevApiClient.models.MatchMode
import henrikdevApiClient.models.MatchesV2Response
import henrikdevApiClient.models.MatchesV3ListResponse
import henrikdevApiClient.models.MatchesV4HistoryResponse
import henrikdevApiClient.models.MatchesV4Response
import henrikdevApiClient.models.PremierSearchResponse
import henrikdevApiClient.models.PremierTeamHistoryV1Response
import henrikdevApiClient.models.PremierTeamV1Response
import henrikdevApiClient.models.QueueStatusV1
import henrikdevApiClient.models.RawV1Payload
import henrikdevApiClient.models.RawV1Response
import henrikdevApiClient.models.SendError
import henrikdevApiClient.models.StatusV1
import henrikdevApiClient.models.StoreFeaturedV1
import henrikdevApiClient.models.StoreOffersV1Response
import henrikdevApiClient.models.StoredMMRResponse
import henrikdevApiClient.models.StoredMMRV2Response
import henrikdevApiClient.models.StoredMatchesResponse
import henrikdevApiClient.models.VersionV1Response
import henrikdevApiClient.models.WebsiteByIdV1Response
import henrikdevApiClient.models.WebsiteV1Response

class ValorantApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ValorantApi
        //val apiInstance = ValorantApi()

        // to test crosshair
        should("test crosshair") {
            // uncomment below to test crosshair
            //val id : kotlin.String = id_example // kotlin.String | Crosshair code
            //apiInstance.crosshair(id)
        }

        // to test esportsSchedulesV1
        should("test esportsSchedulesV1") {
            // uncomment below to test esportsSchedulesV1
            //val region : kotlin.String = region_example // kotlin.String | Region filter (optional)
            //val result : EsportsV1Response = apiInstance.esportsSchedulesV1(region)
            //result shouldBe ("TODO")
        }

        // to test getAccountByIdV1
        should("test getAccountByIdV1") {
            // uncomment below to test getAccountByIdV1
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val force : kotlin.Boolean = true // kotlin.Boolean | Bypass cache and refresh (optional)
            //val result : AccountV1Response = apiInstance.getAccountByIdV1(puuid, force)
            //result shouldBe ("TODO")
        }

        // to test getAccountByIdV2
        should("test getAccountByIdV2") {
            // uncomment below to test getAccountByIdV2
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val force : kotlin.Boolean = true // kotlin.Boolean | Bypass cache and refresh (optional)
            //val result : AccountV2Response = apiInstance.getAccountByIdV2(puuid, force)
            //result shouldBe ("TODO")
        }

        // to test getAccountV1
        should("test getAccountV1") {
            // uncomment below to test getAccountV1
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val force : kotlin.Boolean = true // kotlin.Boolean | Bypass cache and refresh (optional)
            //val result : AccountV1Response = apiInstance.getAccountV1(name, tag, force)
            //result shouldBe ("TODO")
        }

        // to test getAccountV2
        should("test getAccountV2") {
            // uncomment below to test getAccountV2
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val force : kotlin.Boolean = true // kotlin.Boolean | Bypass cache and refresh (optional)
            //val result : AccountV2Response = apiInstance.getAccountV2(name, tag, force)
            //result shouldBe ("TODO")
        }

        // to test getContentV1
        should("test getContentV1") {
            // uncomment below to test getContentV1
            //val locale : kotlin.String = locale_example // kotlin.String | Locale code (e.g., en-US, de-DE) - optional
            //val result : ContentV1Response = apiInstance.getContentV1(locale)
            //result shouldBe ("TODO")
        }

        // to test getMatchesV3ById
        should("test getMatchesV3ById") {
            // uncomment below to test getMatchesV3ById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val mode : kotlin.String = mode_example // kotlin.String | Game mode filter (optional)
            //val map : kotlin.String = map_example // kotlin.String | Map filter (optional)
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : MatchesV3ListResponse = apiInstance.getMatchesV3ById(affinity, puuid, mode, map, size)
            //result shouldBe ("TODO")
        }

        // to test getMatchesV3ByName
        should("test getMatchesV3ByName") {
            // uncomment below to test getMatchesV3ByName
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val mode : MatchMode =  // MatchMode | Game mode filter (optional)
            //val map : kotlin.String = map_example // kotlin.String | Map filter (optional)
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : MatchesV3ListResponse = apiInstance.getMatchesV3ByName(affinity, name, tag, mode, map, size)
            //result shouldBe ("TODO")
        }

        // to test getMatchesV4ById
        should("test getMatchesV4ById") {
            // uncomment below to test getMatchesV4ById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val mode : kotlin.String = mode_example // kotlin.String | Game mode filter (optional)
            //val map : kotlin.String = map_example // kotlin.String | Map filter (optional)
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val start : kotlin.Int = 56 // kotlin.Int | Start index for pagination (optional)
            //val result : MatchesV4HistoryResponse = apiInstance.getMatchesV4ById(affinity, platform, puuid, mode, map, size, start)
            //result shouldBe ("TODO")
        }

        // to test getMatchesV4ByName
        should("test getMatchesV4ByName") {
            // uncomment below to test getMatchesV4ByName
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val mode : kotlin.String = mode_example // kotlin.String | Game mode filter (optional)
            //val map : kotlin.String = map_example // kotlin.String | Map filter (optional)
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val start : kotlin.Int = 56 // kotlin.Int | Start index for pagination (optional)
            //val result : MatchesV4HistoryResponse = apiInstance.getMatchesV4ByName(affinity, platform, name, tag, mode, map, size, start)
            //result shouldBe ("TODO")
        }

        // to test getMmrHistoryById
        should("test getMmrHistoryById") {
            // uncomment below to test getMmrHistoryById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val result : MMRHistoryV1Response = apiInstance.getMmrHistoryById(affinity, puuid)
            //result shouldBe ("TODO")
        }

        // to test getMmrHistoryByName
        should("test getMmrHistoryByName") {
            // uncomment below to test getMmrHistoryByName
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val result : MMRHistoryV1Response = apiInstance.getMmrHistoryByName(affinity, name, tag)
            //result shouldBe ("TODO")
        }

        // to test getMmrHistoryV2ById
        should("test getMmrHistoryV2ById") {
            // uncomment below to test getMmrHistoryV2ById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val result : MMRHistoryV2Response = apiInstance.getMmrHistoryV2ById(affinity, platform, puuid)
            //result shouldBe ("TODO")
        }

        // to test getMmrHistoryV2ByName
        should("test getMmrHistoryV2ByName") {
            // uncomment below to test getMmrHistoryV2ByName
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val result : MMRHistoryV2Response = apiInstance.getMmrHistoryV2ByName(affinity, platform, name, tag)
            //result shouldBe ("TODO")
        }

        // to test getMmrV1ById
        should("test getMmrV1ById") {
            // uncomment below to test getMmrV1ById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val result : MMRV1Response = apiInstance.getMmrV1ById(affinity, puuid)
            //result shouldBe ("TODO")
        }

        // to test getMmrV1ByName
        should("test getMmrV1ByName") {
            // uncomment below to test getMmrV1ByName
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val result : MMRV1Response = apiInstance.getMmrV1ByName(affinity, name, tag)
            //result shouldBe ("TODO")
        }

        // to test getMmrV2ById
        should("test getMmrV2ById") {
            // uncomment below to test getMmrV2ById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val result : MMRV2Response = apiInstance.getMmrV2ById(affinity, puuid)
            //result shouldBe ("TODO")
        }

        // to test getMmrV2ByName
        should("test getMmrV2ByName") {
            // uncomment below to test getMmrV2ByName
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val result : MMRV2Response = apiInstance.getMmrV2ByName(affinity, name, tag)
            //result shouldBe ("TODO")
        }

        // to test getMmrV3ById
        should("test getMmrV3ById") {
            // uncomment below to test getMmrV3ById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val result : MMRV3Response = apiInstance.getMmrV3ById(affinity, platform, puuid)
            //result shouldBe ("TODO")
        }

        // to test getMmrV3ByName
        should("test getMmrV3ByName") {
            // uncomment below to test getMmrV3ByName
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val result : MMRV3Response = apiInstance.getMmrV3ByName(affinity, platform, name, tag)
            //result shouldBe ("TODO")
        }

        // to test leaderboardV1
        should("test leaderboardV1") {
            // uncomment below to test leaderboardV1
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val season : kotlin.String = season_example // kotlin.String | Season ID (optional)
            //val name : kotlin.String = name_example // kotlin.String | Player name to search for (optional)
            //val tag : kotlin.String = tag_example // kotlin.String | Player tag to search for (optional)
            //val result : kotlin.Any = apiInstance.leaderboardV1(affinity, season, name, tag)
            //result shouldBe ("TODO")
        }

        // to test leaderboardV2
        should("test leaderboardV2") {
            // uncomment below to test leaderboardV2
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val season : kotlin.String = season_example // kotlin.String | Season ID (optional)
            //val name : kotlin.String = name_example // kotlin.String | Player name to search for (optional)
            //val tag : kotlin.String = tag_example // kotlin.String | Player tag to search for (optional)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID to search for (optional)
            //val result : LeaderboardV2Response = apiInstance.leaderboardV2(affinity, season, name, tag, puuid)
            //result shouldBe ("TODO")
        }

        // to test leaderboardV3
        should("test leaderboardV3") {
            // uncomment below to test leaderboardV3
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val season : kotlin.String = season_example // kotlin.String | Season ID (optional)
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results per page (optional)
            //val page : kotlin.Int = 56 // kotlin.Int | Page number (optional)
            //val name : kotlin.String = name_example // kotlin.String | Player name to search for (optional)
            //val tag : kotlin.String = tag_example // kotlin.String | Player tag to search for (optional)
            //val result : LeaderboardV3Response = apiInstance.leaderboardV3(affinity, platform, season, size, page, name, tag)
            //result shouldBe ("TODO")
        }

        // to test matchV2
        should("test matchV2") {
            // uncomment below to test matchV2
            //val matchId : kotlin.String = matchId_example // kotlin.String | Match UUID
            //val result : MatchesV2Response = apiInstance.matchV2(matchId)
            //result shouldBe ("TODO")
        }

        // to test matchV4
        should("test matchV4") {
            // uncomment below to test matchV4
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val matchId : kotlin.String = matchId_example // kotlin.String | Match UUID
            //val result : MatchesV4Response = apiInstance.matchV4(affinity, matchId)
            //result shouldBe ("TODO")
        }

        // to test premierById
        should("test premierById") {
            // uncomment below to test premierById
            //val id : kotlin.String = id_example // kotlin.String | Team UUID
            //val result : PremierTeamV1Response = apiInstance.premierById(id)
            //result shouldBe ("TODO")
        }

        // to test premierByIdHistory
        should("test premierByIdHistory") {
            // uncomment below to test premierByIdHistory
            //val id : kotlin.String = id_example // kotlin.String | Team UUID
            //val result : PremierTeamV1Response = apiInstance.premierByIdHistory(id)
            //result shouldBe ("TODO")
        }

        // to test premierByName
        should("test premierByName") {
            // uncomment below to test premierByName
            //val name : kotlin.String = name_example // kotlin.String | Team name
            //val tag : kotlin.String = tag_example // kotlin.String | Team tag
            //val result : PremierTeamV1Response = apiInstance.premierByName(name, tag)
            //result shouldBe ("TODO")
        }

        // to test premierByNameHistory
        should("test premierByNameHistory") {
            // uncomment below to test premierByNameHistory
            //val name : kotlin.String = name_example // kotlin.String | Team name
            //val tag : kotlin.String = tag_example // kotlin.String | Team tag
            //val result : PremierTeamHistoryV1Response = apiInstance.premierByNameHistory(name, tag)
            //result shouldBe ("TODO")
        }

        // to test premierLeaderboard
        should("test premierLeaderboard") {
            // uncomment below to test premierLeaderboard
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val conference : kotlin.String = conference_example // kotlin.String | Conference filter (optional)
            //val division : kotlin.String = division_example // kotlin.String | Division filter (optional)
            //val result : PremierSearchResponse = apiInstance.premierLeaderboard(affinity, conference, division)
            //result shouldBe ("TODO")
        }

        // to test premierSearch
        should("test premierSearch") {
            // uncomment below to test premierSearch
            //val name : kotlin.String = name_example // kotlin.String | Team name to search for (optional)
            //val tag : kotlin.String = tag_example // kotlin.String | Team tag to search for (optional)
            //val id : kotlin.String = id_example // kotlin.String | Team UUID to search for (optional)
            //val result : PremierSearchResponse = apiInstance.premierSearch(name, tag, id)
            //result shouldBe ("TODO")
        }

        // to test queueStatus
        should("test queueStatus") {
            // uncomment below to test queueStatus
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val result : QueueStatusV1 = apiInstance.queueStatus(affinity)
            //result shouldBe ("TODO")
        }

        // to test raw
        should("test raw") {
            // uncomment below to test raw
            //val rawV1Payload : RawV1Payload =  // RawV1Payload | 
            //val result : RawV1Response = apiInstance.raw(rawV1Payload)
            //result shouldBe ("TODO")
        }

        // to test status
        should("test status") {
            // uncomment below to test status
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val result : StatusV1 = apiInstance.status(affinity)
            //result shouldBe ("TODO")
        }

        // to test storeFeatured
        should("test storeFeatured") {
            // uncomment below to test storeFeatured
            //val version : kotlin.String = version_example // kotlin.String | API version (v1, v2)
            //val result : StoreFeaturedV1 = apiInstance.storeFeatured(version)
            //result shouldBe ("TODO")
        }

        // to test storeOffers
        should("test storeOffers") {
            // uncomment below to test storeOffers
            //val version : kotlin.String = version_example // kotlin.String | API version (v1, v2)
            //val result : StoreOffersV1Response = apiInstance.storeOffers(version)
            //result shouldBe ("TODO")
        }

        // to test storedMatches
        should("test storedMatches") {
            // uncomment below to test storedMatches
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val mode : kotlin.String = mode_example // kotlin.String | Game mode filter (optional)
            //val map : kotlin.String = map_example // kotlin.String | Map filter (optional)
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : StoredMatchesResponse = apiInstance.storedMatches(affinity, name, tag, mode, map, size)
            //result shouldBe ("TODO")
        }

        // to test storedMatchesById
        should("test storedMatchesById") {
            // uncomment below to test storedMatchesById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val mode : kotlin.String = mode_example // kotlin.String | Game mode filter (optional)
            //val map : kotlin.String = map_example // kotlin.String | Map filter (optional)
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : StoredMatchesResponse = apiInstance.storedMatchesById(affinity, puuid, mode, map, size)
            //result shouldBe ("TODO")
        }

        // to test storedMmrHistory
        should("test storedMmrHistory") {
            // uncomment below to test storedMmrHistory
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : StoredMMRResponse = apiInstance.storedMmrHistory(affinity, name, tag, size)
            //result shouldBe ("TODO")
        }

        // to test storedMmrHistoryById
        should("test storedMmrHistoryById") {
            // uncomment below to test storedMmrHistoryById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : StoredMMRResponse = apiInstance.storedMmrHistoryById(affinity, puuid, size)
            //result shouldBe ("TODO")
        }

        // to test storedMmrHistoryV2
        should("test storedMmrHistoryV2") {
            // uncomment below to test storedMmrHistoryV2
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val name : kotlin.String = name_example // kotlin.String | Riot ID name
            //val tag : kotlin.String = tag_example // kotlin.String | Riot ID tag
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : StoredMMRV2Response = apiInstance.storedMmrHistoryV2(affinity, platform, name, tag, size)
            //result shouldBe ("TODO")
        }

        // to test storedMmrHistoryV2ById
        should("test storedMmrHistoryV2ById") {
            // uncomment below to test storedMmrHistoryV2ById
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val platform : kotlin.String = platform_example // kotlin.String | Platform (pc, console)
            //val puuid : kotlin.String = puuid_example // kotlin.String | Player UUID
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results (optional)
            //val result : StoredMMRV2Response = apiInstance.storedMmrHistoryV2ById(affinity, platform, puuid, size)
            //result shouldBe ("TODO")
        }

        // to test version
        should("test version") {
            // uncomment below to test version
            //val affinity : kotlin.String = affinity_example // kotlin.String | Region/affinity (e.g., na, eu, ap, kr)
            //val result : VersionV1Response = apiInstance.version(affinity)
            //result shouldBe ("TODO")
        }

        // to test website
        should("test website") {
            // uncomment below to test website
            //val countryCode : kotlin.String = countryCode_example // kotlin.String | Country code (e.g., en-us, de-de)
            //val category : kotlin.String = category_example // kotlin.String | Category filter (optional)
            //val result : WebsiteV1Response = apiInstance.website(countryCode, category)
            //result shouldBe ("TODO")
        }

        // to test websiteById
        should("test websiteById") {
            // uncomment below to test websiteById
            //val dbId : kotlin.String = dbId_example // kotlin.String | Database ID of the website entry
            //val countryCode : kotlin.String = countryCode_example // kotlin.String | Country code (e.g., en-us, de-de)
            //val result : WebsiteByIdV1Response = apiInstance.websiteById(dbId, countryCode)
            //result shouldBe ("TODO")
        }

    }
}
