/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package henrikdevApiClient.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import henrikdevApiClient.models.MatchesV2DataRoundPlayerStats
import henrikdevApiClient.models.MatchesV2DataRoundPlayerStatsAbilityCasts
import henrikdevApiClient.models.MatchesV2DataRoundPlayerStatsDamageEvents
import henrikdevApiClient.models.MatchesV2DataRoundPlayerStatsEconomy
import henrikdevApiClient.models.MatchesV2DataRoundPlayerStatsKillEvents

class MatchesV2DataRoundPlayerStatsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MatchesV2DataRoundPlayerStats
        //val modelInstance = MatchesV2DataRoundPlayerStats()

        // to test the property `abilityCasts`
        should("test abilityCasts") {
            // uncomment below to test the property
            //modelInstance.abilityCasts shouldBe ("TODO")
        }

        // to test the property `bodyshots`
        should("test bodyshots") {
            // uncomment below to test the property
            //modelInstance.bodyshots shouldBe ("TODO")
        }

        // to test the property `damage`
        should("test damage") {
            // uncomment below to test the property
            //modelInstance.damage shouldBe ("TODO")
        }

        // to test the property `damageEvents`
        should("test damageEvents") {
            // uncomment below to test the property
            //modelInstance.damageEvents shouldBe ("TODO")
        }

        // to test the property `economy`
        should("test economy") {
            // uncomment below to test the property
            //modelInstance.economy shouldBe ("TODO")
        }

        // to test the property `headshots`
        should("test headshots") {
            // uncomment below to test the property
            //modelInstance.headshots shouldBe ("TODO")
        }

        // to test the property `killEvents`
        should("test killEvents") {
            // uncomment below to test the property
            //modelInstance.killEvents shouldBe ("TODO")
        }

        // to test the property `kills`
        should("test kills") {
            // uncomment below to test the property
            //modelInstance.kills shouldBe ("TODO")
        }

        // to test the property `legshots`
        should("test legshots") {
            // uncomment below to test the property
            //modelInstance.legshots shouldBe ("TODO")
        }

        // to test the property `playerDisplayName`
        should("test playerDisplayName") {
            // uncomment below to test the property
            //modelInstance.playerDisplayName shouldBe ("TODO")
        }

        // to test the property `playerPuuid`
        should("test playerPuuid") {
            // uncomment below to test the property
            //modelInstance.playerPuuid shouldBe ("TODO")
        }

        // to test the property `playerTeam`
        should("test playerTeam") {
            // uncomment below to test the property
            //modelInstance.playerTeam shouldBe ("TODO")
        }

        // to test the property `score`
        should("test score") {
            // uncomment below to test the property
            //modelInstance.score shouldBe ("TODO")
        }

        // to test the property `stayedInSpawn`
        should("test stayedInSpawn") {
            // uncomment below to test the property
            //modelInstance.stayedInSpawn shouldBe ("TODO")
        }

        // to test the property `wasAfk`
        should("test wasAfk") {
            // uncomment below to test the property
            //modelInstance.wasAfk shouldBe ("TODO")
        }

        // to test the property `wasPenalized`
        should("test wasPenalized") {
            // uncomment below to test the property
            //modelInstance.wasPenalized shouldBe ("TODO")
        }

    }
}
