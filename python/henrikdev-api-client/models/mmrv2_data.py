# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from henrikdev-api-client.models.mmrv2_current_data import MMRV2CurrentData
from henrikdev-api-client.models.mmrv2_highest_rank import MMRV2HighestRank
from typing import Optional, Set
from typing_extensions import Self

class MMRV2Data(BaseModel):
    """
    MMRV2Data
    """ # noqa: E501
    by_season: Optional[Any]
    current_data: MMRV2CurrentData
    highest_rank: MMRV2HighestRank
    name: StrictStr
    puuid: StrictStr
    tag: StrictStr
    __properties: ClassVar[List[str]] = ["by_season", "current_data", "highest_rank", "name", "puuid", "tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MMRV2Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_data
        if self.current_data:
            _dict['current_data'] = self.current_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of highest_rank
        if self.highest_rank:
            _dict['highest_rank'] = self.highest_rank.to_dict()
        # set to None if by_season (nullable) is None
        # and model_fields_set contains the field
        if self.by_season is None and "by_season" in self.model_fields_set:
            _dict['by_season'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MMRV2Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "by_season": obj.get("by_season"),
            "current_data": MMRV2CurrentData.from_dict(obj["current_data"]) if obj.get("current_data") is not None else None,
            "highest_rank": MMRV2HighestRank.from_dict(obj["highest_rank"]) if obj.get("highest_rank") is not None else None,
            "name": obj.get("name"),
            "puuid": obj.get("puuid"),
            "tag": obj.get("tag")
        })
        return _obj


