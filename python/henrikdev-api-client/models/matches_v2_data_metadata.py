# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v2_data_metadata_premier_info import MatchesV2DataMetadataPremierInfo
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataMetadata(BaseModel):
    """
    MatchesV2DataMetadata
    """ # noqa: E501
    cluster: Optional[StrictStr] = None
    game_length: Annotated[int, Field(strict=True, ge=0)]
    game_start: Annotated[int, Field(strict=True, ge=0)]
    game_start_patched: StrictStr
    game_version: StrictStr
    map: Optional[StrictStr] = None
    matchid: StrictStr
    mode: Optional[StrictStr] = None
    mode_id: StrictStr
    platform: StrictStr
    premier_info: MatchesV2DataMetadataPremierInfo
    queue: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    rounds_played: Annotated[int, Field(strict=True, ge=0)]
    season_id: StrictStr
    __properties: ClassVar[List[str]] = ["cluster", "game_length", "game_start", "game_start_patched", "game_version", "map", "matchid", "mode", "mode_id", "platform", "premier_info", "queue", "region", "rounds_played", "season_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of premier_info
        if self.premier_info:
            _dict['premier_info'] = self.premier_info.to_dict()
        # set to None if cluster (nullable) is None
        # and model_fields_set contains the field
        if self.cluster is None and "cluster" in self.model_fields_set:
            _dict['cluster'] = None

        # set to None if map (nullable) is None
        # and model_fields_set contains the field
        if self.map is None and "map" in self.model_fields_set:
            _dict['map'] = None

        # set to None if mode (nullable) is None
        # and model_fields_set contains the field
        if self.mode is None and "mode" in self.model_fields_set:
            _dict['mode'] = None

        # set to None if queue (nullable) is None
        # and model_fields_set contains the field
        if self.queue is None and "queue" in self.model_fields_set:
            _dict['queue'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster": obj.get("cluster"),
            "game_length": obj.get("game_length"),
            "game_start": obj.get("game_start"),
            "game_start_patched": obj.get("game_start_patched"),
            "game_version": obj.get("game_version"),
            "map": obj.get("map"),
            "matchid": obj.get("matchid"),
            "mode": obj.get("mode"),
            "mode_id": obj.get("mode_id"),
            "platform": obj.get("platform"),
            "premier_info": MatchesV2DataMetadataPremierInfo.from_dict(obj["premier_info"]) if obj.get("premier_info") is not None else None,
            "queue": obj.get("queue"),
            "region": obj.get("region"),
            "rounds_played": obj.get("rounds_played"),
            "season_id": obj.get("season_id")
        })
        return _obj


