# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.premier_team_v1_response_data_customization import PremierTeamV1ResponseDataCustomization
from typing import Optional, Set
from typing_extensions import Self

class PremierTeamLiteResponseData(BaseModel):
    """
    PremierTeamLiteResponseData
    """ # noqa: E501
    affinity: StrictStr
    conference: StrictStr
    customization: PremierTeamV1ResponseDataCustomization
    division: StrictInt
    id: StrictStr
    losses: StrictInt
    name: StrictStr
    ranking: StrictInt
    region: StrictStr
    score: StrictInt
    tag: StrictStr
    updated_at: StrictStr
    wins: StrictInt
    __properties: ClassVar[List[str]] = ["affinity", "conference", "customization", "division", "id", "losses", "name", "ranking", "region", "score", "tag", "updated_at", "wins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PremierTeamLiteResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customization
        if self.customization:
            _dict['customization'] = self.customization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PremierTeamLiteResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affinity": obj.get("affinity"),
            "conference": obj.get("conference"),
            "customization": PremierTeamV1ResponseDataCustomization.from_dict(obj["customization"]) if obj.get("customization") is not None else None,
            "division": obj.get("division"),
            "id": obj.get("id"),
            "losses": obj.get("losses"),
            "name": obj.get("name"),
            "ranking": obj.get("ranking"),
            "region": obj.get("region"),
            "score": obj.get("score"),
            "tag": obj.get("tag"),
            "updated_at": obj.get("updated_at"),
            "wins": obj.get("wins")
        })
        return _obj


