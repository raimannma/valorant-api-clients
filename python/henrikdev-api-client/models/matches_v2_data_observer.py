# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v2_data_platform import MatchesV2DataPlatform
from henrikdev-api-client.models.matches_v2_data_player_session_playtime import MatchesV2DataPlayerSessionPlaytime
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataObserver(BaseModel):
    """
    MatchesV2DataObserver
    """ # noqa: E501
    level: Annotated[int, Field(strict=True, ge=0)]
    name: StrictStr
    party_id: StrictStr
    platform: MatchesV2DataPlatform
    player_card: StrictStr
    player_title: StrictStr
    puuid: StrictStr
    session_playtime: MatchesV2DataPlayerSessionPlaytime
    tag: StrictStr
    team: StrictStr
    __properties: ClassVar[List[str]] = ["level", "name", "party_id", "platform", "player_card", "player_title", "puuid", "session_playtime", "tag", "team"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataObserver from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_playtime
        if self.session_playtime:
            _dict['session_playtime'] = self.session_playtime.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataObserver from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "level": obj.get("level"),
            "name": obj.get("name"),
            "party_id": obj.get("party_id"),
            "platform": MatchesV2DataPlatform.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "player_card": obj.get("player_card"),
            "player_title": obj.get("player_title"),
            "puuid": obj.get("puuid"),
            "session_playtime": MatchesV2DataPlayerSessionPlaytime.from_dict(obj["session_playtime"]) if obj.get("session_playtime") is not None else None,
            "tag": obj.get("tag"),
            "team": obj.get("team")
        })
        return _obj


