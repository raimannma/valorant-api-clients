# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.matches_v4_data_round_location import MatchesV4DataRoundLocation
from henrikdev-api-client.models.matches_v4_data_round_player import MatchesV4DataRoundPlayer
from henrikdev-api-client.models.matches_v4_data_round_player_locations import MatchesV4DataRoundPlayerLocations
from typing import Optional, Set
from typing_extensions import Self

class MatchesV4DataRoundPlant(BaseModel):
    """
    MatchesV4DataRoundPlant
    """ # noqa: E501
    location: MatchesV4DataRoundLocation
    player: MatchesV4DataRoundPlayer
    player_locations: List[MatchesV4DataRoundPlayerLocations]
    round_time_in_ms: StrictInt
    site: StrictStr
    __properties: ClassVar[List[str]] = ["location", "player", "player_locations", "round_time_in_ms", "site"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV4DataRoundPlant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in player_locations (list)
        _items = []
        if self.player_locations:
            for _item_player_locations in self.player_locations:
                if _item_player_locations:
                    _items.append(_item_player_locations.to_dict())
            _dict['player_locations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV4DataRoundPlant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": MatchesV4DataRoundLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "player": MatchesV4DataRoundPlayer.from_dict(obj["player"]) if obj.get("player") is not None else None,
            "player_locations": [MatchesV4DataRoundPlayerLocations.from_dict(_item) for _item in obj["player_locations"]] if obj.get("player_locations") is not None else None,
            "round_time_in_ms": obj.get("round_time_in_ms"),
            "site": obj.get("site")
        })
        return _obj


