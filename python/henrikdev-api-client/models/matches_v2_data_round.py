# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.matches_v2_data_round_defuse_events import MatchesV2DataRoundDefuseEvents
from henrikdev-api-client.models.matches_v2_data_round_plant_events import MatchesV2DataRoundPlantEvents
from henrikdev-api-client.models.matches_v2_data_round_player_stats import MatchesV2DataRoundPlayerStats
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataRound(BaseModel):
    """
    MatchesV2DataRound
    """ # noqa: E501
    bomb_defused: StrictBool
    bomb_planted: StrictBool
    defuse_events: MatchesV2DataRoundDefuseEvents
    end_type: StrictStr
    plant_events: MatchesV2DataRoundPlantEvents
    player_stats: List[MatchesV2DataRoundPlayerStats]
    winning_team: StrictStr
    __properties: ClassVar[List[str]] = ["bomb_defused", "bomb_planted", "defuse_events", "end_type", "plant_events", "player_stats", "winning_team"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataRound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of defuse_events
        if self.defuse_events:
            _dict['defuse_events'] = self.defuse_events.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plant_events
        if self.plant_events:
            _dict['plant_events'] = self.plant_events.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in player_stats (list)
        _items = []
        if self.player_stats:
            for _item_player_stats in self.player_stats:
                if _item_player_stats:
                    _items.append(_item_player_stats.to_dict())
            _dict['player_stats'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataRound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bomb_defused": obj.get("bomb_defused"),
            "bomb_planted": obj.get("bomb_planted"),
            "defuse_events": MatchesV2DataRoundDefuseEvents.from_dict(obj["defuse_events"]) if obj.get("defuse_events") is not None else None,
            "end_type": obj.get("end_type"),
            "plant_events": MatchesV2DataRoundPlantEvents.from_dict(obj["plant_events"]) if obj.get("plant_events") is not None else None,
            "player_stats": [MatchesV2DataRoundPlayerStats.from_dict(_item) for _item in obj["player_stats"]] if obj.get("player_stats") is not None else None,
            "winning_team": obj.get("winning_team")
        })
        return _obj


