# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class QueueStatusV1GameRules(BaseModel):
    """
    QueueStatusV1GameRules
    """ # noqa: E501
    allow_drop_out: StrictBool
    allow_lenient_surrender: StrictBool
    allow_overtime_draw_vote: StrictBool
    assign_random_agents: StrictBool
    overtime_win_by_two: StrictBool
    overtime_win_by_two_capped: StrictBool
    premier_mode: StrictBool
    skip_pregame: StrictBool
    __properties: ClassVar[List[str]] = ["allow_drop_out", "allow_lenient_surrender", "allow_overtime_draw_vote", "assign_random_agents", "overtime_win_by_two", "overtime_win_by_two_capped", "premier_mode", "skip_pregame"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueueStatusV1GameRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueueStatusV1GameRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_drop_out": obj.get("allow_drop_out"),
            "allow_lenient_surrender": obj.get("allow_lenient_surrender"),
            "allow_overtime_draw_vote": obj.get("allow_overtime_draw_vote"),
            "assign_random_agents": obj.get("assign_random_agents"),
            "overtime_win_by_two": obj.get("overtime_win_by_two"),
            "overtime_win_by_two_capped": obj.get("overtime_win_by_two_capped"),
            "premier_mode": obj.get("premier_mode"),
            "skip_pregame": obj.get("skip_pregame")
        })
        return _obj


