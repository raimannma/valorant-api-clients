# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v4_data_round_defuse import MatchesV4DataRoundDefuse
from henrikdev-api-client.models.matches_v4_data_round_plant import MatchesV4DataRoundPlant
from henrikdev-api-client.models.matches_v4_data_round_player_stats import MatchesV4DataRoundPlayerStats
from typing import Optional, Set
from typing_extensions import Self

class MatchesV4DataRound(BaseModel):
    """
    MatchesV4DataRound
    """ # noqa: E501
    ceremony: StrictStr
    defuse: Optional[MatchesV4DataRoundDefuse] = None
    id: Annotated[int, Field(strict=True, ge=0)]
    plant: Optional[MatchesV4DataRoundPlant] = None
    result: StrictStr
    stats: List[MatchesV4DataRoundPlayerStats]
    winning_team: StrictStr
    __properties: ClassVar[List[str]] = ["ceremony", "defuse", "id", "plant", "result", "stats", "winning_team"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV4DataRound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of defuse
        if self.defuse:
            _dict['defuse'] = self.defuse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plant
        if self.plant:
            _dict['plant'] = self.plant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stats (list)
        _items = []
        if self.stats:
            for _item_stats in self.stats:
                if _item_stats:
                    _items.append(_item_stats.to_dict())
            _dict['stats'] = _items
        # set to None if defuse (nullable) is None
        # and model_fields_set contains the field
        if self.defuse is None and "defuse" in self.model_fields_set:
            _dict['defuse'] = None

        # set to None if plant (nullable) is None
        # and model_fields_set contains the field
        if self.plant is None and "plant" in self.model_fields_set:
            _dict['plant'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV4DataRound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ceremony": obj.get("ceremony"),
            "defuse": MatchesV4DataRoundDefuse.from_dict(obj["defuse"]) if obj.get("defuse") is not None else None,
            "id": obj.get("id"),
            "plant": MatchesV4DataRoundPlant.from_dict(obj["plant"]) if obj.get("plant") is not None else None,
            "result": obj.get("result"),
            "stats": [MatchesV4DataRoundPlayerStats.from_dict(_item) for _item in obj["stats"]] if obj.get("stats") is not None else None,
            "winning_team": obj.get("winning_team")
        })
        return _obj


