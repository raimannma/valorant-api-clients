# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from henrikdev-api-client.models.mmrv3_leaderboard_placement import MMRV3LeaderboardPlacement
from henrikdev-api-client.models.season_id_short_combo import SeasonIdShortCombo
from henrikdev-api-client.models.tier_id_name_combo import TierIdNameCombo
from typing import Optional, Set
from typing_extensions import Self

class MMRV3Seasonal(BaseModel):
    """
    MMRV3Seasonal
    """ # noqa: E501
    act_wins: List[TierIdNameCombo]
    end_rr: StrictInt
    end_tier: TierIdNameCombo
    games: StrictInt
    leaderboard_placement: Optional[MMRV3LeaderboardPlacement] = None
    ranking_schema: StrictStr
    season: SeasonIdShortCombo
    wins: StrictInt
    __properties: ClassVar[List[str]] = ["act_wins", "end_rr", "end_tier", "games", "leaderboard_placement", "ranking_schema", "season", "wins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MMRV3Seasonal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in act_wins (list)
        _items = []
        if self.act_wins:
            for _item_act_wins in self.act_wins:
                if _item_act_wins:
                    _items.append(_item_act_wins.to_dict())
            _dict['act_wins'] = _items
        # override the default output from pydantic by calling `to_dict()` of end_tier
        if self.end_tier:
            _dict['end_tier'] = self.end_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leaderboard_placement
        if self.leaderboard_placement:
            _dict['leaderboard_placement'] = self.leaderboard_placement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict['season'] = self.season.to_dict()
        # set to None if leaderboard_placement (nullable) is None
        # and model_fields_set contains the field
        if self.leaderboard_placement is None and "leaderboard_placement" in self.model_fields_set:
            _dict['leaderboard_placement'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MMRV3Seasonal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "act_wins": [TierIdNameCombo.from_dict(_item) for _item in obj["act_wins"]] if obj.get("act_wins") is not None else None,
            "end_rr": obj.get("end_rr"),
            "end_tier": TierIdNameCombo.from_dict(obj["end_tier"]) if obj.get("end_tier") is not None else None,
            "games": obj.get("games"),
            "leaderboard_placement": MMRV3LeaderboardPlacement.from_dict(obj["leaderboard_placement"]) if obj.get("leaderboard_placement") is not None else None,
            "ranking_schema": obj.get("ranking_schema"),
            "season": SeasonIdShortCombo.from_dict(obj["season"]) if obj.get("season") is not None else None,
            "wins": obj.get("wins")
        })
        return _obj


