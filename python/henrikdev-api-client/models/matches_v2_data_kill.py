# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v2_data_round_event_location import MatchesV2DataRoundEventLocation
from henrikdev-api-client.models.matches_v2_data_round_player_locations_on_event import MatchesV2DataRoundPlayerLocationsOnEvent
from henrikdev-api-client.models.matches_v2_data_round_player_stats_kill_events_assets import MatchesV2DataRoundPlayerStatsKillEventsAssets
from henrikdev-api-client.models.matches_v2_data_round_player_stats_kill_events_assistants import MatchesV2DataRoundPlayerStatsKillEventsAssistants
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataKill(BaseModel):
    """
    MatchesV2DataKill
    """ # noqa: E501
    assistants: List[MatchesV2DataRoundPlayerStatsKillEventsAssistants]
    damage_weapon_assets: MatchesV2DataRoundPlayerStatsKillEventsAssets
    damage_weapon_id: StrictStr
    damage_weapon_name: Optional[StrictStr] = None
    kill_time_in_match: Annotated[int, Field(strict=True, ge=0)]
    kill_time_in_round: Annotated[int, Field(strict=True, ge=0)]
    killer_display_name: StrictStr
    killer_puuid: StrictStr
    killer_team: StrictStr
    player_locations_on_kill: List[MatchesV2DataRoundPlayerLocationsOnEvent]
    round: Annotated[int, Field(strict=True, ge=0)]
    secondary_fire_mode: StrictBool
    victim_death_location: MatchesV2DataRoundEventLocation
    victim_display_name: StrictStr
    victim_puuid: StrictStr
    victim_team: StrictStr
    __properties: ClassVar[List[str]] = ["assistants", "damage_weapon_assets", "damage_weapon_id", "damage_weapon_name", "kill_time_in_match", "kill_time_in_round", "killer_display_name", "killer_puuid", "killer_team", "player_locations_on_kill", "round", "secondary_fire_mode", "victim_death_location", "victim_display_name", "victim_puuid", "victim_team"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataKill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assistants (list)
        _items = []
        if self.assistants:
            for _item_assistants in self.assistants:
                if _item_assistants:
                    _items.append(_item_assistants.to_dict())
            _dict['assistants'] = _items
        # override the default output from pydantic by calling `to_dict()` of damage_weapon_assets
        if self.damage_weapon_assets:
            _dict['damage_weapon_assets'] = self.damage_weapon_assets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in player_locations_on_kill (list)
        _items = []
        if self.player_locations_on_kill:
            for _item_player_locations_on_kill in self.player_locations_on_kill:
                if _item_player_locations_on_kill:
                    _items.append(_item_player_locations_on_kill.to_dict())
            _dict['player_locations_on_kill'] = _items
        # override the default output from pydantic by calling `to_dict()` of victim_death_location
        if self.victim_death_location:
            _dict['victim_death_location'] = self.victim_death_location.to_dict()
        # set to None if damage_weapon_name (nullable) is None
        # and model_fields_set contains the field
        if self.damage_weapon_name is None and "damage_weapon_name" in self.model_fields_set:
            _dict['damage_weapon_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataKill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assistants": [MatchesV2DataRoundPlayerStatsKillEventsAssistants.from_dict(_item) for _item in obj["assistants"]] if obj.get("assistants") is not None else None,
            "damage_weapon_assets": MatchesV2DataRoundPlayerStatsKillEventsAssets.from_dict(obj["damage_weapon_assets"]) if obj.get("damage_weapon_assets") is not None else None,
            "damage_weapon_id": obj.get("damage_weapon_id"),
            "damage_weapon_name": obj.get("damage_weapon_name"),
            "kill_time_in_match": obj.get("kill_time_in_match"),
            "kill_time_in_round": obj.get("kill_time_in_round"),
            "killer_display_name": obj.get("killer_display_name"),
            "killer_puuid": obj.get("killer_puuid"),
            "killer_team": obj.get("killer_team"),
            "player_locations_on_kill": [MatchesV2DataRoundPlayerLocationsOnEvent.from_dict(_item) for _item in obj["player_locations_on_kill"]] if obj.get("player_locations_on_kill") is not None else None,
            "round": obj.get("round"),
            "secondary_fire_mode": obj.get("secondary_fire_mode"),
            "victim_death_location": MatchesV2DataRoundEventLocation.from_dict(obj["victim_death_location"]) if obj.get("victim_death_location") is not None else None,
            "victim_display_name": obj.get("victim_display_name"),
            "victim_puuid": obj.get("victim_puuid"),
            "victim_team": obj.get("victim_team")
        })
        return _obj


