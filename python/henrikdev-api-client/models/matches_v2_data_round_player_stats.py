# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v2_data_round_player_stats_ability_casts import MatchesV2DataRoundPlayerStatsAbilityCasts
from henrikdev-api-client.models.matches_v2_data_round_player_stats_damage_events import MatchesV2DataRoundPlayerStatsDamageEvents
from henrikdev-api-client.models.matches_v2_data_round_player_stats_economy import MatchesV2DataRoundPlayerStatsEconomy
from henrikdev-api-client.models.matches_v2_data_round_player_stats_kill_events import MatchesV2DataRoundPlayerStatsKillEvents
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataRoundPlayerStats(BaseModel):
    """
    MatchesV2DataRoundPlayerStats
    """ # noqa: E501
    ability_casts: MatchesV2DataRoundPlayerStatsAbilityCasts
    bodyshots: Annotated[int, Field(strict=True, ge=0)]
    damage: Annotated[int, Field(strict=True, ge=0)]
    damage_events: List[MatchesV2DataRoundPlayerStatsDamageEvents]
    economy: MatchesV2DataRoundPlayerStatsEconomy
    headshots: Annotated[int, Field(strict=True, ge=0)]
    kill_events: List[MatchesV2DataRoundPlayerStatsKillEvents]
    kills: Annotated[int, Field(strict=True, ge=0)]
    legshots: Annotated[int, Field(strict=True, ge=0)]
    player_display_name: StrictStr
    player_puuid: StrictStr
    player_team: StrictStr
    score: StrictInt
    stayed_in_spawn: StrictBool
    was_afk: StrictBool
    was_penalized: StrictBool
    __properties: ClassVar[List[str]] = ["ability_casts", "bodyshots", "damage", "damage_events", "economy", "headshots", "kill_events", "kills", "legshots", "player_display_name", "player_puuid", "player_team", "score", "stayed_in_spawn", "was_afk", "was_penalized"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataRoundPlayerStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ability_casts
        if self.ability_casts:
            _dict['ability_casts'] = self.ability_casts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in damage_events (list)
        _items = []
        if self.damage_events:
            for _item_damage_events in self.damage_events:
                if _item_damage_events:
                    _items.append(_item_damage_events.to_dict())
            _dict['damage_events'] = _items
        # override the default output from pydantic by calling `to_dict()` of economy
        if self.economy:
            _dict['economy'] = self.economy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in kill_events (list)
        _items = []
        if self.kill_events:
            for _item_kill_events in self.kill_events:
                if _item_kill_events:
                    _items.append(_item_kill_events.to_dict())
            _dict['kill_events'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataRoundPlayerStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ability_casts": MatchesV2DataRoundPlayerStatsAbilityCasts.from_dict(obj["ability_casts"]) if obj.get("ability_casts") is not None else None,
            "bodyshots": obj.get("bodyshots"),
            "damage": obj.get("damage"),
            "damage_events": [MatchesV2DataRoundPlayerStatsDamageEvents.from_dict(_item) for _item in obj["damage_events"]] if obj.get("damage_events") is not None else None,
            "economy": MatchesV2DataRoundPlayerStatsEconomy.from_dict(obj["economy"]) if obj.get("economy") is not None else None,
            "headshots": obj.get("headshots"),
            "kill_events": [MatchesV2DataRoundPlayerStatsKillEvents.from_dict(_item) for _item in obj["kill_events"]] if obj.get("kill_events") is not None else None,
            "kills": obj.get("kills"),
            "legshots": obj.get("legshots"),
            "player_display_name": obj.get("player_display_name"),
            "player_puuid": obj.get("player_puuid"),
            "player_team": obj.get("player_team"),
            "score": obj.get("score"),
            "stayed_in_spawn": obj.get("stayed_in_spawn"),
            "was_afk": obj.get("was_afk"),
            "was_penalized": obj.get("was_penalized")
        })
        return _obj


