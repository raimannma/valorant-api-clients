# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from henrikdev-api-client.models.map_id_name_combo import MapIdNameCombo
from henrikdev-api-client.models.matches_v4_data_metadata_party_rr_penalty import MatchesV4DataMetadataPartyRRPenalty
from henrikdev-api-client.models.matches_v4_data_metadata_queue import MatchesV4DataMetadataQueue
from henrikdev-api-client.models.season_id_short_combo import SeasonIdShortCombo
from typing import Optional, Set
from typing_extensions import Self

class MatchesV4DataMetadata(BaseModel):
    """
    MatchesV4DataMetadata
    """ # noqa: E501
    cluster: Optional[StrictStr] = None
    game_length_in_ms: Annotated[int, Field(strict=True, ge=0)]
    game_version: StrictStr
    is_completed: StrictBool
    map: MapIdNameCombo
    match_id: StrictStr
    party_rr_penaltys: List[MatchesV4DataMetadataPartyRRPenalty]
    platform: StrictStr
    premier: Optional[Any] = None
    queue: MatchesV4DataMetadataQueue
    region: Optional[StrictStr] = None
    season: SeasonIdShortCombo
    started_at: StrictStr
    __properties: ClassVar[List[str]] = ["cluster", "game_length_in_ms", "game_version", "is_completed", "map", "match_id", "party_rr_penaltys", "platform", "premier", "queue", "region", "season", "started_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV4DataMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of map
        if self.map:
            _dict['map'] = self.map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in party_rr_penaltys (list)
        _items = []
        if self.party_rr_penaltys:
            for _item_party_rr_penaltys in self.party_rr_penaltys:
                if _item_party_rr_penaltys:
                    _items.append(_item_party_rr_penaltys.to_dict())
            _dict['party_rr_penaltys'] = _items
        # override the default output from pydantic by calling `to_dict()` of queue
        if self.queue:
            _dict['queue'] = self.queue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict['season'] = self.season.to_dict()
        # set to None if cluster (nullable) is None
        # and model_fields_set contains the field
        if self.cluster is None and "cluster" in self.model_fields_set:
            _dict['cluster'] = None

        # set to None if premier (nullable) is None
        # and model_fields_set contains the field
        if self.premier is None and "premier" in self.model_fields_set:
            _dict['premier'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV4DataMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster": obj.get("cluster"),
            "game_length_in_ms": obj.get("game_length_in_ms"),
            "game_version": obj.get("game_version"),
            "is_completed": obj.get("is_completed"),
            "map": MapIdNameCombo.from_dict(obj["map"]) if obj.get("map") is not None else None,
            "match_id": obj.get("match_id"),
            "party_rr_penaltys": [MatchesV4DataMetadataPartyRRPenalty.from_dict(_item) for _item in obj["party_rr_penaltys"]] if obj.get("party_rr_penaltys") is not None else None,
            "platform": obj.get("platform"),
            "premier": obj.get("premier"),
            "queue": MatchesV4DataMetadataQueue.from_dict(obj["queue"]) if obj.get("queue") is not None else None,
            "region": obj.get("region"),
            "season": SeasonIdShortCombo.from_dict(obj["season"]) if obj.get("season") is not None else None,
            "started_at": obj.get("started_at")
        })
        return _obj


