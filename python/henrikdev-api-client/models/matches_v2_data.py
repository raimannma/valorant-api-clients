# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.matches_v2_data_coach import MatchesV2DataCoach
from henrikdev-api-client.models.matches_v2_data_kill import MatchesV2DataKill
from henrikdev-api-client.models.matches_v2_data_metadata import MatchesV2DataMetadata
from henrikdev-api-client.models.matches_v2_data_observer import MatchesV2DataObserver
from henrikdev-api-client.models.matches_v2_data_players import MatchesV2DataPlayers
from henrikdev-api-client.models.matches_v2_data_round import MatchesV2DataRound
from henrikdev-api-client.models.matches_v2_data_teams import MatchesV2DataTeams
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2Data(BaseModel):
    """
    MatchesV2Data
    """ # noqa: E501
    coaches: List[MatchesV2DataCoach]
    kills: List[MatchesV2DataKill]
    metadata: MatchesV2DataMetadata
    observers: List[MatchesV2DataObserver]
    players: MatchesV2DataPlayers
    rounds: List[MatchesV2DataRound]
    teams: MatchesV2DataTeams
    __properties: ClassVar[List[str]] = ["coaches", "kills", "metadata", "observers", "players", "rounds", "teams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in coaches (list)
        _items = []
        if self.coaches:
            for _item_coaches in self.coaches:
                if _item_coaches:
                    _items.append(_item_coaches.to_dict())
            _dict['coaches'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in kills (list)
        _items = []
        if self.kills:
            for _item_kills in self.kills:
                if _item_kills:
                    _items.append(_item_kills.to_dict())
            _dict['kills'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in observers (list)
        _items = []
        if self.observers:
            for _item_observers in self.observers:
                if _item_observers:
                    _items.append(_item_observers.to_dict())
            _dict['observers'] = _items
        # override the default output from pydantic by calling `to_dict()` of players
        if self.players:
            _dict['players'] = self.players.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rounds (list)
        _items = []
        if self.rounds:
            for _item_rounds in self.rounds:
                if _item_rounds:
                    _items.append(_item_rounds.to_dict())
            _dict['rounds'] = _items
        # override the default output from pydantic by calling `to_dict()` of teams
        if self.teams:
            _dict['teams'] = self.teams.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coaches": [MatchesV2DataCoach.from_dict(_item) for _item in obj["coaches"]] if obj.get("coaches") is not None else None,
            "kills": [MatchesV2DataKill.from_dict(_item) for _item in obj["kills"]] if obj.get("kills") is not None else None,
            "metadata": MatchesV2DataMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "observers": [MatchesV2DataObserver.from_dict(_item) for _item in obj["observers"]] if obj.get("observers") is not None else None,
            "players": MatchesV2DataPlayers.from_dict(obj["players"]) if obj.get("players") is not None else None,
            "rounds": [MatchesV2DataRound.from_dict(_item) for _item in obj["rounds"]] if obj.get("rounds") is not None else None,
            "teams": MatchesV2DataTeams.from_dict(obj["teams"]) if obj.get("teams") is not None else None
        })
        return _obj


