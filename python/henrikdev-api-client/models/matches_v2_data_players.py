# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.matches_v2_data_player import MatchesV2DataPlayer
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataPlayers(BaseModel):
    """
    MatchesV2DataPlayers
    """ # noqa: E501
    all_players: List[MatchesV2DataPlayer]
    blue: List[MatchesV2DataPlayer]
    red: List[MatchesV2DataPlayer]
    __properties: ClassVar[List[str]] = ["all_players", "blue", "red"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataPlayers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in all_players (list)
        _items = []
        if self.all_players:
            for _item_all_players in self.all_players:
                if _item_all_players:
                    _items.append(_item_all_players.to_dict())
            _dict['all_players'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in blue (list)
        _items = []
        if self.blue:
            for _item_blue in self.blue:
                if _item_blue:
                    _items.append(_item_blue.to_dict())
            _dict['blue'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in red (list)
        _items = []
        if self.red:
            for _item_red in self.red:
                if _item_red:
                    _items.append(_item_red.to_dict())
            _dict['red'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataPlayers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "all_players": [MatchesV2DataPlayer.from_dict(_item) for _item in obj["all_players"]] if obj.get("all_players") is not None else None,
            "blue": [MatchesV2DataPlayer.from_dict(_item) for _item in obj["blue"]] if obj.get("blue") is not None else None,
            "red": [MatchesV2DataPlayer.from_dict(_item) for _item in obj["red"]] if obj.get("red") is not None else None
        })
        return _obj


