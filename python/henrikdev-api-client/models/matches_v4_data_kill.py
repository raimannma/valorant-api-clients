# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v4_data_round_location import MatchesV4DataRoundLocation
from henrikdev-api-client.models.matches_v4_data_round_player import MatchesV4DataRoundPlayer
from henrikdev-api-client.models.matches_v4_data_round_player_locations import MatchesV4DataRoundPlayerLocations
from henrikdev-api-client.models.matches_v4_data_round_player_stats_economy_weapon import MatchesV4DataRoundPlayerStatsEconomyWeapon
from typing import Optional, Set
from typing_extensions import Self

class MatchesV4DataKill(BaseModel):
    """
    MatchesV4DataKill
    """ # noqa: E501
    assistants: List[MatchesV4DataRoundPlayer]
    killer: MatchesV4DataRoundPlayer
    location: MatchesV4DataRoundLocation
    player_locations: List[MatchesV4DataRoundPlayerLocations]
    round: Annotated[int, Field(strict=True, ge=0)]
    secondary_fire_mode: StrictBool
    time_in_match_in_ms: Annotated[int, Field(strict=True, ge=0)]
    time_in_round_in_ms: Annotated[int, Field(strict=True, ge=0)]
    victim: MatchesV4DataRoundPlayer
    weapon: MatchesV4DataRoundPlayerStatsEconomyWeapon
    __properties: ClassVar[List[str]] = ["assistants", "killer", "location", "player_locations", "round", "secondary_fire_mode", "time_in_match_in_ms", "time_in_round_in_ms", "victim", "weapon"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV4DataKill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assistants (list)
        _items = []
        if self.assistants:
            for _item_assistants in self.assistants:
                if _item_assistants:
                    _items.append(_item_assistants.to_dict())
            _dict['assistants'] = _items
        # override the default output from pydantic by calling `to_dict()` of killer
        if self.killer:
            _dict['killer'] = self.killer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in player_locations (list)
        _items = []
        if self.player_locations:
            for _item_player_locations in self.player_locations:
                if _item_player_locations:
                    _items.append(_item_player_locations.to_dict())
            _dict['player_locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of victim
        if self.victim:
            _dict['victim'] = self.victim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weapon
        if self.weapon:
            _dict['weapon'] = self.weapon.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV4DataKill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assistants": [MatchesV4DataRoundPlayer.from_dict(_item) for _item in obj["assistants"]] if obj.get("assistants") is not None else None,
            "killer": MatchesV4DataRoundPlayer.from_dict(obj["killer"]) if obj.get("killer") is not None else None,
            "location": MatchesV4DataRoundLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "player_locations": [MatchesV4DataRoundPlayerLocations.from_dict(_item) for _item in obj["player_locations"]] if obj.get("player_locations") is not None else None,
            "round": obj.get("round"),
            "secondary_fire_mode": obj.get("secondary_fire_mode"),
            "time_in_match_in_ms": obj.get("time_in_match_in_ms"),
            "time_in_round_in_ms": obj.get("time_in_round_in_ms"),
            "victim": MatchesV4DataRoundPlayer.from_dict(obj["victim"]) if obj.get("victim") is not None else None,
            "weapon": MatchesV4DataRoundPlayerStatsEconomyWeapon.from_dict(obj["weapon"]) if obj.get("weapon") is not None else None
        })
        return _obj


