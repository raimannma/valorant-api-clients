# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.matches_v4_data_round_player import MatchesV4DataRoundPlayer
from henrikdev-api-client.models.matches_v4_data_round_player_stats_ability_casts import MatchesV4DataRoundPlayerStatsAbilityCasts
from henrikdev-api-client.models.matches_v4_data_round_player_stats_damage_events import MatchesV4DataRoundPlayerStatsDamageEvents
from henrikdev-api-client.models.matches_v4_data_round_player_stats_economy import MatchesV4DataRoundPlayerStatsEconomy
from henrikdev-api-client.models.matches_v4_data_round_player_stats_stats import MatchesV4DataRoundPlayerStatsStats
from typing import Optional, Set
from typing_extensions import Self

class MatchesV4DataRoundPlayerStats(BaseModel):
    """
    MatchesV4DataRoundPlayerStats
    """ # noqa: E501
    ability_casts: MatchesV4DataRoundPlayerStatsAbilityCasts
    damage_events: List[MatchesV4DataRoundPlayerStatsDamageEvents]
    economy: MatchesV4DataRoundPlayerStatsEconomy
    player: MatchesV4DataRoundPlayer
    received_penalty: StrictBool
    stats: MatchesV4DataRoundPlayerStatsStats
    stayed_in_spawn: StrictBool
    was_afk: StrictBool
    __properties: ClassVar[List[str]] = ["ability_casts", "damage_events", "economy", "player", "received_penalty", "stats", "stayed_in_spawn", "was_afk"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV4DataRoundPlayerStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ability_casts
        if self.ability_casts:
            _dict['ability_casts'] = self.ability_casts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in damage_events (list)
        _items = []
        if self.damage_events:
            for _item_damage_events in self.damage_events:
                if _item_damage_events:
                    _items.append(_item_damage_events.to_dict())
            _dict['damage_events'] = _items
        # override the default output from pydantic by calling `to_dict()` of economy
        if self.economy:
            _dict['economy'] = self.economy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV4DataRoundPlayerStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ability_casts": MatchesV4DataRoundPlayerStatsAbilityCasts.from_dict(obj["ability_casts"]) if obj.get("ability_casts") is not None else None,
            "damage_events": [MatchesV4DataRoundPlayerStatsDamageEvents.from_dict(_item) for _item in obj["damage_events"]] if obj.get("damage_events") is not None else None,
            "economy": MatchesV4DataRoundPlayerStatsEconomy.from_dict(obj["economy"]) if obj.get("economy") is not None else None,
            "player": MatchesV4DataRoundPlayer.from_dict(obj["player"]) if obj.get("player") is not None else None,
            "received_penalty": obj.get("received_penalty"),
            "stats": MatchesV4DataRoundPlayerStatsStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "stayed_in_spawn": obj.get("stayed_in_spawn"),
            "was_afk": obj.get("was_afk")
        })
        return _obj


