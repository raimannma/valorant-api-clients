# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v2_data_team_roster import MatchesV2DataTeamRoster
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataTeam(BaseModel):
    """
    MatchesV2DataTeam
    """ # noqa: E501
    has_won: Optional[StrictBool] = None
    roster: Optional[MatchesV2DataTeamRoster] = None
    rounds_lost: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    rounds_won: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = ["has_won", "roster", "rounds_lost", "rounds_won"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataTeam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of roster
        if self.roster:
            _dict['roster'] = self.roster.to_dict()
        # set to None if has_won (nullable) is None
        # and model_fields_set contains the field
        if self.has_won is None and "has_won" in self.model_fields_set:
            _dict['has_won'] = None

        # set to None if roster (nullable) is None
        # and model_fields_set contains the field
        if self.roster is None and "roster" in self.model_fields_set:
            _dict['roster'] = None

        # set to None if rounds_lost (nullable) is None
        # and model_fields_set contains the field
        if self.rounds_lost is None and "rounds_lost" in self.model_fields_set:
            _dict['rounds_lost'] = None

        # set to None if rounds_won (nullable) is None
        # and model_fields_set contains the field
        if self.rounds_won is None and "rounds_won" in self.model_fields_set:
            _dict['rounds_won'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataTeam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "has_won": obj.get("has_won"),
            "roster": MatchesV2DataTeamRoster.from_dict(obj["roster"]) if obj.get("roster") is not None else None,
            "rounds_lost": obj.get("rounds_lost"),
            "rounds_won": obj.get("rounds_won")
        })
        return _obj


