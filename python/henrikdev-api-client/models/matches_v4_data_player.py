# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from henrikdev-api-client.models.agent_id_name_combo import AgentIdNameCombo
from henrikdev-api-client.models.matches_v4_data_player_ability_casts import MatchesV4DataPlayerAbilityCasts
from henrikdev-api-client.models.matches_v4_data_player_behavior import MatchesV4DataPlayerBehavior
from henrikdev-api-client.models.matches_v4_data_player_customization import MatchesV4DataPlayerCustomization
from henrikdev-api-client.models.matches_v4_data_player_economy import MatchesV4DataPlayerEconomy
from henrikdev-api-client.models.matches_v4_data_player_stats import MatchesV4DataPlayerStats
from henrikdev-api-client.models.tier_id_name_combo import TierIdNameCombo
from typing import Optional, Set
from typing_extensions import Self

class MatchesV4DataPlayer(BaseModel):
    """
    MatchesV4DataPlayer
    """ # noqa: E501
    ability_casts: MatchesV4DataPlayerAbilityCasts
    account_level: Annotated[int, Field(strict=True, ge=0)]
    agent: AgentIdNameCombo
    behavior: MatchesV4DataPlayerBehavior
    customization: MatchesV4DataPlayerCustomization
    economy: MatchesV4DataPlayerEconomy
    name: StrictStr
    party_id: StrictStr
    platform: StrictStr
    puuid: StrictStr
    session_playtime_in_ms: Annotated[int, Field(strict=True, ge=0)]
    stats: MatchesV4DataPlayerStats
    tag: StrictStr
    team_id: StrictStr
    tier: TierIdNameCombo
    __properties: ClassVar[List[str]] = ["ability_casts", "account_level", "agent", "behavior", "customization", "economy", "name", "party_id", "platform", "puuid", "session_playtime_in_ms", "stats", "tag", "team_id", "tier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV4DataPlayer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ability_casts
        if self.ability_casts:
            _dict['ability_casts'] = self.ability_casts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agent
        if self.agent:
            _dict['agent'] = self.agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of behavior
        if self.behavior:
            _dict['behavior'] = self.behavior.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customization
        if self.customization:
            _dict['customization'] = self.customization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of economy
        if self.economy:
            _dict['economy'] = self.economy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tier
        if self.tier:
            _dict['tier'] = self.tier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV4DataPlayer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ability_casts": MatchesV4DataPlayerAbilityCasts.from_dict(obj["ability_casts"]) if obj.get("ability_casts") is not None else None,
            "account_level": obj.get("account_level"),
            "agent": AgentIdNameCombo.from_dict(obj["agent"]) if obj.get("agent") is not None else None,
            "behavior": MatchesV4DataPlayerBehavior.from_dict(obj["behavior"]) if obj.get("behavior") is not None else None,
            "customization": MatchesV4DataPlayerCustomization.from_dict(obj["customization"]) if obj.get("customization") is not None else None,
            "economy": MatchesV4DataPlayerEconomy.from_dict(obj["economy"]) if obj.get("economy") is not None else None,
            "name": obj.get("name"),
            "party_id": obj.get("party_id"),
            "platform": obj.get("platform"),
            "puuid": obj.get("puuid"),
            "session_playtime_in_ms": obj.get("session_playtime_in_ms"),
            "stats": MatchesV4DataPlayerStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "tag": obj.get("tag"),
            "team_id": obj.get("team_id"),
            "tier": TierIdNameCombo.from_dict(obj["tier"]) if obj.get("tier") is not None else None
        })
        return _obj


