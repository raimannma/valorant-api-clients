# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.queue_status_v1_game_rules import QueueStatusV1GameRules
from henrikdev-api-client.models.queue_status_v1_high_skill import QueueStatusV1HighSkill
from henrikdev-api-client.models.queue_status_v1_maps import QueueStatusV1Maps
from henrikdev-api-client.models.queue_status_v1_party_size import QueueStatusV1PartySize
from henrikdev-api-client.models.queue_status_v1_skill_disparity import QueueStatusV1SkillDisparity
from typing import Optional, Set
from typing_extensions import Self

class QueueStatusV1Data(BaseModel):
    """
    QueueStatusV1Data
    """ # noqa: E501
    enabled: StrictBool
    game_rules: QueueStatusV1GameRules
    high_skill: QueueStatusV1HighSkill
    maps: List[QueueStatusV1Maps]
    mode: StrictStr
    mode_id: StrictStr
    number_of_teams: StrictInt
    party_size: QueueStatusV1PartySize
    platforms: List[StrictStr]
    ranked: StrictBool
    required_account_level: StrictInt
    skill_disparity: List[QueueStatusV1SkillDisparity]
    team_size: StrictInt
    tournament: StrictBool
    __properties: ClassVar[List[str]] = ["enabled", "game_rules", "high_skill", "maps", "mode", "mode_id", "number_of_teams", "party_size", "platforms", "ranked", "required_account_level", "skill_disparity", "team_size", "tournament"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueueStatusV1Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of game_rules
        if self.game_rules:
            _dict['game_rules'] = self.game_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of high_skill
        if self.high_skill:
            _dict['high_skill'] = self.high_skill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in maps (list)
        _items = []
        if self.maps:
            for _item_maps in self.maps:
                if _item_maps:
                    _items.append(_item_maps.to_dict())
            _dict['maps'] = _items
        # override the default output from pydantic by calling `to_dict()` of party_size
        if self.party_size:
            _dict['party_size'] = self.party_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in skill_disparity (list)
        _items = []
        if self.skill_disparity:
            for _item_skill_disparity in self.skill_disparity:
                if _item_skill_disparity:
                    _items.append(_item_skill_disparity.to_dict())
            _dict['skill_disparity'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueueStatusV1Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "game_rules": QueueStatusV1GameRules.from_dict(obj["game_rules"]) if obj.get("game_rules") is not None else None,
            "high_skill": QueueStatusV1HighSkill.from_dict(obj["high_skill"]) if obj.get("high_skill") is not None else None,
            "maps": [QueueStatusV1Maps.from_dict(_item) for _item in obj["maps"]] if obj.get("maps") is not None else None,
            "mode": obj.get("mode"),
            "mode_id": obj.get("mode_id"),
            "number_of_teams": obj.get("number_of_teams"),
            "party_size": QueueStatusV1PartySize.from_dict(obj["party_size"]) if obj.get("party_size") is not None else None,
            "platforms": obj.get("platforms"),
            "ranked": obj.get("ranked"),
            "required_account_level": obj.get("required_account_level"),
            "skill_disparity": [QueueStatusV1SkillDisparity.from_dict(_item) for _item in obj["skill_disparity"]] if obj.get("skill_disparity") is not None else None,
            "team_size": obj.get("team_size"),
            "tournament": obj.get("tournament")
        })
        return _obj


