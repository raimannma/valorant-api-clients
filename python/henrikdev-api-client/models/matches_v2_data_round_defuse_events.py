# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from henrikdev-api-client.models.matches_v2_data_round_event_location import MatchesV2DataRoundEventLocation
from henrikdev-api-client.models.matches_v2_data_round_player import MatchesV2DataRoundPlayer
from henrikdev-api-client.models.matches_v2_data_round_player_locations_on_event import MatchesV2DataRoundPlayerLocationsOnEvent
from typing import Optional, Set
from typing_extensions import Self

class MatchesV2DataRoundDefuseEvents(BaseModel):
    """
    MatchesV2DataRoundDefuseEvents
    """ # noqa: E501
    defuse_location: Optional[MatchesV2DataRoundEventLocation] = None
    defuse_time_in_round: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    defused_by: Optional[MatchesV2DataRoundPlayer] = None
    player_locations_on_defuse: Optional[List[MatchesV2DataRoundPlayerLocationsOnEvent]] = None
    __properties: ClassVar[List[str]] = ["defuse_location", "defuse_time_in_round", "defused_by", "player_locations_on_defuse"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchesV2DataRoundDefuseEvents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of defuse_location
        if self.defuse_location:
            _dict['defuse_location'] = self.defuse_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of defused_by
        if self.defused_by:
            _dict['defused_by'] = self.defused_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in player_locations_on_defuse (list)
        _items = []
        if self.player_locations_on_defuse:
            for _item_player_locations_on_defuse in self.player_locations_on_defuse:
                if _item_player_locations_on_defuse:
                    _items.append(_item_player_locations_on_defuse.to_dict())
            _dict['player_locations_on_defuse'] = _items
        # set to None if defuse_location (nullable) is None
        # and model_fields_set contains the field
        if self.defuse_location is None and "defuse_location" in self.model_fields_set:
            _dict['defuse_location'] = None

        # set to None if defuse_time_in_round (nullable) is None
        # and model_fields_set contains the field
        if self.defuse_time_in_round is None and "defuse_time_in_round" in self.model_fields_set:
            _dict['defuse_time_in_round'] = None

        # set to None if defused_by (nullable) is None
        # and model_fields_set contains the field
        if self.defused_by is None and "defused_by" in self.model_fields_set:
            _dict['defused_by'] = None

        # set to None if player_locations_on_defuse (nullable) is None
        # and model_fields_set contains the field
        if self.player_locations_on_defuse is None and "player_locations_on_defuse" in self.model_fields_set:
            _dict['player_locations_on_defuse'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchesV2DataRoundDefuseEvents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defuse_location": MatchesV2DataRoundEventLocation.from_dict(obj["defuse_location"]) if obj.get("defuse_location") is not None else None,
            "defuse_time_in_round": obj.get("defuse_time_in_round"),
            "defused_by": MatchesV2DataRoundPlayer.from_dict(obj["defused_by"]) if obj.get("defused_by") is not None else None,
            "player_locations_on_defuse": [MatchesV2DataRoundPlayerLocationsOnEvent.from_dict(_item) for _item in obj["player_locations_on_defuse"]] if obj.get("player_locations_on_defuse") is not None else None
        })
        return _obj


