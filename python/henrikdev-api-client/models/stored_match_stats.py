# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from henrikdev-api-client.models.stored_match_stats_character import StoredMatchStatsCharacter
from henrikdev-api-client.models.stored_match_stats_damage import StoredMatchStatsDamage
from henrikdev-api-client.models.stored_match_stats_shots import StoredMatchStatsShots
from typing import Optional, Set
from typing_extensions import Self

class StoredMatchStats(BaseModel):
    """
    StoredMatchStats
    """ # noqa: E501
    assists: Annotated[int, Field(strict=True, ge=0)]
    character: StoredMatchStatsCharacter
    damage: StoredMatchStatsDamage
    deaths: Annotated[int, Field(strict=True, ge=0)]
    kills: Annotated[int, Field(strict=True, ge=0)]
    level: Annotated[int, Field(strict=True, ge=0)]
    puuid: StrictStr
    score: StrictInt
    shots: StoredMatchStatsShots
    team: StrictStr
    tier: Annotated[int, Field(strict=True, ge=0)]
    __properties: ClassVar[List[str]] = ["assists", "character", "damage", "deaths", "kills", "level", "puuid", "score", "shots", "team", "tier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoredMatchStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of character
        if self.character:
            _dict['character'] = self.character.to_dict()
        # override the default output from pydantic by calling `to_dict()` of damage
        if self.damage:
            _dict['damage'] = self.damage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shots
        if self.shots:
            _dict['shots'] = self.shots.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoredMatchStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assists": obj.get("assists"),
            "character": StoredMatchStatsCharacter.from_dict(obj["character"]) if obj.get("character") is not None else None,
            "damage": StoredMatchStatsDamage.from_dict(obj["damage"]) if obj.get("damage") is not None else None,
            "deaths": obj.get("deaths"),
            "kills": obj.get("kills"),
            "level": obj.get("level"),
            "puuid": obj.get("puuid"),
            "score": obj.get("score"),
            "shots": StoredMatchStatsShots.from_dict(obj["shots"]) if obj.get("shots") is not None else None,
            "team": obj.get("team"),
            "tier": obj.get("tier")
        })
        return _obj


