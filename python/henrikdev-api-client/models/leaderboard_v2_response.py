# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.leaderboard_pvp_player import LeaderboardPVPPlayer
from typing import Optional, Set
from typing_extensions import Self

class LeaderboardV2Response(BaseModel):
    """
    LeaderboardV2Response
    """ # noqa: E501
    immortal_1_threshold: StrictInt
    immortal_2_threshold: StrictInt
    immortal_3_threshold: StrictInt
    last_update: StrictInt
    next_update: StrictInt
    players: List[LeaderboardPVPPlayer]
    radiant_threshold: StrictInt
    total_players: StrictInt
    __properties: ClassVar[List[str]] = ["immortal_1_threshold", "immortal_2_threshold", "immortal_3_threshold", "last_update", "next_update", "players", "radiant_threshold", "total_players"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderboardV2Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item_players in self.players:
                if _item_players:
                    _items.append(_item_players.to_dict())
            _dict['players'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderboardV2Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "immortal_1_threshold": obj.get("immortal_1_threshold"),
            "immortal_2_threshold": obj.get("immortal_2_threshold"),
            "immortal_3_threshold": obj.get("immortal_3_threshold"),
            "last_update": obj.get("last_update"),
            "next_update": obj.get("next_update"),
            "players": [LeaderboardPVPPlayer.from_dict(_item) for _item in obj["players"]] if obj.get("players") is not None else None,
            "radiant_threshold": obj.get("radiant_threshold"),
            "total_players": obj.get("total_players")
        })
        return _obj


