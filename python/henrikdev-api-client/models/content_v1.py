# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.content_item import ContentItem
from typing import Optional, Set
from typing_extensions import Self

class ContentV1(BaseModel):
    """
    ContentV1
    """ # noqa: E501
    acts: List[ContentItem]
    ceremonies: List[ContentItem]
    characters: List[ContentItem]
    charm_levels: List[ContentItem] = Field(alias="charmLevels")
    charms: List[ContentItem]
    chromas: List[ContentItem]
    equips: List[ContentItem]
    game_modes: List[ContentItem] = Field(alias="gameModes")
    maps: List[ContentItem]
    player_cards: List[ContentItem] = Field(alias="playerCards")
    player_titles: List[ContentItem] = Field(alias="playerTitles")
    skin_levels: List[ContentItem] = Field(alias="skinLevels")
    skins: List[ContentItem]
    spray_levels: List[ContentItem] = Field(alias="sprayLevels")
    sprays: List[ContentItem]
    version: StrictStr
    __properties: ClassVar[List[str]] = ["acts", "ceremonies", "characters", "charmLevels", "charms", "chromas", "equips", "gameModes", "maps", "playerCards", "playerTitles", "skinLevels", "skins", "sprayLevels", "sprays", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in acts (list)
        _items = []
        if self.acts:
            for _item_acts in self.acts:
                if _item_acts:
                    _items.append(_item_acts.to_dict())
            _dict['acts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ceremonies (list)
        _items = []
        if self.ceremonies:
            for _item_ceremonies in self.ceremonies:
                if _item_ceremonies:
                    _items.append(_item_ceremonies.to_dict())
            _dict['ceremonies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in characters (list)
        _items = []
        if self.characters:
            for _item_characters in self.characters:
                if _item_characters:
                    _items.append(_item_characters.to_dict())
            _dict['characters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charm_levels (list)
        _items = []
        if self.charm_levels:
            for _item_charm_levels in self.charm_levels:
                if _item_charm_levels:
                    _items.append(_item_charm_levels.to_dict())
            _dict['charmLevels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charms (list)
        _items = []
        if self.charms:
            for _item_charms in self.charms:
                if _item_charms:
                    _items.append(_item_charms.to_dict())
            _dict['charms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in chromas (list)
        _items = []
        if self.chromas:
            for _item_chromas in self.chromas:
                if _item_chromas:
                    _items.append(_item_chromas.to_dict())
            _dict['chromas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in equips (list)
        _items = []
        if self.equips:
            for _item_equips in self.equips:
                if _item_equips:
                    _items.append(_item_equips.to_dict())
            _dict['equips'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in game_modes (list)
        _items = []
        if self.game_modes:
            for _item_game_modes in self.game_modes:
                if _item_game_modes:
                    _items.append(_item_game_modes.to_dict())
            _dict['gameModes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maps (list)
        _items = []
        if self.maps:
            for _item_maps in self.maps:
                if _item_maps:
                    _items.append(_item_maps.to_dict())
            _dict['maps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in player_cards (list)
        _items = []
        if self.player_cards:
            for _item_player_cards in self.player_cards:
                if _item_player_cards:
                    _items.append(_item_player_cards.to_dict())
            _dict['playerCards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in player_titles (list)
        _items = []
        if self.player_titles:
            for _item_player_titles in self.player_titles:
                if _item_player_titles:
                    _items.append(_item_player_titles.to_dict())
            _dict['playerTitles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in skin_levels (list)
        _items = []
        if self.skin_levels:
            for _item_skin_levels in self.skin_levels:
                if _item_skin_levels:
                    _items.append(_item_skin_levels.to_dict())
            _dict['skinLevels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in skins (list)
        _items = []
        if self.skins:
            for _item_skins in self.skins:
                if _item_skins:
                    _items.append(_item_skins.to_dict())
            _dict['skins'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spray_levels (list)
        _items = []
        if self.spray_levels:
            for _item_spray_levels in self.spray_levels:
                if _item_spray_levels:
                    _items.append(_item_spray_levels.to_dict())
            _dict['sprayLevels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sprays (list)
        _items = []
        if self.sprays:
            for _item_sprays in self.sprays:
                if _item_sprays:
                    _items.append(_item_sprays.to_dict())
            _dict['sprays'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acts": [ContentItem.from_dict(_item) for _item in obj["acts"]] if obj.get("acts") is not None else None,
            "ceremonies": [ContentItem.from_dict(_item) for _item in obj["ceremonies"]] if obj.get("ceremonies") is not None else None,
            "characters": [ContentItem.from_dict(_item) for _item in obj["characters"]] if obj.get("characters") is not None else None,
            "charmLevels": [ContentItem.from_dict(_item) for _item in obj["charmLevels"]] if obj.get("charmLevels") is not None else None,
            "charms": [ContentItem.from_dict(_item) for _item in obj["charms"]] if obj.get("charms") is not None else None,
            "chromas": [ContentItem.from_dict(_item) for _item in obj["chromas"]] if obj.get("chromas") is not None else None,
            "equips": [ContentItem.from_dict(_item) for _item in obj["equips"]] if obj.get("equips") is not None else None,
            "gameModes": [ContentItem.from_dict(_item) for _item in obj["gameModes"]] if obj.get("gameModes") is not None else None,
            "maps": [ContentItem.from_dict(_item) for _item in obj["maps"]] if obj.get("maps") is not None else None,
            "playerCards": [ContentItem.from_dict(_item) for _item in obj["playerCards"]] if obj.get("playerCards") is not None else None,
            "playerTitles": [ContentItem.from_dict(_item) for _item in obj["playerTitles"]] if obj.get("playerTitles") is not None else None,
            "skinLevels": [ContentItem.from_dict(_item) for _item in obj["skinLevels"]] if obj.get("skinLevels") is not None else None,
            "skins": [ContentItem.from_dict(_item) for _item in obj["skins"]] if obj.get("skins") is not None else None,
            "sprayLevels": [ContentItem.from_dict(_item) for _item in obj["sprayLevels"]] if obj.get("sprayLevels") is not None else None,
            "sprays": [ContentItem.from_dict(_item) for _item in obj["sprays"]] if obj.get("sprays") is not None else None,
            "version": obj.get("version")
        })
        return _obj


