# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.map_id_name_combo import MapIdNameCombo
from henrikdev-api-client.models.season_id_short_combo import SeasonIdShortCombo
from henrikdev-api-client.models.tier_id_name_combo import TierIdNameCombo
from typing import Optional, Set
from typing_extensions import Self

class MMRHistoryV2History(BaseModel):
    """
    MMRHistoryV2History
    """ # noqa: E501
    var_date: StrictStr = Field(alias="date")
    elo: StrictInt
    last_change: StrictInt
    map: MapIdNameCombo
    match_id: StrictStr
    refunded_rr: StrictInt
    rr: StrictInt
    season: SeasonIdShortCombo
    tier: TierIdNameCombo
    was_derank_protected: StrictBool
    __properties: ClassVar[List[str]] = ["date", "elo", "last_change", "map", "match_id", "refunded_rr", "rr", "season", "tier", "was_derank_protected"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MMRHistoryV2History from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of map
        if self.map:
            _dict['map'] = self.map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict['season'] = self.season.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tier
        if self.tier:
            _dict['tier'] = self.tier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MMRHistoryV2History from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "elo": obj.get("elo"),
            "last_change": obj.get("last_change"),
            "map": MapIdNameCombo.from_dict(obj["map"]) if obj.get("map") is not None else None,
            "match_id": obj.get("match_id"),
            "refunded_rr": obj.get("refunded_rr"),
            "rr": obj.get("rr"),
            "season": SeasonIdShortCombo.from_dict(obj["season"]) if obj.get("season") is not None else None,
            "tier": TierIdNameCombo.from_dict(obj["tier"]) if obj.get("tier") is not None else None,
            "was_derank_protected": obj.get("was_derank_protected")
        })
        return _obj


