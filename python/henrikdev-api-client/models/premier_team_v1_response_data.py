# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from henrikdev-api-client.models.premier_team_member import PremierTeamMember
from henrikdev-api-client.models.premier_team_v1_response_data_customization import PremierTeamV1ResponseDataCustomization
from henrikdev-api-client.models.premier_team_v1_response_data_placement import PremierTeamV1ResponseDataPlacement
from henrikdev-api-client.models.premier_team_v1_response_data_stats import PremierTeamV1ResponseDataStats
from typing import Optional, Set
from typing_extensions import Self

class PremierTeamV1ResponseData(BaseModel):
    """
    PremierTeamV1ResponseData
    """ # noqa: E501
    customization: PremierTeamV1ResponseDataCustomization
    enrolled: StrictBool
    id: StrictStr
    member: List[PremierTeamMember]
    name: StrictStr
    placement: PremierTeamV1ResponseDataPlacement
    stats: PremierTeamV1ResponseDataStats
    tag: StrictStr
    __properties: ClassVar[List[str]] = ["customization", "enrolled", "id", "member", "name", "placement", "stats", "tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PremierTeamV1ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customization
        if self.customization:
            _dict['customization'] = self.customization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in member (list)
        _items = []
        if self.member:
            for _item_member in self.member:
                if _item_member:
                    _items.append(_item_member.to_dict())
            _dict['member'] = _items
        # override the default output from pydantic by calling `to_dict()` of placement
        if self.placement:
            _dict['placement'] = self.placement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PremierTeamV1ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customization": PremierTeamV1ResponseDataCustomization.from_dict(obj["customization"]) if obj.get("customization") is not None else None,
            "enrolled": obj.get("enrolled"),
            "id": obj.get("id"),
            "member": [PremierTeamMember.from_dict(_item) for _item in obj["member"]] if obj.get("member") is not None else None,
            "name": obj.get("name"),
            "placement": PremierTeamV1ResponseDataPlacement.from_dict(obj["placement"]) if obj.get("placement") is not None else None,
            "stats": PremierTeamV1ResponseDataStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "tag": obj.get("tag")
        })
        return _obj


