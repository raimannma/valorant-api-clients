# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from henrikdev-api-client.models.status_incident_content import StatusIncidentContent
from henrikdev-api-client.models.status_incident_update import StatusIncidentUpdate
from typing import Optional, Set
from typing_extensions import Self

class StatusIncident(BaseModel):
    """
    StatusIncident
    """ # noqa: E501
    archive_at: Optional[StrictStr] = None
    created_at: StrictStr
    id: Annotated[int, Field(strict=True, ge=0)]
    incident_severity: StrictStr
    maintenance_status: Optional[StrictStr] = None
    platforms: List[StrictStr]
    titles: List[StatusIncidentContent]
    updated_at: StrictStr
    updates: List[StatusIncidentUpdate]
    __properties: ClassVar[List[str]] = ["archive_at", "created_at", "id", "incident_severity", "maintenance_status", "platforms", "titles", "updated_at", "updates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusIncident from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in titles (list)
        _items = []
        if self.titles:
            for _item_titles in self.titles:
                if _item_titles:
                    _items.append(_item_titles.to_dict())
            _dict['titles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in updates (list)
        _items = []
        if self.updates:
            for _item_updates in self.updates:
                if _item_updates:
                    _items.append(_item_updates.to_dict())
            _dict['updates'] = _items
        # set to None if archive_at (nullable) is None
        # and model_fields_set contains the field
        if self.archive_at is None and "archive_at" in self.model_fields_set:
            _dict['archive_at'] = None

        # set to None if maintenance_status (nullable) is None
        # and model_fields_set contains the field
        if self.maintenance_status is None and "maintenance_status" in self.model_fields_set:
            _dict['maintenance_status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusIncident from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archive_at": obj.get("archive_at"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "incident_severity": obj.get("incident_severity"),
            "maintenance_status": obj.get("maintenance_status"),
            "platforms": obj.get("platforms"),
            "titles": [StatusIncidentContent.from_dict(_item) for _item in obj["titles"]] if obj.get("titles") is not None else None,
            "updated_at": obj.get("updated_at"),
            "updates": [StatusIncidentUpdate.from_dict(_item) for _item in obj["updates"]] if obj.get("updates") is not None else None
        })
        return _obj


