# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LeaderboardV3DataPlayer(BaseModel):
    """
    LeaderboardV3DataPlayer
    """ # noqa: E501
    card: StrictStr
    is_anonymized: StrictBool
    is_banned: StrictBool
    leaderboard_rank: StrictInt
    name: StrictStr
    puuid: Optional[StrictStr] = None
    rr: StrictInt
    tag: StrictStr
    tier: StrictInt
    title: StrictStr
    updated_at: StrictStr
    wins: StrictInt
    __properties: ClassVar[List[str]] = ["card", "is_anonymized", "is_banned", "leaderboard_rank", "name", "puuid", "rr", "tag", "tier", "title", "updated_at", "wins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderboardV3DataPlayer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if puuid (nullable) is None
        # and model_fields_set contains the field
        if self.puuid is None and "puuid" in self.model_fields_set:
            _dict['puuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderboardV3DataPlayer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "card": obj.get("card"),
            "is_anonymized": obj.get("is_anonymized"),
            "is_banned": obj.get("is_banned"),
            "leaderboard_rank": obj.get("leaderboard_rank"),
            "name": obj.get("name"),
            "puuid": obj.get("puuid"),
            "rr": obj.get("rr"),
            "tag": obj.get("tag"),
            "tier": obj.get("tier"),
            "title": obj.get("title"),
            "updated_at": obj.get("updated_at"),
            "wins": obj.get("wins")
        })
        return _obj


