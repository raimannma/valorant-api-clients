# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from henrikdev-api-client.models.esports_v1_data_league import EsportsV1DataLeague
from henrikdev-api-client.models.esports_v1_data_match import EsportsV1DataMatch
from henrikdev-api-client.models.esports_v1_data_tournament import EsportsV1DataTournament
from typing import Optional, Set
from typing_extensions import Self

class EsportsV1Data(BaseModel):
    """
    EsportsV1Data
    """ # noqa: E501
    var_date: StrictStr = Field(alias="date")
    league: EsportsV1DataLeague
    match: EsportsV1DataMatch
    state: StrictStr
    tournament: EsportsV1DataTournament
    type: StrictStr
    vod: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["date", "league", "match", "state", "tournament", "type", "vod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EsportsV1Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict['league'] = self.league.to_dict()
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tournament
        if self.tournament:
            _dict['tournament'] = self.tournament.to_dict()
        # set to None if vod (nullable) is None
        # and model_fields_set contains the field
        if self.vod is None and "vod" in self.model_fields_set:
            _dict['vod'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EsportsV1Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "league": EsportsV1DataLeague.from_dict(obj["league"]) if obj.get("league") is not None else None,
            "match": EsportsV1DataMatch.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "state": obj.get("state"),
            "tournament": EsportsV1DataTournament.from_dict(obj["tournament"]) if obj.get("tournament") is not None else None,
            "type": obj.get("type"),
            "vod": obj.get("vod")
        })
        return _obj


