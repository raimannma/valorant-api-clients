# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from henrikdev-api-client.models.mmrv3_response import MMRV3Response

class TestMMRV3Response(unittest.TestCase):
    """MMRV3Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MMRV3Response:
        """Test MMRV3Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MMRV3Response`
        """
        model = MMRV3Response()
        if include_optional:
            return MMRV3Response(
                data = henrikdev-api-client.models.mmrv3_data.MMRV3Data(
                    account = henrikdev-api-client.models.mmrv3_account.MMRV3Account(
                        name = '', 
                        puuid = '', 
                        tag = '', ), 
                    current = henrikdev-api-client.models.mmrv3_current.MMRV3Current(
                        elo = 56, 
                        games_needed_for_rating = 56, 
                        last_change = 56, 
                        leaderboard_placement = henrikdev-api-client.models.mmrv3_leaderboard_placement.MMRV3LeaderboardPlacement(
                            rank = 0, 
                            updated_at = '', ), 
                        rank_protection_shields = 56, 
                        rr = 56, 
                        tier = henrikdev-api-client.models.leaderboard_v3_data_threshold_tier.LeaderboardV3DataThresholdTier(
                            id = 56, 
                            name = '', ), ), 
                    peak = henrikdev-api-client.models.mmrv3_peak.MMRV3Peak(
                        ranking_schema = '', 
                        rr = 56, 
                        season = henrikdev-api-client.models.season_id_short_combo.SeasonIdShortCombo(
                            id = '', 
                            short = '', ), 
                        tier = henrikdev-api-client.models.leaderboard_v3_data_threshold_tier.LeaderboardV3DataThresholdTier(
                            id = 56, 
                            name = '', ), ), 
                    seasonal = [
                        henrikdev-api-client.models.mmrv3_seasonal.MMRV3Seasonal(
                            act_wins = [
                                
                                ], 
                            end_rr = 56, 
                            end_tier = , 
                            games = 56, 
                            ranking_schema = '', 
                            season = henrikdev-api-client.models.season_id_short_combo.SeasonIdShortCombo(
                                id = '', 
                                short = '', ), 
                            wins = 56, )
                        ], ),
                status = 0
            )
        else:
            return MMRV3Response(
                data = henrikdev-api-client.models.mmrv3_data.MMRV3Data(
                    account = henrikdev-api-client.models.mmrv3_account.MMRV3Account(
                        name = '', 
                        puuid = '', 
                        tag = '', ), 
                    current = henrikdev-api-client.models.mmrv3_current.MMRV3Current(
                        elo = 56, 
                        games_needed_for_rating = 56, 
                        last_change = 56, 
                        leaderboard_placement = henrikdev-api-client.models.mmrv3_leaderboard_placement.MMRV3LeaderboardPlacement(
                            rank = 0, 
                            updated_at = '', ), 
                        rank_protection_shields = 56, 
                        rr = 56, 
                        tier = henrikdev-api-client.models.leaderboard_v3_data_threshold_tier.LeaderboardV3DataThresholdTier(
                            id = 56, 
                            name = '', ), ), 
                    peak = henrikdev-api-client.models.mmrv3_peak.MMRV3Peak(
                        ranking_schema = '', 
                        rr = 56, 
                        season = henrikdev-api-client.models.season_id_short_combo.SeasonIdShortCombo(
                            id = '', 
                            short = '', ), 
                        tier = henrikdev-api-client.models.leaderboard_v3_data_threshold_tier.LeaderboardV3DataThresholdTier(
                            id = 56, 
                            name = '', ), ), 
                    seasonal = [
                        henrikdev-api-client.models.mmrv3_seasonal.MMRV3Seasonal(
                            act_wins = [
                                
                                ], 
                            end_rr = 56, 
                            end_tier = , 
                            games = 56, 
                            ranking_schema = '', 
                            season = henrikdev-api-client.models.season_id_short_combo.SeasonIdShortCombo(
                                id = '', 
                                short = '', ), 
                            wins = 56, )
                        ], ),
                status = 0,
        )
        """

    def testMMRV3Response(self):
        """Test MMRV3Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
