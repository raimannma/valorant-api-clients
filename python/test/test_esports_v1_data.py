# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from henrikdev-api-client.models.esports_v1_data import EsportsV1Data

class TestEsportsV1Data(unittest.TestCase):
    """EsportsV1Data unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EsportsV1Data:
        """Test EsportsV1Data
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EsportsV1Data`
        """
        model = EsportsV1Data()
        if include_optional:
            return EsportsV1Data(
                var_date = '',
                league = henrikdev-api-client.models.esports_v1_data_league.EsportsV1DataLeague(
                    icon = '', 
                    identifier = '', 
                    name = '', 
                    region = '', ),
                match = henrikdev-api-client.models.esports_v1_data_match.EsportsV1DataMatch(
                    game_type = henrikdev-api-client.models.esports_v1_data_match_game_type.EsportsV1DataMatchGameType(
                        count = 56, 
                        type = '', ), 
                    id = '', 
                    teams = [
                        henrikdev-api-client.models.esports_v1_data_match_teams.EsportsV1DataMatchTeams(
                            code = '', 
                            game_wins = 56, 
                            has_won = True, 
                            icon = '', 
                            name = '', 
                            record = henrikdev-api-client.models.esports_v1_data_match_teams_record.EsportsV1DataMatchTeamsRecord(
                                losses = 56, 
                                wins = 56, ), )
                        ], ),
                state = '',
                tournament = henrikdev-api-client.models.esports_v1_data_tournament.EsportsV1DataTournament(
                    name = '', 
                    season = '', ),
                type = '',
                vod = ''
            )
        else:
            return EsportsV1Data(
                var_date = '',
                league = henrikdev-api-client.models.esports_v1_data_league.EsportsV1DataLeague(
                    icon = '', 
                    identifier = '', 
                    name = '', 
                    region = '', ),
                match = henrikdev-api-client.models.esports_v1_data_match.EsportsV1DataMatch(
                    game_type = henrikdev-api-client.models.esports_v1_data_match_game_type.EsportsV1DataMatchGameType(
                        count = 56, 
                        type = '', ), 
                    id = '', 
                    teams = [
                        henrikdev-api-client.models.esports_v1_data_match_teams.EsportsV1DataMatchTeams(
                            code = '', 
                            game_wins = 56, 
                            has_won = True, 
                            icon = '', 
                            name = '', 
                            record = henrikdev-api-client.models.esports_v1_data_match_teams_record.EsportsV1DataMatchTeamsRecord(
                                losses = 56, 
                                wins = 56, ), )
                        ], ),
                state = '',
                tournament = henrikdev-api-client.models.esports_v1_data_tournament.EsportsV1DataTournament(
                    name = '', 
                    season = '', ),
                type = '',
        )
        """

    def testEsportsV1Data(self):
        """Test EsportsV1Data"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
