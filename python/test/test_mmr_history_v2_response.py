# coding: utf-8

"""
    HenrikDev API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from henrikdev-api-client.models.mmr_history_v2_response import MMRHistoryV2Response

class TestMMRHistoryV2Response(unittest.TestCase):
    """MMRHistoryV2Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MMRHistoryV2Response:
        """Test MMRHistoryV2Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MMRHistoryV2Response`
        """
        model = MMRHistoryV2Response()
        if include_optional:
            return MMRHistoryV2Response(
                data = henrikdev-api-client.models.mmr_history_v2_data.MMRHistoryV2Data(
                    account = henrikdev-api-client.models.mmrv3_account.MMRV3Account(
                        name = '', 
                        puuid = '', 
                        tag = '', ), 
                    history = [
                        henrikdev-api-client.models.mmr_history_v2_history.MMRHistoryV2History(
                            date = '', 
                            elo = 56, 
                            last_change = 56, 
                            map = henrikdev-api-client.models.mmr_history_v1_data_map.MMRHistoryV1DataMap(
                                id = '', 
                                name = '', ), 
                            match_id = '', 
                            refunded_rr = 56, 
                            rr = 56, 
                            season = henrikdev-api-client.models.season_id_short_combo.SeasonIdShortCombo(
                                id = '', 
                                short = '', ), 
                            tier = henrikdev-api-client.models.leaderboard_v3_data_threshold_tier.LeaderboardV3DataThresholdTier(
                                id = 56, 
                                name = '', ), 
                            was_derank_protected = True, )
                        ], ),
                status = 0
            )
        else:
            return MMRHistoryV2Response(
                data = henrikdev-api-client.models.mmr_history_v2_data.MMRHistoryV2Data(
                    account = henrikdev-api-client.models.mmrv3_account.MMRV3Account(
                        name = '', 
                        puuid = '', 
                        tag = '', ), 
                    history = [
                        henrikdev-api-client.models.mmr_history_v2_history.MMRHistoryV2History(
                            date = '', 
                            elo = 56, 
                            last_change = 56, 
                            map = henrikdev-api-client.models.mmr_history_v1_data_map.MMRHistoryV1DataMap(
                                id = '', 
                                name = '', ), 
                            match_id = '', 
                            refunded_rr = 56, 
                            rr = 56, 
                            season = henrikdev-api-client.models.season_id_short_combo.SeasonIdShortCombo(
                                id = '', 
                                short = '', ), 
                            tier = henrikdev-api-client.models.leaderboard_v3_data_threshold_tier.LeaderboardV3DataThresholdTier(
                                id = 56, 
                                name = '', ), 
                            was_derank_protected = True, )
                        ], ),
                status = 0,
        )
        """

    def testMMRHistoryV2Response(self):
        """Test MMRHistoryV2Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
