/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StoredMatchStats {
    #[serde(rename = "assists")]
    pub assists: u32,
    #[serde(rename = "character")]
    pub character: Box<models::StoredMatchStatsCharacter>,
    #[serde(rename = "damage")]
    pub damage: Box<models::StoredMatchStatsDamage>,
    #[serde(rename = "deaths")]
    pub deaths: u32,
    #[serde(rename = "kills")]
    pub kills: u32,
    #[serde(rename = "level")]
    pub level: u32,
    #[serde(rename = "puuid")]
    pub puuid: String,
    #[serde(rename = "score")]
    pub score: i32,
    #[serde(rename = "shots")]
    pub shots: Box<models::StoredMatchStatsShots>,
    #[serde(rename = "team")]
    pub team: String,
    #[serde(rename = "tier")]
    pub tier: u32,
}

impl StoredMatchStats {
    pub fn new(assists: u32, character: models::StoredMatchStatsCharacter, damage: models::StoredMatchStatsDamage, deaths: u32, kills: u32, level: u32, puuid: String, score: i32, shots: models::StoredMatchStatsShots, team: String, tier: u32) -> StoredMatchStats {
        StoredMatchStats {
            assists,
            character: Box::new(character),
            damage: Box::new(damage),
            deaths,
            kills,
            level,
            puuid,
            score,
            shots: Box::new(shots),
            team,
            tier,
        }
    }
}

