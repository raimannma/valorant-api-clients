/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchesV4DataMetadata {
    #[serde(rename = "cluster", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<Option<String>>,
    #[serde(rename = "game_length_in_ms")]
    pub game_length_in_ms: u64,
    #[serde(rename = "game_version")]
    pub game_version: String,
    #[serde(rename = "is_completed")]
    pub is_completed: bool,
    #[serde(rename = "map")]
    pub map: Box<models::MapIdNameCombo>,
    #[serde(rename = "match_id")]
    pub match_id: String,
    #[serde(rename = "party_rr_penaltys")]
    pub party_rr_penaltys: Vec<models::MatchesV4DataMetadataPartyRrPenalty>,
    #[serde(rename = "platform")]
    pub platform: String,
    #[serde(rename = "premier", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub premier: Option<Option<serde_json::Value>>,
    #[serde(rename = "queue")]
    pub queue: Box<models::MatchesV4DataMetadataQueue>,
    #[serde(rename = "region", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub region: Option<Option<String>>,
    #[serde(rename = "season")]
    pub season: Box<models::SeasonIdShortCombo>,
    #[serde(rename = "started_at")]
    pub started_at: String,
}

impl MatchesV4DataMetadata {
    pub fn new(game_length_in_ms: u64, game_version: String, is_completed: bool, map: models::MapIdNameCombo, match_id: String, party_rr_penaltys: Vec<models::MatchesV4DataMetadataPartyRrPenalty>, platform: String, queue: models::MatchesV4DataMetadataQueue, season: models::SeasonIdShortCombo, started_at: String) -> MatchesV4DataMetadata {
        MatchesV4DataMetadata {
            cluster: None,
            game_length_in_ms,
            game_version,
            is_completed,
            map: Box::new(map),
            match_id,
            party_rr_penaltys,
            platform,
            premier: None,
            queue: Box::new(queue),
            region: None,
            season: Box::new(season),
            started_at,
        }
    }
}

