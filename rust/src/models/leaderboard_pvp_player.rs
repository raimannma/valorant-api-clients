/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeaderboardPvpPlayer {
    #[serde(rename = "IsAnonymized")]
    pub is_anonymized: bool,
    #[serde(rename = "IsBanned")]
    pub is_banned: bool,
    #[serde(rename = "PlayerCardID")]
    pub player_card_id: String,
    #[serde(rename = "TitleID")]
    pub title_id: String,
    #[serde(rename = "competitiveTier")]
    pub competitive_tier: u32,
    #[serde(rename = "gameName")]
    pub game_name: String,
    #[serde(rename = "leaderboardRank")]
    pub leaderboard_rank: u32,
    #[serde(rename = "numberOfWins")]
    pub number_of_wins: u32,
    #[serde(rename = "puuid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub puuid: Option<Option<String>>,
    #[serde(rename = "rankedRating")]
    pub ranked_rating: u32,
    #[serde(rename = "tagLine")]
    pub tag_line: String,
}

impl LeaderboardPvpPlayer {
    pub fn new(is_anonymized: bool, is_banned: bool, player_card_id: String, title_id: String, competitive_tier: u32, game_name: String, leaderboard_rank: u32, number_of_wins: u32, ranked_rating: u32, tag_line: String) -> LeaderboardPvpPlayer {
        LeaderboardPvpPlayer {
            is_anonymized,
            is_banned,
            player_card_id,
            title_id,
            competitive_tier,
            game_name,
            leaderboard_rank,
            number_of_wins,
            puuid: None,
            ranked_rating,
            tag_line,
        }
    }
}

