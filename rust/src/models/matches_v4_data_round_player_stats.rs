/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchesV4DataRoundPlayerStats {
    #[serde(rename = "ability_casts")]
    pub ability_casts: Box<models::MatchesV4DataRoundPlayerStatsAbilityCasts>,
    #[serde(rename = "damage_events")]
    pub damage_events: Vec<models::MatchesV4DataRoundPlayerStatsDamageEvents>,
    #[serde(rename = "economy")]
    pub economy: Box<models::MatchesV4DataRoundPlayerStatsEconomy>,
    #[serde(rename = "player")]
    pub player: Box<models::MatchesV4DataRoundPlayer>,
    #[serde(rename = "received_penalty")]
    pub received_penalty: bool,
    #[serde(rename = "stats")]
    pub stats: Box<models::MatchesV4DataRoundPlayerStatsStats>,
    #[serde(rename = "stayed_in_spawn")]
    pub stayed_in_spawn: bool,
    #[serde(rename = "was_afk")]
    pub was_afk: bool,
}

impl MatchesV4DataRoundPlayerStats {
    pub fn new(ability_casts: models::MatchesV4DataRoundPlayerStatsAbilityCasts, damage_events: Vec<models::MatchesV4DataRoundPlayerStatsDamageEvents>, economy: models::MatchesV4DataRoundPlayerStatsEconomy, player: models::MatchesV4DataRoundPlayer, received_penalty: bool, stats: models::MatchesV4DataRoundPlayerStatsStats, stayed_in_spawn: bool, was_afk: bool) -> MatchesV4DataRoundPlayerStats {
        MatchesV4DataRoundPlayerStats {
            ability_casts: Box::new(ability_casts),
            damage_events,
            economy: Box::new(economy),
            player: Box::new(player),
            received_penalty,
            stats: Box::new(stats),
            stayed_in_spawn,
            was_afk,
        }
    }
}

