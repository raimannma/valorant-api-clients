/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueueStatusV1Data {
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "game_rules")]
    pub game_rules: Box<models::QueueStatusV1GameRules>,
    #[serde(rename = "high_skill")]
    pub high_skill: Box<models::QueueStatusV1HighSkill>,
    #[serde(rename = "maps")]
    pub maps: Vec<models::QueueStatusV1Maps>,
    #[serde(rename = "mode")]
    pub mode: String,
    #[serde(rename = "mode_id")]
    pub mode_id: String,
    #[serde(rename = "number_of_teams")]
    pub number_of_teams: i32,
    #[serde(rename = "party_size")]
    pub party_size: Box<models::QueueStatusV1PartySize>,
    #[serde(rename = "platforms")]
    pub platforms: Vec<String>,
    #[serde(rename = "ranked")]
    pub ranked: bool,
    #[serde(rename = "required_account_level")]
    pub required_account_level: i32,
    #[serde(rename = "skill_disparity")]
    pub skill_disparity: Vec<models::QueueStatusV1SkillDisparity>,
    #[serde(rename = "team_size")]
    pub team_size: i32,
    #[serde(rename = "tournament")]
    pub tournament: bool,
}

impl QueueStatusV1Data {
    pub fn new(enabled: bool, game_rules: models::QueueStatusV1GameRules, high_skill: models::QueueStatusV1HighSkill, maps: Vec<models::QueueStatusV1Maps>, mode: String, mode_id: String, number_of_teams: i32, party_size: models::QueueStatusV1PartySize, platforms: Vec<String>, ranked: bool, required_account_level: i32, skill_disparity: Vec<models::QueueStatusV1SkillDisparity>, team_size: i32, tournament: bool) -> QueueStatusV1Data {
        QueueStatusV1Data {
            enabled,
            game_rules: Box::new(game_rules),
            high_skill: Box::new(high_skill),
            maps,
            mode,
            mode_id,
            number_of_teams,
            party_size: Box::new(party_size),
            platforms,
            ranked,
            required_account_level,
            skill_disparity,
            team_size,
            tournament,
        }
    }
}

