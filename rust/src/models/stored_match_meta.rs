/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StoredMatchMeta {
    #[serde(rename = "cluster", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<Option<String>>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "map")]
    pub map: Box<models::StoredMatchMetaMap>,
    #[serde(rename = "mode")]
    pub mode: String,
    #[serde(rename = "region")]
    pub region: String,
    #[serde(rename = "season")]
    pub season: Box<models::StoredMatchMetaSeason>,
    #[serde(rename = "started_at")]
    pub started_at: String,
    #[serde(rename = "version")]
    pub version: String,
}

impl StoredMatchMeta {
    pub fn new(id: String, map: models::StoredMatchMetaMap, mode: String, region: String, season: models::StoredMatchMetaSeason, started_at: String, version: String) -> StoredMatchMeta {
        StoredMatchMeta {
            cluster: None,
            id,
            map: Box::new(map),
            mode,
            region,
            season: Box::new(season),
            started_at,
            version,
        }
    }
}

