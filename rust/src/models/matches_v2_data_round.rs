/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchesV2DataRound {
    #[serde(rename = "bomb_defused")]
    pub bomb_defused: bool,
    #[serde(rename = "bomb_planted")]
    pub bomb_planted: bool,
    #[serde(rename = "defuse_events")]
    pub defuse_events: Box<models::MatchesV2DataRoundDefuseEvents>,
    #[serde(rename = "end_type")]
    pub end_type: String,
    #[serde(rename = "plant_events")]
    pub plant_events: Box<models::MatchesV2DataRoundPlantEvents>,
    #[serde(rename = "player_stats")]
    pub player_stats: Vec<models::MatchesV2DataRoundPlayerStats>,
    #[serde(rename = "winning_team")]
    pub winning_team: String,
}

impl MatchesV2DataRound {
    pub fn new(bomb_defused: bool, bomb_planted: bool, defuse_events: models::MatchesV2DataRoundDefuseEvents, end_type: String, plant_events: models::MatchesV2DataRoundPlantEvents, player_stats: Vec<models::MatchesV2DataRoundPlayerStats>, winning_team: String) -> MatchesV2DataRound {
        MatchesV2DataRound {
            bomb_defused,
            bomb_planted,
            defuse_events: Box::new(defuse_events),
            end_type,
            plant_events: Box::new(plant_events),
            player_stats,
            winning_team,
        }
    }
}

