/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchesV2DataObserver {
    #[serde(rename = "level")]
    pub level: u32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "party_id")]
    pub party_id: String,
    #[serde(rename = "platform")]
    pub platform: Box<models::MatchesV2DataPlatform>,
    #[serde(rename = "player_card")]
    pub player_card: String,
    #[serde(rename = "player_title")]
    pub player_title: String,
    #[serde(rename = "puuid")]
    pub puuid: String,
    #[serde(rename = "session_playtime")]
    pub session_playtime: Box<models::MatchesV2DataPlayerSessionPlaytime>,
    #[serde(rename = "tag")]
    pub tag: String,
    #[serde(rename = "team")]
    pub team: String,
}

impl MatchesV2DataObserver {
    pub fn new(level: u32, name: String, party_id: String, platform: models::MatchesV2DataPlatform, player_card: String, player_title: String, puuid: String, session_playtime: models::MatchesV2DataPlayerSessionPlaytime, tag: String, team: String) -> MatchesV2DataObserver {
        MatchesV2DataObserver {
            level,
            name,
            party_id,
            platform: Box::new(platform),
            player_card,
            player_title,
            puuid,
            session_playtime: Box::new(session_playtime),
            tag,
            team,
        }
    }
}

