/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchesV4DataRound {
    #[serde(rename = "ceremony")]
    pub ceremony: String,
    #[serde(rename = "defuse", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub defuse: Option<Option<Box<models::MatchesV4DataRoundDefuse>>>,
    #[serde(rename = "id")]
    pub id: u32,
    #[serde(rename = "plant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plant: Option<Option<Box<models::MatchesV4DataRoundPlant>>>,
    #[serde(rename = "result")]
    pub result: String,
    #[serde(rename = "stats")]
    pub stats: Vec<models::MatchesV4DataRoundPlayerStats>,
    #[serde(rename = "winning_team")]
    pub winning_team: String,
}

impl MatchesV4DataRound {
    pub fn new(ceremony: String, id: u32, result: String, stats: Vec<models::MatchesV4DataRoundPlayerStats>, winning_team: String) -> MatchesV4DataRound {
        MatchesV4DataRound {
            ceremony,
            defuse: None,
            id,
            plant: None,
            result,
            stats,
            winning_team,
        }
    }
}

