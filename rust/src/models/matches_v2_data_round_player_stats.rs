/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchesV2DataRoundPlayerStats {
    #[serde(rename = "ability_casts")]
    pub ability_casts: Box<models::MatchesV2DataRoundPlayerStatsAbilityCasts>,
    #[serde(rename = "bodyshots")]
    pub bodyshots: u32,
    #[serde(rename = "damage")]
    pub damage: u32,
    #[serde(rename = "damage_events")]
    pub damage_events: Vec<models::MatchesV2DataRoundPlayerStatsDamageEvents>,
    #[serde(rename = "economy")]
    pub economy: Box<models::MatchesV2DataRoundPlayerStatsEconomy>,
    #[serde(rename = "headshots")]
    pub headshots: u32,
    #[serde(rename = "kill_events")]
    pub kill_events: Vec<models::MatchesV2DataRoundPlayerStatsKillEvents>,
    #[serde(rename = "kills")]
    pub kills: u32,
    #[serde(rename = "legshots")]
    pub legshots: u32,
    #[serde(rename = "player_display_name")]
    pub player_display_name: String,
    #[serde(rename = "player_puuid")]
    pub player_puuid: String,
    #[serde(rename = "player_team")]
    pub player_team: String,
    #[serde(rename = "score")]
    pub score: i32,
    #[serde(rename = "stayed_in_spawn")]
    pub stayed_in_spawn: bool,
    #[serde(rename = "was_afk")]
    pub was_afk: bool,
    #[serde(rename = "was_penalized")]
    pub was_penalized: bool,
}

impl MatchesV2DataRoundPlayerStats {
    pub fn new(ability_casts: models::MatchesV2DataRoundPlayerStatsAbilityCasts, bodyshots: u32, damage: u32, damage_events: Vec<models::MatchesV2DataRoundPlayerStatsDamageEvents>, economy: models::MatchesV2DataRoundPlayerStatsEconomy, headshots: u32, kill_events: Vec<models::MatchesV2DataRoundPlayerStatsKillEvents>, kills: u32, legshots: u32, player_display_name: String, player_puuid: String, player_team: String, score: i32, stayed_in_spawn: bool, was_afk: bool, was_penalized: bool) -> MatchesV2DataRoundPlayerStats {
        MatchesV2DataRoundPlayerStats {
            ability_casts: Box::new(ability_casts),
            bodyshots,
            damage,
            damage_events,
            economy: Box::new(economy),
            headshots,
            kill_events,
            kills,
            legshots,
            player_display_name,
            player_puuid,
            player_team,
            score,
            stayed_in_spawn,
            was_afk,
            was_penalized,
        }
    }
}

