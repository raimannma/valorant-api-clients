/*
 * HenrikDev API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EsportsV1Data {
    #[serde(rename = "date")]
    pub date: String,
    #[serde(rename = "league")]
    pub league: Box<models::EsportsV1DataLeague>,
    #[serde(rename = "match")]
    pub r#match: Box<models::EsportsV1DataMatch>,
    #[serde(rename = "state")]
    pub state: String,
    #[serde(rename = "tournament")]
    pub tournament: Box<models::EsportsV1DataTournament>,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "vod", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vod: Option<Option<String>>,
}

impl EsportsV1Data {
    pub fn new(date: String, league: models::EsportsV1DataLeague, r#match: models::EsportsV1DataMatch, state: String, tournament: models::EsportsV1DataTournament, r#type: String) -> EsportsV1Data {
        EsportsV1Data {
            date,
            league: Box::new(league),
            r#match: Box::new(r#match),
            state,
            tournament: Box::new(tournament),
            r#type,
            vod: None,
        }
    }
}

