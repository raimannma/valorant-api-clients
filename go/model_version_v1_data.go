/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VersionV1Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionV1Data{}

// VersionV1Data struct for VersionV1Data
type VersionV1Data struct {
	Branch string `json:"branch"`
	BuildDate string `json:"build_date"`
	BuildVer string `json:"build_ver"`
	LastChecked string `json:"last_checked"`
	Region string `json:"region"`
	Version int32 `json:"version"`
	VersionForApi string `json:"version_for_api"`
}

type _VersionV1Data VersionV1Data

// NewVersionV1Data instantiates a new VersionV1Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionV1Data(branch string, buildDate string, buildVer string, lastChecked string, region string, version int32, versionForApi string) *VersionV1Data {
	this := VersionV1Data{}
	this.Branch = branch
	this.BuildDate = buildDate
	this.BuildVer = buildVer
	this.LastChecked = lastChecked
	this.Region = region
	this.Version = version
	this.VersionForApi = versionForApi
	return &this
}

// NewVersionV1DataWithDefaults instantiates a new VersionV1Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionV1DataWithDefaults() *VersionV1Data {
	this := VersionV1Data{}
	return &this
}

// GetBranch returns the Branch field value
func (o *VersionV1Data) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *VersionV1Data) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *VersionV1Data) SetBranch(v string) {
	o.Branch = v
}

// GetBuildDate returns the BuildDate field value
func (o *VersionV1Data) GetBuildDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value
// and a boolean to check if the value has been set.
func (o *VersionV1Data) GetBuildDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildDate, true
}

// SetBuildDate sets field value
func (o *VersionV1Data) SetBuildDate(v string) {
	o.BuildDate = v
}

// GetBuildVer returns the BuildVer field value
func (o *VersionV1Data) GetBuildVer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildVer
}

// GetBuildVerOk returns a tuple with the BuildVer field value
// and a boolean to check if the value has been set.
func (o *VersionV1Data) GetBuildVerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildVer, true
}

// SetBuildVer sets field value
func (o *VersionV1Data) SetBuildVer(v string) {
	o.BuildVer = v
}

// GetLastChecked returns the LastChecked field value
func (o *VersionV1Data) GetLastChecked() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastChecked
}

// GetLastCheckedOk returns a tuple with the LastChecked field value
// and a boolean to check if the value has been set.
func (o *VersionV1Data) GetLastCheckedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastChecked, true
}

// SetLastChecked sets field value
func (o *VersionV1Data) SetLastChecked(v string) {
	o.LastChecked = v
}

// GetRegion returns the Region field value
func (o *VersionV1Data) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *VersionV1Data) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *VersionV1Data) SetRegion(v string) {
	o.Region = v
}

// GetVersion returns the Version field value
func (o *VersionV1Data) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VersionV1Data) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VersionV1Data) SetVersion(v int32) {
	o.Version = v
}

// GetVersionForApi returns the VersionForApi field value
func (o *VersionV1Data) GetVersionForApi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionForApi
}

// GetVersionForApiOk returns a tuple with the VersionForApi field value
// and a boolean to check if the value has been set.
func (o *VersionV1Data) GetVersionForApiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionForApi, true
}

// SetVersionForApi sets field value
func (o *VersionV1Data) SetVersionForApi(v string) {
	o.VersionForApi = v
}

func (o VersionV1Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionV1Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["branch"] = o.Branch
	toSerialize["build_date"] = o.BuildDate
	toSerialize["build_ver"] = o.BuildVer
	toSerialize["last_checked"] = o.LastChecked
	toSerialize["region"] = o.Region
	toSerialize["version"] = o.Version
	toSerialize["version_for_api"] = o.VersionForApi
	return toSerialize, nil
}

func (o *VersionV1Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"branch",
		"build_date",
		"build_ver",
		"last_checked",
		"region",
		"version",
		"version_for_api",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionV1Data := _VersionV1Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersionV1Data)

	if err != nil {
		return err
	}

	*o = VersionV1Data(varVersionV1Data)

	return err
}

type NullableVersionV1Data struct {
	value *VersionV1Data
	isSet bool
}

func (v NullableVersionV1Data) Get() *VersionV1Data {
	return v.value
}

func (v *NullableVersionV1Data) Set(val *VersionV1Data) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionV1Data) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionV1Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionV1Data(val *VersionV1Data) *NullableVersionV1Data {
	return &NullableVersionV1Data{value: val, isSet: true}
}

func (v NullableVersionV1Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionV1Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


