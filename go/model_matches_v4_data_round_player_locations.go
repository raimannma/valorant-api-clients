/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRoundPlayerLocations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRoundPlayerLocations{}

// MatchesV4DataRoundPlayerLocations struct for MatchesV4DataRoundPlayerLocations
type MatchesV4DataRoundPlayerLocations struct {
	Location MatchesV4DataRoundLocation `json:"location"`
	Player MatchesV4DataRoundPlayer `json:"player"`
	ViewRadians float32 `json:"view_radians"`
}

type _MatchesV4DataRoundPlayerLocations MatchesV4DataRoundPlayerLocations

// NewMatchesV4DataRoundPlayerLocations instantiates a new MatchesV4DataRoundPlayerLocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRoundPlayerLocations(location MatchesV4DataRoundLocation, player MatchesV4DataRoundPlayer, viewRadians float32) *MatchesV4DataRoundPlayerLocations {
	this := MatchesV4DataRoundPlayerLocations{}
	this.Location = location
	this.Player = player
	this.ViewRadians = viewRadians
	return &this
}

// NewMatchesV4DataRoundPlayerLocationsWithDefaults instantiates a new MatchesV4DataRoundPlayerLocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundPlayerLocationsWithDefaults() *MatchesV4DataRoundPlayerLocations {
	this := MatchesV4DataRoundPlayerLocations{}
	return &this
}

// GetLocation returns the Location field value
func (o *MatchesV4DataRoundPlayerLocations) GetLocation() MatchesV4DataRoundLocation {
	if o == nil {
		var ret MatchesV4DataRoundLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerLocations) GetLocationOk() (*MatchesV4DataRoundLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *MatchesV4DataRoundPlayerLocations) SetLocation(v MatchesV4DataRoundLocation) {
	o.Location = v
}

// GetPlayer returns the Player field value
func (o *MatchesV4DataRoundPlayerLocations) GetPlayer() MatchesV4DataRoundPlayer {
	if o == nil {
		var ret MatchesV4DataRoundPlayer
		return ret
	}

	return o.Player
}

// GetPlayerOk returns a tuple with the Player field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerLocations) GetPlayerOk() (*MatchesV4DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Player, true
}

// SetPlayer sets field value
func (o *MatchesV4DataRoundPlayerLocations) SetPlayer(v MatchesV4DataRoundPlayer) {
	o.Player = v
}

// GetViewRadians returns the ViewRadians field value
func (o *MatchesV4DataRoundPlayerLocations) GetViewRadians() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ViewRadians
}

// GetViewRadiansOk returns a tuple with the ViewRadians field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerLocations) GetViewRadiansOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewRadians, true
}

// SetViewRadians sets field value
func (o *MatchesV4DataRoundPlayerLocations) SetViewRadians(v float32) {
	o.ViewRadians = v
}

func (o MatchesV4DataRoundPlayerLocations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRoundPlayerLocations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["location"] = o.Location
	toSerialize["player"] = o.Player
	toSerialize["view_radians"] = o.ViewRadians
	return toSerialize, nil
}

func (o *MatchesV4DataRoundPlayerLocations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
		"player",
		"view_radians",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRoundPlayerLocations := _MatchesV4DataRoundPlayerLocations{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRoundPlayerLocations)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRoundPlayerLocations(varMatchesV4DataRoundPlayerLocations)

	return err
}

type NullableMatchesV4DataRoundPlayerLocations struct {
	value *MatchesV4DataRoundPlayerLocations
	isSet bool
}

func (v NullableMatchesV4DataRoundPlayerLocations) Get() *MatchesV4DataRoundPlayerLocations {
	return v.value
}

func (v *NullableMatchesV4DataRoundPlayerLocations) Set(val *MatchesV4DataRoundPlayerLocations) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRoundPlayerLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRoundPlayerLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRoundPlayerLocations(val *MatchesV4DataRoundPlayerLocations) *NullableMatchesV4DataRoundPlayerLocations {
	return &NullableMatchesV4DataRoundPlayerLocations{value: val, isSet: true}
}

func (v NullableMatchesV4DataRoundPlayerLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRoundPlayerLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


