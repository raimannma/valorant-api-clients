/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataRoundPlayerStatsEconomy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataRoundPlayerStatsEconomy{}

// MatchesV2DataRoundPlayerStatsEconomy struct for MatchesV2DataRoundPlayerStatsEconomy
type MatchesV2DataRoundPlayerStatsEconomy struct {
	Armor MatchesV2DataRoundPlayerStatsEconomyEquipmentArmor `json:"armor"`
	LoadoutValue int32 `json:"loadout_value"`
	Remaining int32 `json:"remaining"`
	Spent int32 `json:"spent"`
	Weapon MatchesV2DataRoundPlayerStatsEconomyEquipmentWeapon `json:"weapon"`
}

type _MatchesV2DataRoundPlayerStatsEconomy MatchesV2DataRoundPlayerStatsEconomy

// NewMatchesV2DataRoundPlayerStatsEconomy instantiates a new MatchesV2DataRoundPlayerStatsEconomy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataRoundPlayerStatsEconomy(armor MatchesV2DataRoundPlayerStatsEconomyEquipmentArmor, loadoutValue int32, remaining int32, spent int32, weapon MatchesV2DataRoundPlayerStatsEconomyEquipmentWeapon) *MatchesV2DataRoundPlayerStatsEconomy {
	this := MatchesV2DataRoundPlayerStatsEconomy{}
	this.Armor = armor
	this.LoadoutValue = loadoutValue
	this.Remaining = remaining
	this.Spent = spent
	this.Weapon = weapon
	return &this
}

// NewMatchesV2DataRoundPlayerStatsEconomyWithDefaults instantiates a new MatchesV2DataRoundPlayerStatsEconomy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataRoundPlayerStatsEconomyWithDefaults() *MatchesV2DataRoundPlayerStatsEconomy {
	this := MatchesV2DataRoundPlayerStatsEconomy{}
	return &this
}

// GetArmor returns the Armor field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetArmor() MatchesV2DataRoundPlayerStatsEconomyEquipmentArmor {
	if o == nil {
		var ret MatchesV2DataRoundPlayerStatsEconomyEquipmentArmor
		return ret
	}

	return o.Armor
}

// GetArmorOk returns a tuple with the Armor field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetArmorOk() (*MatchesV2DataRoundPlayerStatsEconomyEquipmentArmor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Armor, true
}

// SetArmor sets field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) SetArmor(v MatchesV2DataRoundPlayerStatsEconomyEquipmentArmor) {
	o.Armor = v
}

// GetLoadoutValue returns the LoadoutValue field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetLoadoutValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LoadoutValue
}

// GetLoadoutValueOk returns a tuple with the LoadoutValue field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetLoadoutValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadoutValue, true
}

// SetLoadoutValue sets field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) SetLoadoutValue(v int32) {
	o.LoadoutValue = v
}

// GetRemaining returns the Remaining field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetRemaining() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetRemainingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remaining, true
}

// SetRemaining sets field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) SetRemaining(v int32) {
	o.Remaining = v
}

// GetSpent returns the Spent field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetSpent() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Spent
}

// GetSpentOk returns a tuple with the Spent field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetSpentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spent, true
}

// SetSpent sets field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) SetSpent(v int32) {
	o.Spent = v
}

// GetWeapon returns the Weapon field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetWeapon() MatchesV2DataRoundPlayerStatsEconomyEquipmentWeapon {
	if o == nil {
		var ret MatchesV2DataRoundPlayerStatsEconomyEquipmentWeapon
		return ret
	}

	return o.Weapon
}

// GetWeaponOk returns a tuple with the Weapon field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerStatsEconomy) GetWeaponOk() (*MatchesV2DataRoundPlayerStatsEconomyEquipmentWeapon, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weapon, true
}

// SetWeapon sets field value
func (o *MatchesV2DataRoundPlayerStatsEconomy) SetWeapon(v MatchesV2DataRoundPlayerStatsEconomyEquipmentWeapon) {
	o.Weapon = v
}

func (o MatchesV2DataRoundPlayerStatsEconomy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataRoundPlayerStatsEconomy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["armor"] = o.Armor
	toSerialize["loadout_value"] = o.LoadoutValue
	toSerialize["remaining"] = o.Remaining
	toSerialize["spent"] = o.Spent
	toSerialize["weapon"] = o.Weapon
	return toSerialize, nil
}

func (o *MatchesV2DataRoundPlayerStatsEconomy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"armor",
		"loadout_value",
		"remaining",
		"spent",
		"weapon",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataRoundPlayerStatsEconomy := _MatchesV2DataRoundPlayerStatsEconomy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataRoundPlayerStatsEconomy)

	if err != nil {
		return err
	}

	*o = MatchesV2DataRoundPlayerStatsEconomy(varMatchesV2DataRoundPlayerStatsEconomy)

	return err
}

type NullableMatchesV2DataRoundPlayerStatsEconomy struct {
	value *MatchesV2DataRoundPlayerStatsEconomy
	isSet bool
}

func (v NullableMatchesV2DataRoundPlayerStatsEconomy) Get() *MatchesV2DataRoundPlayerStatsEconomy {
	return v.value
}

func (v *NullableMatchesV2DataRoundPlayerStatsEconomy) Set(val *MatchesV2DataRoundPlayerStatsEconomy) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataRoundPlayerStatsEconomy) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataRoundPlayerStatsEconomy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataRoundPlayerStatsEconomy(val *MatchesV2DataRoundPlayerStatsEconomy) *NullableMatchesV2DataRoundPlayerStatsEconomy {
	return &NullableMatchesV2DataRoundPlayerStatsEconomy{value: val, isSet: true}
}

func (v NullableMatchesV2DataRoundPlayerStatsEconomy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataRoundPlayerStatsEconomy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


