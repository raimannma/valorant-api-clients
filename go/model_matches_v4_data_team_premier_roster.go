/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataTeamPremierRoster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataTeamPremierRoster{}

// MatchesV4DataTeamPremierRoster struct for MatchesV4DataTeamPremierRoster
type MatchesV4DataTeamPremierRoster struct {
	Customization MatchesV4DataTeamPremierRosterCustomization `json:"customization"`
	Id string `json:"id"`
	Members []string `json:"members"`
	Name string `json:"name"`
	Tag string `json:"tag"`
}

type _MatchesV4DataTeamPremierRoster MatchesV4DataTeamPremierRoster

// NewMatchesV4DataTeamPremierRoster instantiates a new MatchesV4DataTeamPremierRoster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataTeamPremierRoster(customization MatchesV4DataTeamPremierRosterCustomization, id string, members []string, name string, tag string) *MatchesV4DataTeamPremierRoster {
	this := MatchesV4DataTeamPremierRoster{}
	this.Customization = customization
	this.Id = id
	this.Members = members
	this.Name = name
	this.Tag = tag
	return &this
}

// NewMatchesV4DataTeamPremierRosterWithDefaults instantiates a new MatchesV4DataTeamPremierRoster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataTeamPremierRosterWithDefaults() *MatchesV4DataTeamPremierRoster {
	this := MatchesV4DataTeamPremierRoster{}
	return &this
}

// GetCustomization returns the Customization field value
func (o *MatchesV4DataTeamPremierRoster) GetCustomization() MatchesV4DataTeamPremierRosterCustomization {
	if o == nil {
		var ret MatchesV4DataTeamPremierRosterCustomization
		return ret
	}

	return o.Customization
}

// GetCustomizationOk returns a tuple with the Customization field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeamPremierRoster) GetCustomizationOk() (*MatchesV4DataTeamPremierRosterCustomization, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customization, true
}

// SetCustomization sets field value
func (o *MatchesV4DataTeamPremierRoster) SetCustomization(v MatchesV4DataTeamPremierRosterCustomization) {
	o.Customization = v
}

// GetId returns the Id field value
func (o *MatchesV4DataTeamPremierRoster) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeamPremierRoster) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MatchesV4DataTeamPremierRoster) SetId(v string) {
	o.Id = v
}

// GetMembers returns the Members field value
func (o *MatchesV4DataTeamPremierRoster) GetMembers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeamPremierRoster) GetMembersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *MatchesV4DataTeamPremierRoster) SetMembers(v []string) {
	o.Members = v
}

// GetName returns the Name field value
func (o *MatchesV4DataTeamPremierRoster) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeamPremierRoster) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MatchesV4DataTeamPremierRoster) SetName(v string) {
	o.Name = v
}

// GetTag returns the Tag field value
func (o *MatchesV4DataTeamPremierRoster) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeamPremierRoster) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *MatchesV4DataTeamPremierRoster) SetTag(v string) {
	o.Tag = v
}

func (o MatchesV4DataTeamPremierRoster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataTeamPremierRoster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customization"] = o.Customization
	toSerialize["id"] = o.Id
	toSerialize["members"] = o.Members
	toSerialize["name"] = o.Name
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *MatchesV4DataTeamPremierRoster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customization",
		"id",
		"members",
		"name",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataTeamPremierRoster := _MatchesV4DataTeamPremierRoster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataTeamPremierRoster)

	if err != nil {
		return err
	}

	*o = MatchesV4DataTeamPremierRoster(varMatchesV4DataTeamPremierRoster)

	return err
}

type NullableMatchesV4DataTeamPremierRoster struct {
	value *MatchesV4DataTeamPremierRoster
	isSet bool
}

func (v NullableMatchesV4DataTeamPremierRoster) Get() *MatchesV4DataTeamPremierRoster {
	return v.value
}

func (v *NullableMatchesV4DataTeamPremierRoster) Set(val *MatchesV4DataTeamPremierRoster) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataTeamPremierRoster) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataTeamPremierRoster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataTeamPremierRoster(val *MatchesV4DataTeamPremierRoster) *NullableMatchesV4DataTeamPremierRoster {
	return &NullableMatchesV4DataTeamPremierRoster{value: val, isSet: true}
}

func (v NullableMatchesV4DataTeamPremierRoster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataTeamPremierRoster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


