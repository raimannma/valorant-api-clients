/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRoundPlayerStatsEconomyArmor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRoundPlayerStatsEconomyArmor{}

// MatchesV4DataRoundPlayerStatsEconomyArmor struct for MatchesV4DataRoundPlayerStatsEconomyArmor
type MatchesV4DataRoundPlayerStatsEconomyArmor struct {
	Id string `json:"id"`
	Name NullableString `json:"name,omitempty"`
}

type _MatchesV4DataRoundPlayerStatsEconomyArmor MatchesV4DataRoundPlayerStatsEconomyArmor

// NewMatchesV4DataRoundPlayerStatsEconomyArmor instantiates a new MatchesV4DataRoundPlayerStatsEconomyArmor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRoundPlayerStatsEconomyArmor(id string) *MatchesV4DataRoundPlayerStatsEconomyArmor {
	this := MatchesV4DataRoundPlayerStatsEconomyArmor{}
	this.Id = id
	return &this
}

// NewMatchesV4DataRoundPlayerStatsEconomyArmorWithDefaults instantiates a new MatchesV4DataRoundPlayerStatsEconomyArmor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundPlayerStatsEconomyArmorWithDefaults() *MatchesV4DataRoundPlayerStatsEconomyArmor {
	this := MatchesV4DataRoundPlayerStatsEconomyArmor{}
	return &this
}

// GetId returns the Id field value
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) UnsetName() {
	o.Name.Unset()
}

func (o MatchesV4DataRoundPlayerStatsEconomyArmor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRoundPlayerStatsEconomyArmor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

func (o *MatchesV4DataRoundPlayerStatsEconomyArmor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRoundPlayerStatsEconomyArmor := _MatchesV4DataRoundPlayerStatsEconomyArmor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRoundPlayerStatsEconomyArmor)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRoundPlayerStatsEconomyArmor(varMatchesV4DataRoundPlayerStatsEconomyArmor)

	return err
}

type NullableMatchesV4DataRoundPlayerStatsEconomyArmor struct {
	value *MatchesV4DataRoundPlayerStatsEconomyArmor
	isSet bool
}

func (v NullableMatchesV4DataRoundPlayerStatsEconomyArmor) Get() *MatchesV4DataRoundPlayerStatsEconomyArmor {
	return v.value
}

func (v *NullableMatchesV4DataRoundPlayerStatsEconomyArmor) Set(val *MatchesV4DataRoundPlayerStatsEconomyArmor) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRoundPlayerStatsEconomyArmor) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRoundPlayerStatsEconomyArmor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRoundPlayerStatsEconomyArmor(val *MatchesV4DataRoundPlayerStatsEconomyArmor) *NullableMatchesV4DataRoundPlayerStatsEconomyArmor {
	return &NullableMatchesV4DataRoundPlayerStatsEconomyArmor{value: val, isSet: true}
}

func (v NullableMatchesV4DataRoundPlayerStatsEconomyArmor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRoundPlayerStatsEconomyArmor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


