/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
)

// checks if the MatchesV4DataPlayerAbilityCasts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataPlayerAbilityCasts{}

// MatchesV4DataPlayerAbilityCasts struct for MatchesV4DataPlayerAbilityCasts
type MatchesV4DataPlayerAbilityCasts struct {
	Ability1 NullableInt32 `json:"ability1,omitempty"`
	Ability2 NullableInt32 `json:"ability2,omitempty"`
	Grenade NullableInt32 `json:"grenade,omitempty"`
	Ultimate NullableInt32 `json:"ultimate,omitempty"`
}

// NewMatchesV4DataPlayerAbilityCasts instantiates a new MatchesV4DataPlayerAbilityCasts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataPlayerAbilityCasts() *MatchesV4DataPlayerAbilityCasts {
	this := MatchesV4DataPlayerAbilityCasts{}
	return &this
}

// NewMatchesV4DataPlayerAbilityCastsWithDefaults instantiates a new MatchesV4DataPlayerAbilityCasts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataPlayerAbilityCastsWithDefaults() *MatchesV4DataPlayerAbilityCasts {
	this := MatchesV4DataPlayerAbilityCasts{}
	return &this
}

// GetAbility1 returns the Ability1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataPlayerAbilityCasts) GetAbility1() int32 {
	if o == nil || IsNil(o.Ability1.Get()) {
		var ret int32
		return ret
	}
	return *o.Ability1.Get()
}

// GetAbility1Ok returns a tuple with the Ability1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataPlayerAbilityCasts) GetAbility1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ability1.Get(), o.Ability1.IsSet()
}

// HasAbility1 returns a boolean if a field has been set.
func (o *MatchesV4DataPlayerAbilityCasts) HasAbility1() bool {
	if o != nil && o.Ability1.IsSet() {
		return true
	}

	return false
}

// SetAbility1 gets a reference to the given NullableInt32 and assigns it to the Ability1 field.
func (o *MatchesV4DataPlayerAbilityCasts) SetAbility1(v int32) {
	o.Ability1.Set(&v)
}
// SetAbility1Nil sets the value for Ability1 to be an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) SetAbility1Nil() {
	o.Ability1.Set(nil)
}

// UnsetAbility1 ensures that no value is present for Ability1, not even an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) UnsetAbility1() {
	o.Ability1.Unset()
}

// GetAbility2 returns the Ability2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataPlayerAbilityCasts) GetAbility2() int32 {
	if o == nil || IsNil(o.Ability2.Get()) {
		var ret int32
		return ret
	}
	return *o.Ability2.Get()
}

// GetAbility2Ok returns a tuple with the Ability2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataPlayerAbilityCasts) GetAbility2Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ability2.Get(), o.Ability2.IsSet()
}

// HasAbility2 returns a boolean if a field has been set.
func (o *MatchesV4DataPlayerAbilityCasts) HasAbility2() bool {
	if o != nil && o.Ability2.IsSet() {
		return true
	}

	return false
}

// SetAbility2 gets a reference to the given NullableInt32 and assigns it to the Ability2 field.
func (o *MatchesV4DataPlayerAbilityCasts) SetAbility2(v int32) {
	o.Ability2.Set(&v)
}
// SetAbility2Nil sets the value for Ability2 to be an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) SetAbility2Nil() {
	o.Ability2.Set(nil)
}

// UnsetAbility2 ensures that no value is present for Ability2, not even an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) UnsetAbility2() {
	o.Ability2.Unset()
}

// GetGrenade returns the Grenade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataPlayerAbilityCasts) GetGrenade() int32 {
	if o == nil || IsNil(o.Grenade.Get()) {
		var ret int32
		return ret
	}
	return *o.Grenade.Get()
}

// GetGrenadeOk returns a tuple with the Grenade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataPlayerAbilityCasts) GetGrenadeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grenade.Get(), o.Grenade.IsSet()
}

// HasGrenade returns a boolean if a field has been set.
func (o *MatchesV4DataPlayerAbilityCasts) HasGrenade() bool {
	if o != nil && o.Grenade.IsSet() {
		return true
	}

	return false
}

// SetGrenade gets a reference to the given NullableInt32 and assigns it to the Grenade field.
func (o *MatchesV4DataPlayerAbilityCasts) SetGrenade(v int32) {
	o.Grenade.Set(&v)
}
// SetGrenadeNil sets the value for Grenade to be an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) SetGrenadeNil() {
	o.Grenade.Set(nil)
}

// UnsetGrenade ensures that no value is present for Grenade, not even an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) UnsetGrenade() {
	o.Grenade.Unset()
}

// GetUltimate returns the Ultimate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataPlayerAbilityCasts) GetUltimate() int32 {
	if o == nil || IsNil(o.Ultimate.Get()) {
		var ret int32
		return ret
	}
	return *o.Ultimate.Get()
}

// GetUltimateOk returns a tuple with the Ultimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataPlayerAbilityCasts) GetUltimateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ultimate.Get(), o.Ultimate.IsSet()
}

// HasUltimate returns a boolean if a field has been set.
func (o *MatchesV4DataPlayerAbilityCasts) HasUltimate() bool {
	if o != nil && o.Ultimate.IsSet() {
		return true
	}

	return false
}

// SetUltimate gets a reference to the given NullableInt32 and assigns it to the Ultimate field.
func (o *MatchesV4DataPlayerAbilityCasts) SetUltimate(v int32) {
	o.Ultimate.Set(&v)
}
// SetUltimateNil sets the value for Ultimate to be an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) SetUltimateNil() {
	o.Ultimate.Set(nil)
}

// UnsetUltimate ensures that no value is present for Ultimate, not even an explicit nil
func (o *MatchesV4DataPlayerAbilityCasts) UnsetUltimate() {
	o.Ultimate.Unset()
}

func (o MatchesV4DataPlayerAbilityCasts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataPlayerAbilityCasts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ability1.IsSet() {
		toSerialize["ability1"] = o.Ability1.Get()
	}
	if o.Ability2.IsSet() {
		toSerialize["ability2"] = o.Ability2.Get()
	}
	if o.Grenade.IsSet() {
		toSerialize["grenade"] = o.Grenade.Get()
	}
	if o.Ultimate.IsSet() {
		toSerialize["ultimate"] = o.Ultimate.Get()
	}
	return toSerialize, nil
}

type NullableMatchesV4DataPlayerAbilityCasts struct {
	value *MatchesV4DataPlayerAbilityCasts
	isSet bool
}

func (v NullableMatchesV4DataPlayerAbilityCasts) Get() *MatchesV4DataPlayerAbilityCasts {
	return v.value
}

func (v *NullableMatchesV4DataPlayerAbilityCasts) Set(val *MatchesV4DataPlayerAbilityCasts) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataPlayerAbilityCasts) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataPlayerAbilityCasts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataPlayerAbilityCasts(val *MatchesV4DataPlayerAbilityCasts) *NullableMatchesV4DataPlayerAbilityCasts {
	return &NullableMatchesV4DataPlayerAbilityCasts{value: val, isSet: true}
}

func (v NullableMatchesV4DataPlayerAbilityCasts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataPlayerAbilityCasts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


