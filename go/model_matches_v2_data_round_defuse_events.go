/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
)

// checks if the MatchesV2DataRoundDefuseEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataRoundDefuseEvents{}

// MatchesV2DataRoundDefuseEvents struct for MatchesV2DataRoundDefuseEvents
type MatchesV2DataRoundDefuseEvents struct {
	DefuseLocation NullableMatchesV2DataRoundEventLocation `json:"defuse_location,omitempty"`
	DefuseTimeInRound NullableInt64 `json:"defuse_time_in_round,omitempty"`
	DefusedBy NullableMatchesV2DataRoundPlayer `json:"defused_by,omitempty"`
	PlayerLocationsOnDefuse []MatchesV2DataRoundPlayerLocationsOnEvent `json:"player_locations_on_defuse,omitempty"`
}

// NewMatchesV2DataRoundDefuseEvents instantiates a new MatchesV2DataRoundDefuseEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataRoundDefuseEvents() *MatchesV2DataRoundDefuseEvents {
	this := MatchesV2DataRoundDefuseEvents{}
	return &this
}

// NewMatchesV2DataRoundDefuseEventsWithDefaults instantiates a new MatchesV2DataRoundDefuseEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataRoundDefuseEventsWithDefaults() *MatchesV2DataRoundDefuseEvents {
	this := MatchesV2DataRoundDefuseEvents{}
	return &this
}

// GetDefuseLocation returns the DefuseLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundDefuseEvents) GetDefuseLocation() MatchesV2DataRoundEventLocation {
	if o == nil || IsNil(o.DefuseLocation.Get()) {
		var ret MatchesV2DataRoundEventLocation
		return ret
	}
	return *o.DefuseLocation.Get()
}

// GetDefuseLocationOk returns a tuple with the DefuseLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundDefuseEvents) GetDefuseLocationOk() (*MatchesV2DataRoundEventLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefuseLocation.Get(), o.DefuseLocation.IsSet()
}

// HasDefuseLocation returns a boolean if a field has been set.
func (o *MatchesV2DataRoundDefuseEvents) HasDefuseLocation() bool {
	if o != nil && o.DefuseLocation.IsSet() {
		return true
	}

	return false
}

// SetDefuseLocation gets a reference to the given NullableMatchesV2DataRoundEventLocation and assigns it to the DefuseLocation field.
func (o *MatchesV2DataRoundDefuseEvents) SetDefuseLocation(v MatchesV2DataRoundEventLocation) {
	o.DefuseLocation.Set(&v)
}
// SetDefuseLocationNil sets the value for DefuseLocation to be an explicit nil
func (o *MatchesV2DataRoundDefuseEvents) SetDefuseLocationNil() {
	o.DefuseLocation.Set(nil)
}

// UnsetDefuseLocation ensures that no value is present for DefuseLocation, not even an explicit nil
func (o *MatchesV2DataRoundDefuseEvents) UnsetDefuseLocation() {
	o.DefuseLocation.Unset()
}

// GetDefuseTimeInRound returns the DefuseTimeInRound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundDefuseEvents) GetDefuseTimeInRound() int64 {
	if o == nil || IsNil(o.DefuseTimeInRound.Get()) {
		var ret int64
		return ret
	}
	return *o.DefuseTimeInRound.Get()
}

// GetDefuseTimeInRoundOk returns a tuple with the DefuseTimeInRound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundDefuseEvents) GetDefuseTimeInRoundOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefuseTimeInRound.Get(), o.DefuseTimeInRound.IsSet()
}

// HasDefuseTimeInRound returns a boolean if a field has been set.
func (o *MatchesV2DataRoundDefuseEvents) HasDefuseTimeInRound() bool {
	if o != nil && o.DefuseTimeInRound.IsSet() {
		return true
	}

	return false
}

// SetDefuseTimeInRound gets a reference to the given NullableInt64 and assigns it to the DefuseTimeInRound field.
func (o *MatchesV2DataRoundDefuseEvents) SetDefuseTimeInRound(v int64) {
	o.DefuseTimeInRound.Set(&v)
}
// SetDefuseTimeInRoundNil sets the value for DefuseTimeInRound to be an explicit nil
func (o *MatchesV2DataRoundDefuseEvents) SetDefuseTimeInRoundNil() {
	o.DefuseTimeInRound.Set(nil)
}

// UnsetDefuseTimeInRound ensures that no value is present for DefuseTimeInRound, not even an explicit nil
func (o *MatchesV2DataRoundDefuseEvents) UnsetDefuseTimeInRound() {
	o.DefuseTimeInRound.Unset()
}

// GetDefusedBy returns the DefusedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundDefuseEvents) GetDefusedBy() MatchesV2DataRoundPlayer {
	if o == nil || IsNil(o.DefusedBy.Get()) {
		var ret MatchesV2DataRoundPlayer
		return ret
	}
	return *o.DefusedBy.Get()
}

// GetDefusedByOk returns a tuple with the DefusedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundDefuseEvents) GetDefusedByOk() (*MatchesV2DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefusedBy.Get(), o.DefusedBy.IsSet()
}

// HasDefusedBy returns a boolean if a field has been set.
func (o *MatchesV2DataRoundDefuseEvents) HasDefusedBy() bool {
	if o != nil && o.DefusedBy.IsSet() {
		return true
	}

	return false
}

// SetDefusedBy gets a reference to the given NullableMatchesV2DataRoundPlayer and assigns it to the DefusedBy field.
func (o *MatchesV2DataRoundDefuseEvents) SetDefusedBy(v MatchesV2DataRoundPlayer) {
	o.DefusedBy.Set(&v)
}
// SetDefusedByNil sets the value for DefusedBy to be an explicit nil
func (o *MatchesV2DataRoundDefuseEvents) SetDefusedByNil() {
	o.DefusedBy.Set(nil)
}

// UnsetDefusedBy ensures that no value is present for DefusedBy, not even an explicit nil
func (o *MatchesV2DataRoundDefuseEvents) UnsetDefusedBy() {
	o.DefusedBy.Unset()
}

// GetPlayerLocationsOnDefuse returns the PlayerLocationsOnDefuse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundDefuseEvents) GetPlayerLocationsOnDefuse() []MatchesV2DataRoundPlayerLocationsOnEvent {
	if o == nil {
		var ret []MatchesV2DataRoundPlayerLocationsOnEvent
		return ret
	}
	return o.PlayerLocationsOnDefuse
}

// GetPlayerLocationsOnDefuseOk returns a tuple with the PlayerLocationsOnDefuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundDefuseEvents) GetPlayerLocationsOnDefuseOk() ([]MatchesV2DataRoundPlayerLocationsOnEvent, bool) {
	if o == nil || IsNil(o.PlayerLocationsOnDefuse) {
		return nil, false
	}
	return o.PlayerLocationsOnDefuse, true
}

// HasPlayerLocationsOnDefuse returns a boolean if a field has been set.
func (o *MatchesV2DataRoundDefuseEvents) HasPlayerLocationsOnDefuse() bool {
	if o != nil && !IsNil(o.PlayerLocationsOnDefuse) {
		return true
	}

	return false
}

// SetPlayerLocationsOnDefuse gets a reference to the given []MatchesV2DataRoundPlayerLocationsOnEvent and assigns it to the PlayerLocationsOnDefuse field.
func (o *MatchesV2DataRoundDefuseEvents) SetPlayerLocationsOnDefuse(v []MatchesV2DataRoundPlayerLocationsOnEvent) {
	o.PlayerLocationsOnDefuse = v
}

func (o MatchesV2DataRoundDefuseEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataRoundDefuseEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefuseLocation.IsSet() {
		toSerialize["defuse_location"] = o.DefuseLocation.Get()
	}
	if o.DefuseTimeInRound.IsSet() {
		toSerialize["defuse_time_in_round"] = o.DefuseTimeInRound.Get()
	}
	if o.DefusedBy.IsSet() {
		toSerialize["defused_by"] = o.DefusedBy.Get()
	}
	if o.PlayerLocationsOnDefuse != nil {
		toSerialize["player_locations_on_defuse"] = o.PlayerLocationsOnDefuse
	}
	return toSerialize, nil
}

type NullableMatchesV2DataRoundDefuseEvents struct {
	value *MatchesV2DataRoundDefuseEvents
	isSet bool
}

func (v NullableMatchesV2DataRoundDefuseEvents) Get() *MatchesV2DataRoundDefuseEvents {
	return v.value
}

func (v *NullableMatchesV2DataRoundDefuseEvents) Set(val *MatchesV2DataRoundDefuseEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataRoundDefuseEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataRoundDefuseEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataRoundDefuseEvents(val *MatchesV2DataRoundDefuseEvents) *NullableMatchesV2DataRoundDefuseEvents {
	return &NullableMatchesV2DataRoundDefuseEvents{value: val, isSet: true}
}

func (v NullableMatchesV2DataRoundDefuseEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataRoundDefuseEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


