/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRoundPlayerStatsEconomy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRoundPlayerStatsEconomy{}

// MatchesV4DataRoundPlayerStatsEconomy struct for MatchesV4DataRoundPlayerStatsEconomy
type MatchesV4DataRoundPlayerStatsEconomy struct {
	Armor NullableMatchesV4DataRoundPlayerStatsEconomyArmor `json:"armor,omitempty"`
	LoadoutValue int32 `json:"loadout_value"`
	Remaining int32 `json:"remaining"`
	Weapon NullableMatchesV4DataRoundPlayerStatsEconomyWeapon `json:"weapon,omitempty"`
}

type _MatchesV4DataRoundPlayerStatsEconomy MatchesV4DataRoundPlayerStatsEconomy

// NewMatchesV4DataRoundPlayerStatsEconomy instantiates a new MatchesV4DataRoundPlayerStatsEconomy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRoundPlayerStatsEconomy(loadoutValue int32, remaining int32) *MatchesV4DataRoundPlayerStatsEconomy {
	this := MatchesV4DataRoundPlayerStatsEconomy{}
	this.LoadoutValue = loadoutValue
	this.Remaining = remaining
	return &this
}

// NewMatchesV4DataRoundPlayerStatsEconomyWithDefaults instantiates a new MatchesV4DataRoundPlayerStatsEconomy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundPlayerStatsEconomyWithDefaults() *MatchesV4DataRoundPlayerStatsEconomy {
	this := MatchesV4DataRoundPlayerStatsEconomy{}
	return &this
}

// GetArmor returns the Armor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetArmor() MatchesV4DataRoundPlayerStatsEconomyArmor {
	if o == nil || IsNil(o.Armor.Get()) {
		var ret MatchesV4DataRoundPlayerStatsEconomyArmor
		return ret
	}
	return *o.Armor.Get()
}

// GetArmorOk returns a tuple with the Armor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetArmorOk() (*MatchesV4DataRoundPlayerStatsEconomyArmor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Armor.Get(), o.Armor.IsSet()
}

// HasArmor returns a boolean if a field has been set.
func (o *MatchesV4DataRoundPlayerStatsEconomy) HasArmor() bool {
	if o != nil && o.Armor.IsSet() {
		return true
	}

	return false
}

// SetArmor gets a reference to the given NullableMatchesV4DataRoundPlayerStatsEconomyArmor and assigns it to the Armor field.
func (o *MatchesV4DataRoundPlayerStatsEconomy) SetArmor(v MatchesV4DataRoundPlayerStatsEconomyArmor) {
	o.Armor.Set(&v)
}
// SetArmorNil sets the value for Armor to be an explicit nil
func (o *MatchesV4DataRoundPlayerStatsEconomy) SetArmorNil() {
	o.Armor.Set(nil)
}

// UnsetArmor ensures that no value is present for Armor, not even an explicit nil
func (o *MatchesV4DataRoundPlayerStatsEconomy) UnsetArmor() {
	o.Armor.Unset()
}

// GetLoadoutValue returns the LoadoutValue field value
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetLoadoutValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LoadoutValue
}

// GetLoadoutValueOk returns a tuple with the LoadoutValue field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetLoadoutValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadoutValue, true
}

// SetLoadoutValue sets field value
func (o *MatchesV4DataRoundPlayerStatsEconomy) SetLoadoutValue(v int32) {
	o.LoadoutValue = v
}

// GetRemaining returns the Remaining field value
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetRemaining() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetRemainingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remaining, true
}

// SetRemaining sets field value
func (o *MatchesV4DataRoundPlayerStatsEconomy) SetRemaining(v int32) {
	o.Remaining = v
}

// GetWeapon returns the Weapon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetWeapon() MatchesV4DataRoundPlayerStatsEconomyWeapon {
	if o == nil || IsNil(o.Weapon.Get()) {
		var ret MatchesV4DataRoundPlayerStatsEconomyWeapon
		return ret
	}
	return *o.Weapon.Get()
}

// GetWeaponOk returns a tuple with the Weapon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataRoundPlayerStatsEconomy) GetWeaponOk() (*MatchesV4DataRoundPlayerStatsEconomyWeapon, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weapon.Get(), o.Weapon.IsSet()
}

// HasWeapon returns a boolean if a field has been set.
func (o *MatchesV4DataRoundPlayerStatsEconomy) HasWeapon() bool {
	if o != nil && o.Weapon.IsSet() {
		return true
	}

	return false
}

// SetWeapon gets a reference to the given NullableMatchesV4DataRoundPlayerStatsEconomyWeapon and assigns it to the Weapon field.
func (o *MatchesV4DataRoundPlayerStatsEconomy) SetWeapon(v MatchesV4DataRoundPlayerStatsEconomyWeapon) {
	o.Weapon.Set(&v)
}
// SetWeaponNil sets the value for Weapon to be an explicit nil
func (o *MatchesV4DataRoundPlayerStatsEconomy) SetWeaponNil() {
	o.Weapon.Set(nil)
}

// UnsetWeapon ensures that no value is present for Weapon, not even an explicit nil
func (o *MatchesV4DataRoundPlayerStatsEconomy) UnsetWeapon() {
	o.Weapon.Unset()
}

func (o MatchesV4DataRoundPlayerStatsEconomy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRoundPlayerStatsEconomy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Armor.IsSet() {
		toSerialize["armor"] = o.Armor.Get()
	}
	toSerialize["loadout_value"] = o.LoadoutValue
	toSerialize["remaining"] = o.Remaining
	if o.Weapon.IsSet() {
		toSerialize["weapon"] = o.Weapon.Get()
	}
	return toSerialize, nil
}

func (o *MatchesV4DataRoundPlayerStatsEconomy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"loadout_value",
		"remaining",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRoundPlayerStatsEconomy := _MatchesV4DataRoundPlayerStatsEconomy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRoundPlayerStatsEconomy)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRoundPlayerStatsEconomy(varMatchesV4DataRoundPlayerStatsEconomy)

	return err
}

type NullableMatchesV4DataRoundPlayerStatsEconomy struct {
	value *MatchesV4DataRoundPlayerStatsEconomy
	isSet bool
}

func (v NullableMatchesV4DataRoundPlayerStatsEconomy) Get() *MatchesV4DataRoundPlayerStatsEconomy {
	return v.value
}

func (v *NullableMatchesV4DataRoundPlayerStatsEconomy) Set(val *MatchesV4DataRoundPlayerStatsEconomy) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRoundPlayerStatsEconomy) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRoundPlayerStatsEconomy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRoundPlayerStatsEconomy(val *MatchesV4DataRoundPlayerStatsEconomy) *NullableMatchesV4DataRoundPlayerStatsEconomy {
	return &NullableMatchesV4DataRoundPlayerStatsEconomy{value: val, isSet: true}
}

func (v NullableMatchesV4DataRoundPlayerStatsEconomy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRoundPlayerStatsEconomy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


