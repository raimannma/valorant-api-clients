/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataTeam{}

// MatchesV4DataTeam struct for MatchesV4DataTeam
type MatchesV4DataTeam struct {
	PremierRoster NullableMatchesV4DataTeamPremierRoster `json:"premier_roster,omitempty"`
	Rounds MatchesV4DataTeamRounds `json:"rounds"`
	TeamId string `json:"team_id"`
	Won bool `json:"won"`
}

type _MatchesV4DataTeam MatchesV4DataTeam

// NewMatchesV4DataTeam instantiates a new MatchesV4DataTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataTeam(rounds MatchesV4DataTeamRounds, teamId string, won bool) *MatchesV4DataTeam {
	this := MatchesV4DataTeam{}
	this.Rounds = rounds
	this.TeamId = teamId
	this.Won = won
	return &this
}

// NewMatchesV4DataTeamWithDefaults instantiates a new MatchesV4DataTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataTeamWithDefaults() *MatchesV4DataTeam {
	this := MatchesV4DataTeam{}
	return &this
}

// GetPremierRoster returns the PremierRoster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataTeam) GetPremierRoster() MatchesV4DataTeamPremierRoster {
	if o == nil || IsNil(o.PremierRoster.Get()) {
		var ret MatchesV4DataTeamPremierRoster
		return ret
	}
	return *o.PremierRoster.Get()
}

// GetPremierRosterOk returns a tuple with the PremierRoster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataTeam) GetPremierRosterOk() (*MatchesV4DataTeamPremierRoster, bool) {
	if o == nil {
		return nil, false
	}
	return o.PremierRoster.Get(), o.PremierRoster.IsSet()
}

// HasPremierRoster returns a boolean if a field has been set.
func (o *MatchesV4DataTeam) HasPremierRoster() bool {
	if o != nil && o.PremierRoster.IsSet() {
		return true
	}

	return false
}

// SetPremierRoster gets a reference to the given NullableMatchesV4DataTeamPremierRoster and assigns it to the PremierRoster field.
func (o *MatchesV4DataTeam) SetPremierRoster(v MatchesV4DataTeamPremierRoster) {
	o.PremierRoster.Set(&v)
}
// SetPremierRosterNil sets the value for PremierRoster to be an explicit nil
func (o *MatchesV4DataTeam) SetPremierRosterNil() {
	o.PremierRoster.Set(nil)
}

// UnsetPremierRoster ensures that no value is present for PremierRoster, not even an explicit nil
func (o *MatchesV4DataTeam) UnsetPremierRoster() {
	o.PremierRoster.Unset()
}

// GetRounds returns the Rounds field value
func (o *MatchesV4DataTeam) GetRounds() MatchesV4DataTeamRounds {
	if o == nil {
		var ret MatchesV4DataTeamRounds
		return ret
	}

	return o.Rounds
}

// GetRoundsOk returns a tuple with the Rounds field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeam) GetRoundsOk() (*MatchesV4DataTeamRounds, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rounds, true
}

// SetRounds sets field value
func (o *MatchesV4DataTeam) SetRounds(v MatchesV4DataTeamRounds) {
	o.Rounds = v
}

// GetTeamId returns the TeamId field value
func (o *MatchesV4DataTeam) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeam) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *MatchesV4DataTeam) SetTeamId(v string) {
	o.TeamId = v
}

// GetWon returns the Won field value
func (o *MatchesV4DataTeam) GetWon() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Won
}

// GetWonOk returns a tuple with the Won field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeam) GetWonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Won, true
}

// SetWon sets field value
func (o *MatchesV4DataTeam) SetWon(v bool) {
	o.Won = v
}

func (o MatchesV4DataTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PremierRoster.IsSet() {
		toSerialize["premier_roster"] = o.PremierRoster.Get()
	}
	toSerialize["rounds"] = o.Rounds
	toSerialize["team_id"] = o.TeamId
	toSerialize["won"] = o.Won
	return toSerialize, nil
}

func (o *MatchesV4DataTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rounds",
		"team_id",
		"won",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataTeam := _MatchesV4DataTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataTeam)

	if err != nil {
		return err
	}

	*o = MatchesV4DataTeam(varMatchesV4DataTeam)

	return err
}

type NullableMatchesV4DataTeam struct {
	value *MatchesV4DataTeam
	isSet bool
}

func (v NullableMatchesV4DataTeam) Get() *MatchesV4DataTeam {
	return v.value
}

func (v *NullableMatchesV4DataTeam) Set(val *MatchesV4DataTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataTeam(val *MatchesV4DataTeam) *NullableMatchesV4DataTeam {
	return &NullableMatchesV4DataTeam{value: val, isSet: true}
}

func (v NullableMatchesV4DataTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


