/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataPlayerSessionPlaytime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayerSessionPlaytime{}

// MatchesV2DataPlayerSessionPlaytime struct for MatchesV2DataPlayerSessionPlaytime
type MatchesV2DataPlayerSessionPlaytime struct {
	Milliseconds int32 `json:"milliseconds"`
	Minutes int32 `json:"minutes"`
	Seconds int32 `json:"seconds"`
}

type _MatchesV2DataPlayerSessionPlaytime MatchesV2DataPlayerSessionPlaytime

// NewMatchesV2DataPlayerSessionPlaytime instantiates a new MatchesV2DataPlayerSessionPlaytime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayerSessionPlaytime(milliseconds int32, minutes int32, seconds int32) *MatchesV2DataPlayerSessionPlaytime {
	this := MatchesV2DataPlayerSessionPlaytime{}
	this.Milliseconds = milliseconds
	this.Minutes = minutes
	this.Seconds = seconds
	return &this
}

// NewMatchesV2DataPlayerSessionPlaytimeWithDefaults instantiates a new MatchesV2DataPlayerSessionPlaytime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayerSessionPlaytimeWithDefaults() *MatchesV2DataPlayerSessionPlaytime {
	this := MatchesV2DataPlayerSessionPlaytime{}
	return &this
}

// GetMilliseconds returns the Milliseconds field value
func (o *MatchesV2DataPlayerSessionPlaytime) GetMilliseconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Milliseconds
}

// GetMillisecondsOk returns a tuple with the Milliseconds field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerSessionPlaytime) GetMillisecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Milliseconds, true
}

// SetMilliseconds sets field value
func (o *MatchesV2DataPlayerSessionPlaytime) SetMilliseconds(v int32) {
	o.Milliseconds = v
}

// GetMinutes returns the Minutes field value
func (o *MatchesV2DataPlayerSessionPlaytime) GetMinutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerSessionPlaytime) GetMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minutes, true
}

// SetMinutes sets field value
func (o *MatchesV2DataPlayerSessionPlaytime) SetMinutes(v int32) {
	o.Minutes = v
}

// GetSeconds returns the Seconds field value
func (o *MatchesV2DataPlayerSessionPlaytime) GetSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerSessionPlaytime) GetSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seconds, true
}

// SetSeconds sets field value
func (o *MatchesV2DataPlayerSessionPlaytime) SetSeconds(v int32) {
	o.Seconds = v
}

func (o MatchesV2DataPlayerSessionPlaytime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayerSessionPlaytime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["milliseconds"] = o.Milliseconds
	toSerialize["minutes"] = o.Minutes
	toSerialize["seconds"] = o.Seconds
	return toSerialize, nil
}

func (o *MatchesV2DataPlayerSessionPlaytime) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"milliseconds",
		"minutes",
		"seconds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataPlayerSessionPlaytime := _MatchesV2DataPlayerSessionPlaytime{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataPlayerSessionPlaytime)

	if err != nil {
		return err
	}

	*o = MatchesV2DataPlayerSessionPlaytime(varMatchesV2DataPlayerSessionPlaytime)

	return err
}

type NullableMatchesV2DataPlayerSessionPlaytime struct {
	value *MatchesV2DataPlayerSessionPlaytime
	isSet bool
}

func (v NullableMatchesV2DataPlayerSessionPlaytime) Get() *MatchesV2DataPlayerSessionPlaytime {
	return v.value
}

func (v *NullableMatchesV2DataPlayerSessionPlaytime) Set(val *MatchesV2DataPlayerSessionPlaytime) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayerSessionPlaytime) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayerSessionPlaytime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayerSessionPlaytime(val *MatchesV2DataPlayerSessionPlaytime) *NullableMatchesV2DataPlayerSessionPlaytime {
	return &NullableMatchesV2DataPlayerSessionPlaytime{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayerSessionPlaytime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayerSessionPlaytime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


