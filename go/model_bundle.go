/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Bundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bundle{}

// Bundle struct for Bundle
type Bundle struct {
	CurrencyID string `json:"CurrencyID"`
	DataAssetID string `json:"DataAssetID"`
	DurationRemainingInSeconds int32 `json:"DurationRemainingInSeconds"`
	ID string `json:"ID"`
	Items []BundleItem `json:"Items"`
	TotalDiscountPercent float32 `json:"TotalDiscountPercent"`
	WholesaleOnly bool `json:"WholesaleOnly"`
}

type _Bundle Bundle

// NewBundle instantiates a new Bundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBundle(currencyID string, dataAssetID string, durationRemainingInSeconds int32, iD string, items []BundleItem, totalDiscountPercent float32, wholesaleOnly bool) *Bundle {
	this := Bundle{}
	this.CurrencyID = currencyID
	this.DataAssetID = dataAssetID
	this.DurationRemainingInSeconds = durationRemainingInSeconds
	this.ID = iD
	this.Items = items
	this.TotalDiscountPercent = totalDiscountPercent
	this.WholesaleOnly = wholesaleOnly
	return &this
}

// NewBundleWithDefaults instantiates a new Bundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBundleWithDefaults() *Bundle {
	this := Bundle{}
	return &this
}

// GetCurrencyID returns the CurrencyID field value
func (o *Bundle) GetCurrencyID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyID
}

// GetCurrencyIDOk returns a tuple with the CurrencyID field value
// and a boolean to check if the value has been set.
func (o *Bundle) GetCurrencyIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyID, true
}

// SetCurrencyID sets field value
func (o *Bundle) SetCurrencyID(v string) {
	o.CurrencyID = v
}

// GetDataAssetID returns the DataAssetID field value
func (o *Bundle) GetDataAssetID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataAssetID
}

// GetDataAssetIDOk returns a tuple with the DataAssetID field value
// and a boolean to check if the value has been set.
func (o *Bundle) GetDataAssetIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataAssetID, true
}

// SetDataAssetID sets field value
func (o *Bundle) SetDataAssetID(v string) {
	o.DataAssetID = v
}

// GetDurationRemainingInSeconds returns the DurationRemainingInSeconds field value
func (o *Bundle) GetDurationRemainingInSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationRemainingInSeconds
}

// GetDurationRemainingInSecondsOk returns a tuple with the DurationRemainingInSeconds field value
// and a boolean to check if the value has been set.
func (o *Bundle) GetDurationRemainingInSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationRemainingInSeconds, true
}

// SetDurationRemainingInSeconds sets field value
func (o *Bundle) SetDurationRemainingInSeconds(v int32) {
	o.DurationRemainingInSeconds = v
}

// GetID returns the ID field value
func (o *Bundle) GetID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ID
}

// GetIDOk returns a tuple with the ID field value
// and a boolean to check if the value has been set.
func (o *Bundle) GetIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ID, true
}

// SetID sets field value
func (o *Bundle) SetID(v string) {
	o.ID = v
}

// GetItems returns the Items field value
func (o *Bundle) GetItems() []BundleItem {
	if o == nil {
		var ret []BundleItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *Bundle) GetItemsOk() ([]BundleItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *Bundle) SetItems(v []BundleItem) {
	o.Items = v
}

// GetTotalDiscountPercent returns the TotalDiscountPercent field value
func (o *Bundle) GetTotalDiscountPercent() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalDiscountPercent
}

// GetTotalDiscountPercentOk returns a tuple with the TotalDiscountPercent field value
// and a boolean to check if the value has been set.
func (o *Bundle) GetTotalDiscountPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDiscountPercent, true
}

// SetTotalDiscountPercent sets field value
func (o *Bundle) SetTotalDiscountPercent(v float32) {
	o.TotalDiscountPercent = v
}

// GetWholesaleOnly returns the WholesaleOnly field value
func (o *Bundle) GetWholesaleOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WholesaleOnly
}

// GetWholesaleOnlyOk returns a tuple with the WholesaleOnly field value
// and a boolean to check if the value has been set.
func (o *Bundle) GetWholesaleOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WholesaleOnly, true
}

// SetWholesaleOnly sets field value
func (o *Bundle) SetWholesaleOnly(v bool) {
	o.WholesaleOnly = v
}

func (o Bundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CurrencyID"] = o.CurrencyID
	toSerialize["DataAssetID"] = o.DataAssetID
	toSerialize["DurationRemainingInSeconds"] = o.DurationRemainingInSeconds
	toSerialize["ID"] = o.ID
	toSerialize["Items"] = o.Items
	toSerialize["TotalDiscountPercent"] = o.TotalDiscountPercent
	toSerialize["WholesaleOnly"] = o.WholesaleOnly
	return toSerialize, nil
}

func (o *Bundle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CurrencyID",
		"DataAssetID",
		"DurationRemainingInSeconds",
		"ID",
		"Items",
		"TotalDiscountPercent",
		"WholesaleOnly",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBundle := _Bundle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBundle)

	if err != nil {
		return err
	}

	*o = Bundle(varBundle)

	return err
}

type NullableBundle struct {
	value *Bundle
	isSet bool
}

func (v NullableBundle) Get() *Bundle {
	return v.value
}

func (v *NullableBundle) Set(val *Bundle) {
	v.value = val
	v.isSet = true
}

func (v NullableBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundle(val *Bundle) *NullableBundle {
	return &NullableBundle{value: val, isSet: true}
}

func (v NullableBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


