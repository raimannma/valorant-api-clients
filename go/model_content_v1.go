/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentV1{}

// ContentV1 struct for ContentV1
type ContentV1 struct {
	Acts []ContentItem `json:"acts"`
	Ceremonies []ContentItem `json:"ceremonies"`
	Characters []ContentItem `json:"characters"`
	CharmLevels []ContentItem `json:"charmLevels"`
	Charms []ContentItem `json:"charms"`
	Chromas []ContentItem `json:"chromas"`
	Equips []ContentItem `json:"equips"`
	GameModes []ContentItem `json:"gameModes"`
	Maps []ContentItem `json:"maps"`
	PlayerCards []ContentItem `json:"playerCards"`
	PlayerTitles []ContentItem `json:"playerTitles"`
	SkinLevels []ContentItem `json:"skinLevels"`
	Skins []ContentItem `json:"skins"`
	SprayLevels []ContentItem `json:"sprayLevels"`
	Sprays []ContentItem `json:"sprays"`
	Version string `json:"version"`
}

type _ContentV1 ContentV1

// NewContentV1 instantiates a new ContentV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentV1(acts []ContentItem, ceremonies []ContentItem, characters []ContentItem, charmLevels []ContentItem, charms []ContentItem, chromas []ContentItem, equips []ContentItem, gameModes []ContentItem, maps []ContentItem, playerCards []ContentItem, playerTitles []ContentItem, skinLevels []ContentItem, skins []ContentItem, sprayLevels []ContentItem, sprays []ContentItem, version string) *ContentV1 {
	this := ContentV1{}
	this.Acts = acts
	this.Ceremonies = ceremonies
	this.Characters = characters
	this.CharmLevels = charmLevels
	this.Charms = charms
	this.Chromas = chromas
	this.Equips = equips
	this.GameModes = gameModes
	this.Maps = maps
	this.PlayerCards = playerCards
	this.PlayerTitles = playerTitles
	this.SkinLevels = skinLevels
	this.Skins = skins
	this.SprayLevels = sprayLevels
	this.Sprays = sprays
	this.Version = version
	return &this
}

// NewContentV1WithDefaults instantiates a new ContentV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentV1WithDefaults() *ContentV1 {
	this := ContentV1{}
	return &this
}

// GetActs returns the Acts field value
func (o *ContentV1) GetActs() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Acts
}

// GetActsOk returns a tuple with the Acts field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetActsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Acts, true
}

// SetActs sets field value
func (o *ContentV1) SetActs(v []ContentItem) {
	o.Acts = v
}

// GetCeremonies returns the Ceremonies field value
func (o *ContentV1) GetCeremonies() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Ceremonies
}

// GetCeremoniesOk returns a tuple with the Ceremonies field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetCeremoniesOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ceremonies, true
}

// SetCeremonies sets field value
func (o *ContentV1) SetCeremonies(v []ContentItem) {
	o.Ceremonies = v
}

// GetCharacters returns the Characters field value
func (o *ContentV1) GetCharacters() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Characters
}

// GetCharactersOk returns a tuple with the Characters field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetCharactersOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Characters, true
}

// SetCharacters sets field value
func (o *ContentV1) SetCharacters(v []ContentItem) {
	o.Characters = v
}

// GetCharmLevels returns the CharmLevels field value
func (o *ContentV1) GetCharmLevels() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.CharmLevels
}

// GetCharmLevelsOk returns a tuple with the CharmLevels field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetCharmLevelsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.CharmLevels, true
}

// SetCharmLevels sets field value
func (o *ContentV1) SetCharmLevels(v []ContentItem) {
	o.CharmLevels = v
}

// GetCharms returns the Charms field value
func (o *ContentV1) GetCharms() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Charms
}

// GetCharmsOk returns a tuple with the Charms field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetCharmsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Charms, true
}

// SetCharms sets field value
func (o *ContentV1) SetCharms(v []ContentItem) {
	o.Charms = v
}

// GetChromas returns the Chromas field value
func (o *ContentV1) GetChromas() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Chromas
}

// GetChromasOk returns a tuple with the Chromas field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetChromasOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Chromas, true
}

// SetChromas sets field value
func (o *ContentV1) SetChromas(v []ContentItem) {
	o.Chromas = v
}

// GetEquips returns the Equips field value
func (o *ContentV1) GetEquips() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Equips
}

// GetEquipsOk returns a tuple with the Equips field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetEquipsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Equips, true
}

// SetEquips sets field value
func (o *ContentV1) SetEquips(v []ContentItem) {
	o.Equips = v
}

// GetGameModes returns the GameModes field value
func (o *ContentV1) GetGameModes() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.GameModes
}

// GetGameModesOk returns a tuple with the GameModes field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetGameModesOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.GameModes, true
}

// SetGameModes sets field value
func (o *ContentV1) SetGameModes(v []ContentItem) {
	o.GameModes = v
}

// GetMaps returns the Maps field value
func (o *ContentV1) GetMaps() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Maps
}

// GetMapsOk returns a tuple with the Maps field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetMapsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Maps, true
}

// SetMaps sets field value
func (o *ContentV1) SetMaps(v []ContentItem) {
	o.Maps = v
}

// GetPlayerCards returns the PlayerCards field value
func (o *ContentV1) GetPlayerCards() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.PlayerCards
}

// GetPlayerCardsOk returns a tuple with the PlayerCards field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetPlayerCardsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayerCards, true
}

// SetPlayerCards sets field value
func (o *ContentV1) SetPlayerCards(v []ContentItem) {
	o.PlayerCards = v
}

// GetPlayerTitles returns the PlayerTitles field value
func (o *ContentV1) GetPlayerTitles() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.PlayerTitles
}

// GetPlayerTitlesOk returns a tuple with the PlayerTitles field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetPlayerTitlesOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayerTitles, true
}

// SetPlayerTitles sets field value
func (o *ContentV1) SetPlayerTitles(v []ContentItem) {
	o.PlayerTitles = v
}

// GetSkinLevels returns the SkinLevels field value
func (o *ContentV1) GetSkinLevels() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.SkinLevels
}

// GetSkinLevelsOk returns a tuple with the SkinLevels field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetSkinLevelsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkinLevels, true
}

// SetSkinLevels sets field value
func (o *ContentV1) SetSkinLevels(v []ContentItem) {
	o.SkinLevels = v
}

// GetSkins returns the Skins field value
func (o *ContentV1) GetSkins() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Skins
}

// GetSkinsOk returns a tuple with the Skins field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetSkinsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Skins, true
}

// SetSkins sets field value
func (o *ContentV1) SetSkins(v []ContentItem) {
	o.Skins = v
}

// GetSprayLevels returns the SprayLevels field value
func (o *ContentV1) GetSprayLevels() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.SprayLevels
}

// GetSprayLevelsOk returns a tuple with the SprayLevels field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetSprayLevelsOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.SprayLevels, true
}

// SetSprayLevels sets field value
func (o *ContentV1) SetSprayLevels(v []ContentItem) {
	o.SprayLevels = v
}

// GetSprays returns the Sprays field value
func (o *ContentV1) GetSprays() []ContentItem {
	if o == nil {
		var ret []ContentItem
		return ret
	}

	return o.Sprays
}

// GetSpraysOk returns a tuple with the Sprays field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetSpraysOk() ([]ContentItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sprays, true
}

// SetSprays sets field value
func (o *ContentV1) SetSprays(v []ContentItem) {
	o.Sprays = v
}

// GetVersion returns the Version field value
func (o *ContentV1) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ContentV1) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ContentV1) SetVersion(v string) {
	o.Version = v
}

func (o ContentV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["acts"] = o.Acts
	toSerialize["ceremonies"] = o.Ceremonies
	toSerialize["characters"] = o.Characters
	toSerialize["charmLevels"] = o.CharmLevels
	toSerialize["charms"] = o.Charms
	toSerialize["chromas"] = o.Chromas
	toSerialize["equips"] = o.Equips
	toSerialize["gameModes"] = o.GameModes
	toSerialize["maps"] = o.Maps
	toSerialize["playerCards"] = o.PlayerCards
	toSerialize["playerTitles"] = o.PlayerTitles
	toSerialize["skinLevels"] = o.SkinLevels
	toSerialize["skins"] = o.Skins
	toSerialize["sprayLevels"] = o.SprayLevels
	toSerialize["sprays"] = o.Sprays
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ContentV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"acts",
		"ceremonies",
		"characters",
		"charmLevels",
		"charms",
		"chromas",
		"equips",
		"gameModes",
		"maps",
		"playerCards",
		"playerTitles",
		"skinLevels",
		"skins",
		"sprayLevels",
		"sprays",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentV1 := _ContentV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentV1)

	if err != nil {
		return err
	}

	*o = ContentV1(varContentV1)

	return err
}

type NullableContentV1 struct {
	value *ContentV1
	isSet bool
}

func (v NullableContentV1) Get() *ContentV1 {
	return v.value
}

func (v *NullableContentV1) Set(val *ContentV1) {
	v.value = val
	v.isSet = true
}

func (v NullableContentV1) IsSet() bool {
	return v.isSet
}

func (v *NullableContentV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentV1(val *ContentV1) *NullableContentV1 {
	return &NullableContentV1{value: val, isSet: true}
}

func (v NullableContentV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


