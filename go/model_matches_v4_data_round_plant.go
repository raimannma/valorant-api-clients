/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRoundPlant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRoundPlant{}

// MatchesV4DataRoundPlant struct for MatchesV4DataRoundPlant
type MatchesV4DataRoundPlant struct {
	Location MatchesV4DataRoundLocation `json:"location"`
	Player MatchesV4DataRoundPlayer `json:"player"`
	PlayerLocations []MatchesV4DataRoundPlayerLocations `json:"player_locations"`
	RoundTimeInMs int32 `json:"round_time_in_ms"`
	Site string `json:"site"`
}

type _MatchesV4DataRoundPlant MatchesV4DataRoundPlant

// NewMatchesV4DataRoundPlant instantiates a new MatchesV4DataRoundPlant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRoundPlant(location MatchesV4DataRoundLocation, player MatchesV4DataRoundPlayer, playerLocations []MatchesV4DataRoundPlayerLocations, roundTimeInMs int32, site string) *MatchesV4DataRoundPlant {
	this := MatchesV4DataRoundPlant{}
	this.Location = location
	this.Player = player
	this.PlayerLocations = playerLocations
	this.RoundTimeInMs = roundTimeInMs
	this.Site = site
	return &this
}

// NewMatchesV4DataRoundPlantWithDefaults instantiates a new MatchesV4DataRoundPlant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundPlantWithDefaults() *MatchesV4DataRoundPlant {
	this := MatchesV4DataRoundPlant{}
	return &this
}

// GetLocation returns the Location field value
func (o *MatchesV4DataRoundPlant) GetLocation() MatchesV4DataRoundLocation {
	if o == nil {
		var ret MatchesV4DataRoundLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlant) GetLocationOk() (*MatchesV4DataRoundLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *MatchesV4DataRoundPlant) SetLocation(v MatchesV4DataRoundLocation) {
	o.Location = v
}

// GetPlayer returns the Player field value
func (o *MatchesV4DataRoundPlant) GetPlayer() MatchesV4DataRoundPlayer {
	if o == nil {
		var ret MatchesV4DataRoundPlayer
		return ret
	}

	return o.Player
}

// GetPlayerOk returns a tuple with the Player field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlant) GetPlayerOk() (*MatchesV4DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Player, true
}

// SetPlayer sets field value
func (o *MatchesV4DataRoundPlant) SetPlayer(v MatchesV4DataRoundPlayer) {
	o.Player = v
}

// GetPlayerLocations returns the PlayerLocations field value
func (o *MatchesV4DataRoundPlant) GetPlayerLocations() []MatchesV4DataRoundPlayerLocations {
	if o == nil {
		var ret []MatchesV4DataRoundPlayerLocations
		return ret
	}

	return o.PlayerLocations
}

// GetPlayerLocationsOk returns a tuple with the PlayerLocations field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlant) GetPlayerLocationsOk() ([]MatchesV4DataRoundPlayerLocations, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayerLocations, true
}

// SetPlayerLocations sets field value
func (o *MatchesV4DataRoundPlant) SetPlayerLocations(v []MatchesV4DataRoundPlayerLocations) {
	o.PlayerLocations = v
}

// GetRoundTimeInMs returns the RoundTimeInMs field value
func (o *MatchesV4DataRoundPlant) GetRoundTimeInMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RoundTimeInMs
}

// GetRoundTimeInMsOk returns a tuple with the RoundTimeInMs field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlant) GetRoundTimeInMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoundTimeInMs, true
}

// SetRoundTimeInMs sets field value
func (o *MatchesV4DataRoundPlant) SetRoundTimeInMs(v int32) {
	o.RoundTimeInMs = v
}

// GetSite returns the Site field value
func (o *MatchesV4DataRoundPlant) GetSite() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlant) GetSiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Site, true
}

// SetSite sets field value
func (o *MatchesV4DataRoundPlant) SetSite(v string) {
	o.Site = v
}

func (o MatchesV4DataRoundPlant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRoundPlant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["location"] = o.Location
	toSerialize["player"] = o.Player
	toSerialize["player_locations"] = o.PlayerLocations
	toSerialize["round_time_in_ms"] = o.RoundTimeInMs
	toSerialize["site"] = o.Site
	return toSerialize, nil
}

func (o *MatchesV4DataRoundPlant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
		"player",
		"player_locations",
		"round_time_in_ms",
		"site",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRoundPlant := _MatchesV4DataRoundPlant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRoundPlant)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRoundPlant(varMatchesV4DataRoundPlant)

	return err
}

type NullableMatchesV4DataRoundPlant struct {
	value *MatchesV4DataRoundPlant
	isSet bool
}

func (v NullableMatchesV4DataRoundPlant) Get() *MatchesV4DataRoundPlant {
	return v.value
}

func (v *NullableMatchesV4DataRoundPlant) Set(val *MatchesV4DataRoundPlant) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRoundPlant) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRoundPlant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRoundPlant(val *MatchesV4DataRoundPlant) *NullableMatchesV4DataRoundPlant {
	return &NullableMatchesV4DataRoundPlant{value: val, isSet: true}
}

func (v NullableMatchesV4DataRoundPlant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRoundPlant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


