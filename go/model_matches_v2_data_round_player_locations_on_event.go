/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataRoundPlayerLocationsOnEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataRoundPlayerLocationsOnEvent{}

// MatchesV2DataRoundPlayerLocationsOnEvent struct for MatchesV2DataRoundPlayerLocationsOnEvent
type MatchesV2DataRoundPlayerLocationsOnEvent struct {
	Location MatchesV2DataRoundEventLocation `json:"location"`
	PlayerDisplayName string `json:"player_display_name"`
	PlayerPuuid string `json:"player_puuid"`
	PlayerTeam string `json:"player_team"`
	ViewRadians float32 `json:"view_radians"`
}

type _MatchesV2DataRoundPlayerLocationsOnEvent MatchesV2DataRoundPlayerLocationsOnEvent

// NewMatchesV2DataRoundPlayerLocationsOnEvent instantiates a new MatchesV2DataRoundPlayerLocationsOnEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataRoundPlayerLocationsOnEvent(location MatchesV2DataRoundEventLocation, playerDisplayName string, playerPuuid string, playerTeam string, viewRadians float32) *MatchesV2DataRoundPlayerLocationsOnEvent {
	this := MatchesV2DataRoundPlayerLocationsOnEvent{}
	this.Location = location
	this.PlayerDisplayName = playerDisplayName
	this.PlayerPuuid = playerPuuid
	this.PlayerTeam = playerTeam
	this.ViewRadians = viewRadians
	return &this
}

// NewMatchesV2DataRoundPlayerLocationsOnEventWithDefaults instantiates a new MatchesV2DataRoundPlayerLocationsOnEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataRoundPlayerLocationsOnEventWithDefaults() *MatchesV2DataRoundPlayerLocationsOnEvent {
	this := MatchesV2DataRoundPlayerLocationsOnEvent{}
	return &this
}

// GetLocation returns the Location field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetLocation() MatchesV2DataRoundEventLocation {
	if o == nil {
		var ret MatchesV2DataRoundEventLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetLocationOk() (*MatchesV2DataRoundEventLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) SetLocation(v MatchesV2DataRoundEventLocation) {
	o.Location = v
}

// GetPlayerDisplayName returns the PlayerDisplayName field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetPlayerDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlayerDisplayName
}

// GetPlayerDisplayNameOk returns a tuple with the PlayerDisplayName field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetPlayerDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerDisplayName, true
}

// SetPlayerDisplayName sets field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) SetPlayerDisplayName(v string) {
	o.PlayerDisplayName = v
}

// GetPlayerPuuid returns the PlayerPuuid field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetPlayerPuuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlayerPuuid
}

// GetPlayerPuuidOk returns a tuple with the PlayerPuuid field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetPlayerPuuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerPuuid, true
}

// SetPlayerPuuid sets field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) SetPlayerPuuid(v string) {
	o.PlayerPuuid = v
}

// GetPlayerTeam returns the PlayerTeam field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetPlayerTeam() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlayerTeam
}

// GetPlayerTeamOk returns a tuple with the PlayerTeam field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetPlayerTeamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerTeam, true
}

// SetPlayerTeam sets field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) SetPlayerTeam(v string) {
	o.PlayerTeam = v
}

// GetViewRadians returns the ViewRadians field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetViewRadians() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ViewRadians
}

// GetViewRadiansOk returns a tuple with the ViewRadians field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) GetViewRadiansOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewRadians, true
}

// SetViewRadians sets field value
func (o *MatchesV2DataRoundPlayerLocationsOnEvent) SetViewRadians(v float32) {
	o.ViewRadians = v
}

func (o MatchesV2DataRoundPlayerLocationsOnEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataRoundPlayerLocationsOnEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["location"] = o.Location
	toSerialize["player_display_name"] = o.PlayerDisplayName
	toSerialize["player_puuid"] = o.PlayerPuuid
	toSerialize["player_team"] = o.PlayerTeam
	toSerialize["view_radians"] = o.ViewRadians
	return toSerialize, nil
}

func (o *MatchesV2DataRoundPlayerLocationsOnEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
		"player_display_name",
		"player_puuid",
		"player_team",
		"view_radians",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataRoundPlayerLocationsOnEvent := _MatchesV2DataRoundPlayerLocationsOnEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataRoundPlayerLocationsOnEvent)

	if err != nil {
		return err
	}

	*o = MatchesV2DataRoundPlayerLocationsOnEvent(varMatchesV2DataRoundPlayerLocationsOnEvent)

	return err
}

type NullableMatchesV2DataRoundPlayerLocationsOnEvent struct {
	value *MatchesV2DataRoundPlayerLocationsOnEvent
	isSet bool
}

func (v NullableMatchesV2DataRoundPlayerLocationsOnEvent) Get() *MatchesV2DataRoundPlayerLocationsOnEvent {
	return v.value
}

func (v *NullableMatchesV2DataRoundPlayerLocationsOnEvent) Set(val *MatchesV2DataRoundPlayerLocationsOnEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataRoundPlayerLocationsOnEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataRoundPlayerLocationsOnEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataRoundPlayerLocationsOnEvent(val *MatchesV2DataRoundPlayerLocationsOnEvent) *NullableMatchesV2DataRoundPlayerLocationsOnEvent {
	return &NullableMatchesV2DataRoundPlayerLocationsOnEvent{value: val, isSet: true}
}

func (v NullableMatchesV2DataRoundPlayerLocationsOnEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataRoundPlayerLocationsOnEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


