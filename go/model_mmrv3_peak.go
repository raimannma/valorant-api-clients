/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRV3Peak type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRV3Peak{}

// MMRV3Peak struct for MMRV3Peak
type MMRV3Peak struct {
	RankingSchema string `json:"ranking_schema"`
	Rr int32 `json:"rr"`
	Season SeasonIdShortCombo `json:"season"`
	Tier TierIdNameCombo `json:"tier"`
}

type _MMRV3Peak MMRV3Peak

// NewMMRV3Peak instantiates a new MMRV3Peak object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRV3Peak(rankingSchema string, rr int32, season SeasonIdShortCombo, tier TierIdNameCombo) *MMRV3Peak {
	this := MMRV3Peak{}
	this.RankingSchema = rankingSchema
	this.Rr = rr
	this.Season = season
	this.Tier = tier
	return &this
}

// NewMMRV3PeakWithDefaults instantiates a new MMRV3Peak object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRV3PeakWithDefaults() *MMRV3Peak {
	this := MMRV3Peak{}
	return &this
}

// GetRankingSchema returns the RankingSchema field value
func (o *MMRV3Peak) GetRankingSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RankingSchema
}

// GetRankingSchemaOk returns a tuple with the RankingSchema field value
// and a boolean to check if the value has been set.
func (o *MMRV3Peak) GetRankingSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RankingSchema, true
}

// SetRankingSchema sets field value
func (o *MMRV3Peak) SetRankingSchema(v string) {
	o.RankingSchema = v
}

// GetRr returns the Rr field value
func (o *MMRV3Peak) GetRr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rr
}

// GetRrOk returns a tuple with the Rr field value
// and a boolean to check if the value has been set.
func (o *MMRV3Peak) GetRrOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rr, true
}

// SetRr sets field value
func (o *MMRV3Peak) SetRr(v int32) {
	o.Rr = v
}

// GetSeason returns the Season field value
func (o *MMRV3Peak) GetSeason() SeasonIdShortCombo {
	if o == nil {
		var ret SeasonIdShortCombo
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *MMRV3Peak) GetSeasonOk() (*SeasonIdShortCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *MMRV3Peak) SetSeason(v SeasonIdShortCombo) {
	o.Season = v
}

// GetTier returns the Tier field value
func (o *MMRV3Peak) GetTier() TierIdNameCombo {
	if o == nil {
		var ret TierIdNameCombo
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *MMRV3Peak) GetTierOk() (*TierIdNameCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *MMRV3Peak) SetTier(v TierIdNameCombo) {
	o.Tier = v
}

func (o MMRV3Peak) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRV3Peak) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ranking_schema"] = o.RankingSchema
	toSerialize["rr"] = o.Rr
	toSerialize["season"] = o.Season
	toSerialize["tier"] = o.Tier
	return toSerialize, nil
}

func (o *MMRV3Peak) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ranking_schema",
		"rr",
		"season",
		"tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRV3Peak := _MMRV3Peak{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRV3Peak)

	if err != nil {
		return err
	}

	*o = MMRV3Peak(varMMRV3Peak)

	return err
}

type NullableMMRV3Peak struct {
	value *MMRV3Peak
	isSet bool
}

func (v NullableMMRV3Peak) Get() *MMRV3Peak {
	return v.value
}

func (v *NullableMMRV3Peak) Set(val *MMRV3Peak) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRV3Peak) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRV3Peak) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRV3Peak(val *MMRV3Peak) *NullableMMRV3Peak {
	return &NullableMMRV3Peak{value: val, isSet: true}
}

func (v NullableMMRV3Peak) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRV3Peak) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


