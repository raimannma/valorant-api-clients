/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV3ListResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV3ListResponseData{}

// MatchesV3ListResponseData struct for MatchesV3ListResponseData
type MatchesV3ListResponseData struct {
	Coaches []MatchesV2DataCoach `json:"coaches"`
	IsAvailable bool `json:"is_available"`
	Kills []MatchesV2DataKill `json:"kills"`
	Metadata NullableMatchesV2DataMetadata `json:"metadata,omitempty"`
	Observers []MatchesV2DataObserver `json:"observers"`
	Players NullableMatchesV2DataPlayers `json:"players,omitempty"`
	Rounds []MatchesV2DataRound `json:"rounds"`
	Teams NullableMatchesV2DataTeams `json:"teams,omitempty"`
}

type _MatchesV3ListResponseData MatchesV3ListResponseData

// NewMatchesV3ListResponseData instantiates a new MatchesV3ListResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV3ListResponseData(coaches []MatchesV2DataCoach, isAvailable bool, kills []MatchesV2DataKill, observers []MatchesV2DataObserver, rounds []MatchesV2DataRound) *MatchesV3ListResponseData {
	this := MatchesV3ListResponseData{}
	this.Coaches = coaches
	this.IsAvailable = isAvailable
	this.Kills = kills
	this.Observers = observers
	this.Rounds = rounds
	return &this
}

// NewMatchesV3ListResponseDataWithDefaults instantiates a new MatchesV3ListResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV3ListResponseDataWithDefaults() *MatchesV3ListResponseData {
	this := MatchesV3ListResponseData{}
	return &this
}

// GetCoaches returns the Coaches field value
func (o *MatchesV3ListResponseData) GetCoaches() []MatchesV2DataCoach {
	if o == nil {
		var ret []MatchesV2DataCoach
		return ret
	}

	return o.Coaches
}

// GetCoachesOk returns a tuple with the Coaches field value
// and a boolean to check if the value has been set.
func (o *MatchesV3ListResponseData) GetCoachesOk() ([]MatchesV2DataCoach, bool) {
	if o == nil {
		return nil, false
	}
	return o.Coaches, true
}

// SetCoaches sets field value
func (o *MatchesV3ListResponseData) SetCoaches(v []MatchesV2DataCoach) {
	o.Coaches = v
}

// GetIsAvailable returns the IsAvailable field value
func (o *MatchesV3ListResponseData) GetIsAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAvailable
}

// GetIsAvailableOk returns a tuple with the IsAvailable field value
// and a boolean to check if the value has been set.
func (o *MatchesV3ListResponseData) GetIsAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAvailable, true
}

// SetIsAvailable sets field value
func (o *MatchesV3ListResponseData) SetIsAvailable(v bool) {
	o.IsAvailable = v
}

// GetKills returns the Kills field value
func (o *MatchesV3ListResponseData) GetKills() []MatchesV2DataKill {
	if o == nil {
		var ret []MatchesV2DataKill
		return ret
	}

	return o.Kills
}

// GetKillsOk returns a tuple with the Kills field value
// and a boolean to check if the value has been set.
func (o *MatchesV3ListResponseData) GetKillsOk() ([]MatchesV2DataKill, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kills, true
}

// SetKills sets field value
func (o *MatchesV3ListResponseData) SetKills(v []MatchesV2DataKill) {
	o.Kills = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV3ListResponseData) GetMetadata() MatchesV2DataMetadata {
	if o == nil || IsNil(o.Metadata.Get()) {
		var ret MatchesV2DataMetadata
		return ret
	}
	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV3ListResponseData) GetMetadataOk() (*MatchesV2DataMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// HasMetadata returns a boolean if a field has been set.
func (o *MatchesV3ListResponseData) HasMetadata() bool {
	if o != nil && o.Metadata.IsSet() {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given NullableMatchesV2DataMetadata and assigns it to the Metadata field.
func (o *MatchesV3ListResponseData) SetMetadata(v MatchesV2DataMetadata) {
	o.Metadata.Set(&v)
}
// SetMetadataNil sets the value for Metadata to be an explicit nil
func (o *MatchesV3ListResponseData) SetMetadataNil() {
	o.Metadata.Set(nil)
}

// UnsetMetadata ensures that no value is present for Metadata, not even an explicit nil
func (o *MatchesV3ListResponseData) UnsetMetadata() {
	o.Metadata.Unset()
}

// GetObservers returns the Observers field value
func (o *MatchesV3ListResponseData) GetObservers() []MatchesV2DataObserver {
	if o == nil {
		var ret []MatchesV2DataObserver
		return ret
	}

	return o.Observers
}

// GetObserversOk returns a tuple with the Observers field value
// and a boolean to check if the value has been set.
func (o *MatchesV3ListResponseData) GetObserversOk() ([]MatchesV2DataObserver, bool) {
	if o == nil {
		return nil, false
	}
	return o.Observers, true
}

// SetObservers sets field value
func (o *MatchesV3ListResponseData) SetObservers(v []MatchesV2DataObserver) {
	o.Observers = v
}

// GetPlayers returns the Players field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV3ListResponseData) GetPlayers() MatchesV2DataPlayers {
	if o == nil || IsNil(o.Players.Get()) {
		var ret MatchesV2DataPlayers
		return ret
	}
	return *o.Players.Get()
}

// GetPlayersOk returns a tuple with the Players field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV3ListResponseData) GetPlayersOk() (*MatchesV2DataPlayers, bool) {
	if o == nil {
		return nil, false
	}
	return o.Players.Get(), o.Players.IsSet()
}

// HasPlayers returns a boolean if a field has been set.
func (o *MatchesV3ListResponseData) HasPlayers() bool {
	if o != nil && o.Players.IsSet() {
		return true
	}

	return false
}

// SetPlayers gets a reference to the given NullableMatchesV2DataPlayers and assigns it to the Players field.
func (o *MatchesV3ListResponseData) SetPlayers(v MatchesV2DataPlayers) {
	o.Players.Set(&v)
}
// SetPlayersNil sets the value for Players to be an explicit nil
func (o *MatchesV3ListResponseData) SetPlayersNil() {
	o.Players.Set(nil)
}

// UnsetPlayers ensures that no value is present for Players, not even an explicit nil
func (o *MatchesV3ListResponseData) UnsetPlayers() {
	o.Players.Unset()
}

// GetRounds returns the Rounds field value
func (o *MatchesV3ListResponseData) GetRounds() []MatchesV2DataRound {
	if o == nil {
		var ret []MatchesV2DataRound
		return ret
	}

	return o.Rounds
}

// GetRoundsOk returns a tuple with the Rounds field value
// and a boolean to check if the value has been set.
func (o *MatchesV3ListResponseData) GetRoundsOk() ([]MatchesV2DataRound, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rounds, true
}

// SetRounds sets field value
func (o *MatchesV3ListResponseData) SetRounds(v []MatchesV2DataRound) {
	o.Rounds = v
}

// GetTeams returns the Teams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV3ListResponseData) GetTeams() MatchesV2DataTeams {
	if o == nil || IsNil(o.Teams.Get()) {
		var ret MatchesV2DataTeams
		return ret
	}
	return *o.Teams.Get()
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV3ListResponseData) GetTeamsOk() (*MatchesV2DataTeams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Teams.Get(), o.Teams.IsSet()
}

// HasTeams returns a boolean if a field has been set.
func (o *MatchesV3ListResponseData) HasTeams() bool {
	if o != nil && o.Teams.IsSet() {
		return true
	}

	return false
}

// SetTeams gets a reference to the given NullableMatchesV2DataTeams and assigns it to the Teams field.
func (o *MatchesV3ListResponseData) SetTeams(v MatchesV2DataTeams) {
	o.Teams.Set(&v)
}
// SetTeamsNil sets the value for Teams to be an explicit nil
func (o *MatchesV3ListResponseData) SetTeamsNil() {
	o.Teams.Set(nil)
}

// UnsetTeams ensures that no value is present for Teams, not even an explicit nil
func (o *MatchesV3ListResponseData) UnsetTeams() {
	o.Teams.Unset()
}

func (o MatchesV3ListResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV3ListResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coaches"] = o.Coaches
	toSerialize["is_available"] = o.IsAvailable
	toSerialize["kills"] = o.Kills
	if o.Metadata.IsSet() {
		toSerialize["metadata"] = o.Metadata.Get()
	}
	toSerialize["observers"] = o.Observers
	if o.Players.IsSet() {
		toSerialize["players"] = o.Players.Get()
	}
	toSerialize["rounds"] = o.Rounds
	if o.Teams.IsSet() {
		toSerialize["teams"] = o.Teams.Get()
	}
	return toSerialize, nil
}

func (o *MatchesV3ListResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coaches",
		"is_available",
		"kills",
		"observers",
		"rounds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV3ListResponseData := _MatchesV3ListResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV3ListResponseData)

	if err != nil {
		return err
	}

	*o = MatchesV3ListResponseData(varMatchesV3ListResponseData)

	return err
}

type NullableMatchesV3ListResponseData struct {
	value *MatchesV3ListResponseData
	isSet bool
}

func (v NullableMatchesV3ListResponseData) Get() *MatchesV3ListResponseData {
	return v.value
}

func (v *NullableMatchesV3ListResponseData) Set(val *MatchesV3ListResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV3ListResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV3ListResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV3ListResponseData(val *MatchesV3ListResponseData) *NullableMatchesV3ListResponseData {
	return &NullableMatchesV3ListResponseData{value: val, isSet: true}
}

func (v NullableMatchesV3ListResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV3ListResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


