/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
)

// checks if the EsportsV1DataMatchGameType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsportsV1DataMatchGameType{}

// EsportsV1DataMatchGameType struct for EsportsV1DataMatchGameType
type EsportsV1DataMatchGameType struct {
	Count NullableInt32 `json:"count,omitempty"`
	Type NullableString `json:"type,omitempty"`
}

// NewEsportsV1DataMatchGameType instantiates a new EsportsV1DataMatchGameType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsportsV1DataMatchGameType() *EsportsV1DataMatchGameType {
	this := EsportsV1DataMatchGameType{}
	return &this
}

// NewEsportsV1DataMatchGameTypeWithDefaults instantiates a new EsportsV1DataMatchGameType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsportsV1DataMatchGameTypeWithDefaults() *EsportsV1DataMatchGameType {
	this := EsportsV1DataMatchGameType{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EsportsV1DataMatchGameType) GetCount() int32 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int32
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsportsV1DataMatchGameType) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *EsportsV1DataMatchGameType) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt32 and assigns it to the Count field.
func (o *EsportsV1DataMatchGameType) SetCount(v int32) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *EsportsV1DataMatchGameType) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *EsportsV1DataMatchGameType) UnsetCount() {
	o.Count.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EsportsV1DataMatchGameType) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsportsV1DataMatchGameType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *EsportsV1DataMatchGameType) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *EsportsV1DataMatchGameType) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *EsportsV1DataMatchGameType) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *EsportsV1DataMatchGameType) UnsetType() {
	o.Type.Unset()
}

func (o EsportsV1DataMatchGameType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsportsV1DataMatchGameType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableEsportsV1DataMatchGameType struct {
	value *EsportsV1DataMatchGameType
	isSet bool
}

func (v NullableEsportsV1DataMatchGameType) Get() *EsportsV1DataMatchGameType {
	return v.value
}

func (v *NullableEsportsV1DataMatchGameType) Set(val *EsportsV1DataMatchGameType) {
	v.value = val
	v.isSet = true
}

func (v NullableEsportsV1DataMatchGameType) IsSet() bool {
	return v.isSet
}

func (v *NullableEsportsV1DataMatchGameType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsportsV1DataMatchGameType(val *EsportsV1DataMatchGameType) *NullableEsportsV1DataMatchGameType {
	return &NullableEsportsV1DataMatchGameType{value: val, isSet: true}
}

func (v NullableEsportsV1DataMatchGameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsportsV1DataMatchGameType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


