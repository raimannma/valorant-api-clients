/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EsportsV1DataMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsportsV1DataMatch{}

// EsportsV1DataMatch struct for EsportsV1DataMatch
type EsportsV1DataMatch struct {
	GameType EsportsV1DataMatchGameType `json:"game_type"`
	Id NullableString `json:"id,omitempty"`
	Teams []EsportsV1DataMatchTeams `json:"teams"`
}

type _EsportsV1DataMatch EsportsV1DataMatch

// NewEsportsV1DataMatch instantiates a new EsportsV1DataMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsportsV1DataMatch(gameType EsportsV1DataMatchGameType, teams []EsportsV1DataMatchTeams) *EsportsV1DataMatch {
	this := EsportsV1DataMatch{}
	this.GameType = gameType
	this.Teams = teams
	return &this
}

// NewEsportsV1DataMatchWithDefaults instantiates a new EsportsV1DataMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsportsV1DataMatchWithDefaults() *EsportsV1DataMatch {
	this := EsportsV1DataMatch{}
	return &this
}

// GetGameType returns the GameType field value
func (o *EsportsV1DataMatch) GetGameType() EsportsV1DataMatchGameType {
	if o == nil {
		var ret EsportsV1DataMatchGameType
		return ret
	}

	return o.GameType
}

// GetGameTypeOk returns a tuple with the GameType field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatch) GetGameTypeOk() (*EsportsV1DataMatchGameType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameType, true
}

// SetGameType sets field value
func (o *EsportsV1DataMatch) SetGameType(v EsportsV1DataMatchGameType) {
	o.GameType = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EsportsV1DataMatch) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsportsV1DataMatch) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *EsportsV1DataMatch) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *EsportsV1DataMatch) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *EsportsV1DataMatch) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *EsportsV1DataMatch) UnsetId() {
	o.Id.Unset()
}

// GetTeams returns the Teams field value
func (o *EsportsV1DataMatch) GetTeams() []EsportsV1DataMatchTeams {
	if o == nil {
		var ret []EsportsV1DataMatchTeams
		return ret
	}

	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatch) GetTeamsOk() ([]EsportsV1DataMatchTeams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Teams, true
}

// SetTeams sets field value
func (o *EsportsV1DataMatch) SetTeams(v []EsportsV1DataMatchTeams) {
	o.Teams = v
}

func (o EsportsV1DataMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsportsV1DataMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["game_type"] = o.GameType
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["teams"] = o.Teams
	return toSerialize, nil
}

func (o *EsportsV1DataMatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"game_type",
		"teams",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEsportsV1DataMatch := _EsportsV1DataMatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEsportsV1DataMatch)

	if err != nil {
		return err
	}

	*o = EsportsV1DataMatch(varEsportsV1DataMatch)

	return err
}

type NullableEsportsV1DataMatch struct {
	value *EsportsV1DataMatch
	isSet bool
}

func (v NullableEsportsV1DataMatch) Get() *EsportsV1DataMatch {
	return v.value
}

func (v *NullableEsportsV1DataMatch) Set(val *EsportsV1DataMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableEsportsV1DataMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableEsportsV1DataMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsportsV1DataMatch(val *EsportsV1DataMatch) *NullableEsportsV1DataMatch {
	return &NullableEsportsV1DataMatch{value: val, isSet: true}
}

func (v NullableEsportsV1DataMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsportsV1DataMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


