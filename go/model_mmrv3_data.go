/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRV3Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRV3Data{}

// MMRV3Data struct for MMRV3Data
type MMRV3Data struct {
	Account MMRV3Account `json:"account"`
	Current MMRV3Current `json:"current"`
	Peak NullableMMRV3Peak `json:"peak,omitempty"`
	Seasonal []MMRV3Seasonal `json:"seasonal"`
}

type _MMRV3Data MMRV3Data

// NewMMRV3Data instantiates a new MMRV3Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRV3Data(account MMRV3Account, current MMRV3Current, seasonal []MMRV3Seasonal) *MMRV3Data {
	this := MMRV3Data{}
	this.Account = account
	this.Current = current
	this.Seasonal = seasonal
	return &this
}

// NewMMRV3DataWithDefaults instantiates a new MMRV3Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRV3DataWithDefaults() *MMRV3Data {
	this := MMRV3Data{}
	return &this
}

// GetAccount returns the Account field value
func (o *MMRV3Data) GetAccount() MMRV3Account {
	if o == nil {
		var ret MMRV3Account
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *MMRV3Data) GetAccountOk() (*MMRV3Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *MMRV3Data) SetAccount(v MMRV3Account) {
	o.Account = v
}

// GetCurrent returns the Current field value
func (o *MMRV3Data) GetCurrent() MMRV3Current {
	if o == nil {
		var ret MMRV3Current
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *MMRV3Data) GetCurrentOk() (*MMRV3Current, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *MMRV3Data) SetCurrent(v MMRV3Current) {
	o.Current = v
}

// GetPeak returns the Peak field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MMRV3Data) GetPeak() MMRV3Peak {
	if o == nil || IsNil(o.Peak.Get()) {
		var ret MMRV3Peak
		return ret
	}
	return *o.Peak.Get()
}

// GetPeakOk returns a tuple with the Peak field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MMRV3Data) GetPeakOk() (*MMRV3Peak, bool) {
	if o == nil {
		return nil, false
	}
	return o.Peak.Get(), o.Peak.IsSet()
}

// HasPeak returns a boolean if a field has been set.
func (o *MMRV3Data) HasPeak() bool {
	if o != nil && o.Peak.IsSet() {
		return true
	}

	return false
}

// SetPeak gets a reference to the given NullableMMRV3Peak and assigns it to the Peak field.
func (o *MMRV3Data) SetPeak(v MMRV3Peak) {
	o.Peak.Set(&v)
}
// SetPeakNil sets the value for Peak to be an explicit nil
func (o *MMRV3Data) SetPeakNil() {
	o.Peak.Set(nil)
}

// UnsetPeak ensures that no value is present for Peak, not even an explicit nil
func (o *MMRV3Data) UnsetPeak() {
	o.Peak.Unset()
}

// GetSeasonal returns the Seasonal field value
func (o *MMRV3Data) GetSeasonal() []MMRV3Seasonal {
	if o == nil {
		var ret []MMRV3Seasonal
		return ret
	}

	return o.Seasonal
}

// GetSeasonalOk returns a tuple with the Seasonal field value
// and a boolean to check if the value has been set.
func (o *MMRV3Data) GetSeasonalOk() ([]MMRV3Seasonal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Seasonal, true
}

// SetSeasonal sets field value
func (o *MMRV3Data) SetSeasonal(v []MMRV3Seasonal) {
	o.Seasonal = v
}

func (o MMRV3Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRV3Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account"] = o.Account
	toSerialize["current"] = o.Current
	if o.Peak.IsSet() {
		toSerialize["peak"] = o.Peak.Get()
	}
	toSerialize["seasonal"] = o.Seasonal
	return toSerialize, nil
}

func (o *MMRV3Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account",
		"current",
		"seasonal",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRV3Data := _MMRV3Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRV3Data)

	if err != nil {
		return err
	}

	*o = MMRV3Data(varMMRV3Data)

	return err
}

type NullableMMRV3Data struct {
	value *MMRV3Data
	isSet bool
}

func (v NullableMMRV3Data) Get() *MMRV3Data {
	return v.value
}

func (v *NullableMMRV3Data) Set(val *MMRV3Data) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRV3Data) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRV3Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRV3Data(val *MMRV3Data) *NullableMMRV3Data {
	return &NullableMMRV3Data{value: val, isSet: true}
}

func (v NullableMMRV3Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRV3Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


