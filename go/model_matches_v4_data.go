/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4Data{}

// MatchesV4Data struct for MatchesV4Data
type MatchesV4Data struct {
	Coaches []MatchesV4DataCoach `json:"coaches"`
	Kills []MatchesV4DataKill `json:"kills"`
	Metadata MatchesV4DataMetadata `json:"metadata"`
	Observers []MatchesV4DataObserver `json:"observers"`
	Players []MatchesV4DataPlayer `json:"players"`
	Rounds []MatchesV4DataRound `json:"rounds"`
	Teams []MatchesV4DataTeam `json:"teams"`
}

type _MatchesV4Data MatchesV4Data

// NewMatchesV4Data instantiates a new MatchesV4Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4Data(coaches []MatchesV4DataCoach, kills []MatchesV4DataKill, metadata MatchesV4DataMetadata, observers []MatchesV4DataObserver, players []MatchesV4DataPlayer, rounds []MatchesV4DataRound, teams []MatchesV4DataTeam) *MatchesV4Data {
	this := MatchesV4Data{}
	this.Coaches = coaches
	this.Kills = kills
	this.Metadata = metadata
	this.Observers = observers
	this.Players = players
	this.Rounds = rounds
	this.Teams = teams
	return &this
}

// NewMatchesV4DataWithDefaults instantiates a new MatchesV4Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataWithDefaults() *MatchesV4Data {
	this := MatchesV4Data{}
	return &this
}

// GetCoaches returns the Coaches field value
func (o *MatchesV4Data) GetCoaches() []MatchesV4DataCoach {
	if o == nil {
		var ret []MatchesV4DataCoach
		return ret
	}

	return o.Coaches
}

// GetCoachesOk returns a tuple with the Coaches field value
// and a boolean to check if the value has been set.
func (o *MatchesV4Data) GetCoachesOk() ([]MatchesV4DataCoach, bool) {
	if o == nil {
		return nil, false
	}
	return o.Coaches, true
}

// SetCoaches sets field value
func (o *MatchesV4Data) SetCoaches(v []MatchesV4DataCoach) {
	o.Coaches = v
}

// GetKills returns the Kills field value
func (o *MatchesV4Data) GetKills() []MatchesV4DataKill {
	if o == nil {
		var ret []MatchesV4DataKill
		return ret
	}

	return o.Kills
}

// GetKillsOk returns a tuple with the Kills field value
// and a boolean to check if the value has been set.
func (o *MatchesV4Data) GetKillsOk() ([]MatchesV4DataKill, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kills, true
}

// SetKills sets field value
func (o *MatchesV4Data) SetKills(v []MatchesV4DataKill) {
	o.Kills = v
}

// GetMetadata returns the Metadata field value
func (o *MatchesV4Data) GetMetadata() MatchesV4DataMetadata {
	if o == nil {
		var ret MatchesV4DataMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *MatchesV4Data) GetMetadataOk() (*MatchesV4DataMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *MatchesV4Data) SetMetadata(v MatchesV4DataMetadata) {
	o.Metadata = v
}

// GetObservers returns the Observers field value
func (o *MatchesV4Data) GetObservers() []MatchesV4DataObserver {
	if o == nil {
		var ret []MatchesV4DataObserver
		return ret
	}

	return o.Observers
}

// GetObserversOk returns a tuple with the Observers field value
// and a boolean to check if the value has been set.
func (o *MatchesV4Data) GetObserversOk() ([]MatchesV4DataObserver, bool) {
	if o == nil {
		return nil, false
	}
	return o.Observers, true
}

// SetObservers sets field value
func (o *MatchesV4Data) SetObservers(v []MatchesV4DataObserver) {
	o.Observers = v
}

// GetPlayers returns the Players field value
func (o *MatchesV4Data) GetPlayers() []MatchesV4DataPlayer {
	if o == nil {
		var ret []MatchesV4DataPlayer
		return ret
	}

	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value
// and a boolean to check if the value has been set.
func (o *MatchesV4Data) GetPlayersOk() ([]MatchesV4DataPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Players, true
}

// SetPlayers sets field value
func (o *MatchesV4Data) SetPlayers(v []MatchesV4DataPlayer) {
	o.Players = v
}

// GetRounds returns the Rounds field value
func (o *MatchesV4Data) GetRounds() []MatchesV4DataRound {
	if o == nil {
		var ret []MatchesV4DataRound
		return ret
	}

	return o.Rounds
}

// GetRoundsOk returns a tuple with the Rounds field value
// and a boolean to check if the value has been set.
func (o *MatchesV4Data) GetRoundsOk() ([]MatchesV4DataRound, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rounds, true
}

// SetRounds sets field value
func (o *MatchesV4Data) SetRounds(v []MatchesV4DataRound) {
	o.Rounds = v
}

// GetTeams returns the Teams field value
func (o *MatchesV4Data) GetTeams() []MatchesV4DataTeam {
	if o == nil {
		var ret []MatchesV4DataTeam
		return ret
	}

	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value
// and a boolean to check if the value has been set.
func (o *MatchesV4Data) GetTeamsOk() ([]MatchesV4DataTeam, bool) {
	if o == nil {
		return nil, false
	}
	return o.Teams, true
}

// SetTeams sets field value
func (o *MatchesV4Data) SetTeams(v []MatchesV4DataTeam) {
	o.Teams = v
}

func (o MatchesV4Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coaches"] = o.Coaches
	toSerialize["kills"] = o.Kills
	toSerialize["metadata"] = o.Metadata
	toSerialize["observers"] = o.Observers
	toSerialize["players"] = o.Players
	toSerialize["rounds"] = o.Rounds
	toSerialize["teams"] = o.Teams
	return toSerialize, nil
}

func (o *MatchesV4Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coaches",
		"kills",
		"metadata",
		"observers",
		"players",
		"rounds",
		"teams",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4Data := _MatchesV4Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4Data)

	if err != nil {
		return err
	}

	*o = MatchesV4Data(varMatchesV4Data)

	return err
}

type NullableMatchesV4Data struct {
	value *MatchesV4Data
	isSet bool
}

func (v NullableMatchesV4Data) Get() *MatchesV4Data {
	return v.value
}

func (v *NullableMatchesV4Data) Set(val *MatchesV4Data) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4Data) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4Data(val *MatchesV4Data) *NullableMatchesV4Data {
	return &NullableMatchesV4Data{value: val, isSet: true}
}

func (v NullableMatchesV4Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


