/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataObserver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataObserver{}

// MatchesV4DataObserver struct for MatchesV4DataObserver
type MatchesV4DataObserver struct {
	AccountLevel int32 `json:"account_level"`
	CardId string `json:"card_id"`
	Name string `json:"name"`
	PartyId string `json:"party_id"`
	Puuid string `json:"puuid"`
	SessionPlaytimeInMs int32 `json:"session_playtime_in_ms"`
	Tag string `json:"tag"`
	TitleId string `json:"title_id"`
}

type _MatchesV4DataObserver MatchesV4DataObserver

// NewMatchesV4DataObserver instantiates a new MatchesV4DataObserver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataObserver(accountLevel int32, cardId string, name string, partyId string, puuid string, sessionPlaytimeInMs int32, tag string, titleId string) *MatchesV4DataObserver {
	this := MatchesV4DataObserver{}
	this.AccountLevel = accountLevel
	this.CardId = cardId
	this.Name = name
	this.PartyId = partyId
	this.Puuid = puuid
	this.SessionPlaytimeInMs = sessionPlaytimeInMs
	this.Tag = tag
	this.TitleId = titleId
	return &this
}

// NewMatchesV4DataObserverWithDefaults instantiates a new MatchesV4DataObserver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataObserverWithDefaults() *MatchesV4DataObserver {
	this := MatchesV4DataObserver{}
	return &this
}

// GetAccountLevel returns the AccountLevel field value
func (o *MatchesV4DataObserver) GetAccountLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountLevel
}

// GetAccountLevelOk returns a tuple with the AccountLevel field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetAccountLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountLevel, true
}

// SetAccountLevel sets field value
func (o *MatchesV4DataObserver) SetAccountLevel(v int32) {
	o.AccountLevel = v
}

// GetCardId returns the CardId field value
func (o *MatchesV4DataObserver) GetCardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetCardIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardId, true
}

// SetCardId sets field value
func (o *MatchesV4DataObserver) SetCardId(v string) {
	o.CardId = v
}

// GetName returns the Name field value
func (o *MatchesV4DataObserver) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MatchesV4DataObserver) SetName(v string) {
	o.Name = v
}

// GetPartyId returns the PartyId field value
func (o *MatchesV4DataObserver) GetPartyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartyId
}

// GetPartyIdOk returns a tuple with the PartyId field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetPartyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartyId, true
}

// SetPartyId sets field value
func (o *MatchesV4DataObserver) SetPartyId(v string) {
	o.PartyId = v
}

// GetPuuid returns the Puuid field value
func (o *MatchesV4DataObserver) GetPuuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Puuid
}

// GetPuuidOk returns a tuple with the Puuid field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetPuuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Puuid, true
}

// SetPuuid sets field value
func (o *MatchesV4DataObserver) SetPuuid(v string) {
	o.Puuid = v
}

// GetSessionPlaytimeInMs returns the SessionPlaytimeInMs field value
func (o *MatchesV4DataObserver) GetSessionPlaytimeInMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SessionPlaytimeInMs
}

// GetSessionPlaytimeInMsOk returns a tuple with the SessionPlaytimeInMs field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetSessionPlaytimeInMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionPlaytimeInMs, true
}

// SetSessionPlaytimeInMs sets field value
func (o *MatchesV4DataObserver) SetSessionPlaytimeInMs(v int32) {
	o.SessionPlaytimeInMs = v
}

// GetTag returns the Tag field value
func (o *MatchesV4DataObserver) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *MatchesV4DataObserver) SetTag(v string) {
	o.Tag = v
}

// GetTitleId returns the TitleId field value
func (o *MatchesV4DataObserver) GetTitleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TitleId
}

// GetTitleIdOk returns a tuple with the TitleId field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataObserver) GetTitleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TitleId, true
}

// SetTitleId sets field value
func (o *MatchesV4DataObserver) SetTitleId(v string) {
	o.TitleId = v
}

func (o MatchesV4DataObserver) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataObserver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_level"] = o.AccountLevel
	toSerialize["card_id"] = o.CardId
	toSerialize["name"] = o.Name
	toSerialize["party_id"] = o.PartyId
	toSerialize["puuid"] = o.Puuid
	toSerialize["session_playtime_in_ms"] = o.SessionPlaytimeInMs
	toSerialize["tag"] = o.Tag
	toSerialize["title_id"] = o.TitleId
	return toSerialize, nil
}

func (o *MatchesV4DataObserver) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_level",
		"card_id",
		"name",
		"party_id",
		"puuid",
		"session_playtime_in_ms",
		"tag",
		"title_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataObserver := _MatchesV4DataObserver{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataObserver)

	if err != nil {
		return err
	}

	*o = MatchesV4DataObserver(varMatchesV4DataObserver)

	return err
}

type NullableMatchesV4DataObserver struct {
	value *MatchesV4DataObserver
	isSet bool
}

func (v NullableMatchesV4DataObserver) Get() *MatchesV4DataObserver {
	return v.value
}

func (v *NullableMatchesV4DataObserver) Set(val *MatchesV4DataObserver) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataObserver) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataObserver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataObserver(val *MatchesV4DataObserver) *NullableMatchesV4DataObserver {
	return &NullableMatchesV4DataObserver{value: val, isSet: true}
}

func (v NullableMatchesV4DataObserver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataObserver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


