/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataPlayerStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayerStats{}

// MatchesV2DataPlayerStats struct for MatchesV2DataPlayerStats
type MatchesV2DataPlayerStats struct {
	Assists int32 `json:"assists"`
	Bodyshots int32 `json:"bodyshots"`
	Deaths int32 `json:"deaths"`
	Headshots int32 `json:"headshots"`
	Kills int32 `json:"kills"`
	Legshots int32 `json:"legshots"`
	Score int32 `json:"score"`
}

type _MatchesV2DataPlayerStats MatchesV2DataPlayerStats

// NewMatchesV2DataPlayerStats instantiates a new MatchesV2DataPlayerStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayerStats(assists int32, bodyshots int32, deaths int32, headshots int32, kills int32, legshots int32, score int32) *MatchesV2DataPlayerStats {
	this := MatchesV2DataPlayerStats{}
	this.Assists = assists
	this.Bodyshots = bodyshots
	this.Deaths = deaths
	this.Headshots = headshots
	this.Kills = kills
	this.Legshots = legshots
	this.Score = score
	return &this
}

// NewMatchesV2DataPlayerStatsWithDefaults instantiates a new MatchesV2DataPlayerStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayerStatsWithDefaults() *MatchesV2DataPlayerStats {
	this := MatchesV2DataPlayerStats{}
	return &this
}

// GetAssists returns the Assists field value
func (o *MatchesV2DataPlayerStats) GetAssists() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Assists
}

// GetAssistsOk returns a tuple with the Assists field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerStats) GetAssistsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assists, true
}

// SetAssists sets field value
func (o *MatchesV2DataPlayerStats) SetAssists(v int32) {
	o.Assists = v
}

// GetBodyshots returns the Bodyshots field value
func (o *MatchesV2DataPlayerStats) GetBodyshots() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bodyshots
}

// GetBodyshotsOk returns a tuple with the Bodyshots field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerStats) GetBodyshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bodyshots, true
}

// SetBodyshots sets field value
func (o *MatchesV2DataPlayerStats) SetBodyshots(v int32) {
	o.Bodyshots = v
}

// GetDeaths returns the Deaths field value
func (o *MatchesV2DataPlayerStats) GetDeaths() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Deaths
}

// GetDeathsOk returns a tuple with the Deaths field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerStats) GetDeathsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deaths, true
}

// SetDeaths sets field value
func (o *MatchesV2DataPlayerStats) SetDeaths(v int32) {
	o.Deaths = v
}

// GetHeadshots returns the Headshots field value
func (o *MatchesV2DataPlayerStats) GetHeadshots() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Headshots
}

// GetHeadshotsOk returns a tuple with the Headshots field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerStats) GetHeadshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headshots, true
}

// SetHeadshots sets field value
func (o *MatchesV2DataPlayerStats) SetHeadshots(v int32) {
	o.Headshots = v
}

// GetKills returns the Kills field value
func (o *MatchesV2DataPlayerStats) GetKills() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Kills
}

// GetKillsOk returns a tuple with the Kills field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerStats) GetKillsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kills, true
}

// SetKills sets field value
func (o *MatchesV2DataPlayerStats) SetKills(v int32) {
	o.Kills = v
}

// GetLegshots returns the Legshots field value
func (o *MatchesV2DataPlayerStats) GetLegshots() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Legshots
}

// GetLegshotsOk returns a tuple with the Legshots field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerStats) GetLegshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Legshots, true
}

// SetLegshots sets field value
func (o *MatchesV2DataPlayerStats) SetLegshots(v int32) {
	o.Legshots = v
}

// GetScore returns the Score field value
func (o *MatchesV2DataPlayerStats) GetScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerStats) GetScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *MatchesV2DataPlayerStats) SetScore(v int32) {
	o.Score = v
}

func (o MatchesV2DataPlayerStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayerStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assists"] = o.Assists
	toSerialize["bodyshots"] = o.Bodyshots
	toSerialize["deaths"] = o.Deaths
	toSerialize["headshots"] = o.Headshots
	toSerialize["kills"] = o.Kills
	toSerialize["legshots"] = o.Legshots
	toSerialize["score"] = o.Score
	return toSerialize, nil
}

func (o *MatchesV2DataPlayerStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assists",
		"bodyshots",
		"deaths",
		"headshots",
		"kills",
		"legshots",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataPlayerStats := _MatchesV2DataPlayerStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataPlayerStats)

	if err != nil {
		return err
	}

	*o = MatchesV2DataPlayerStats(varMatchesV2DataPlayerStats)

	return err
}

type NullableMatchesV2DataPlayerStats struct {
	value *MatchesV2DataPlayerStats
	isSet bool
}

func (v NullableMatchesV2DataPlayerStats) Get() *MatchesV2DataPlayerStats {
	return v.value
}

func (v *NullableMatchesV2DataPlayerStats) Set(val *MatchesV2DataPlayerStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayerStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayerStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayerStats(val *MatchesV2DataPlayerStats) *NullableMatchesV2DataPlayerStats {
	return &NullableMatchesV2DataPlayerStats{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayerStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayerStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


