/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRV2HighestRank type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRV2HighestRank{}

// MMRV2HighestRank struct for MMRV2HighestRank
type MMRV2HighestRank struct {
	Old bool `json:"old"`
	PatchedTier string `json:"patched_tier"`
	Season string `json:"season"`
	Tier int32 `json:"tier"`
}

type _MMRV2HighestRank MMRV2HighestRank

// NewMMRV2HighestRank instantiates a new MMRV2HighestRank object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRV2HighestRank(old bool, patchedTier string, season string, tier int32) *MMRV2HighestRank {
	this := MMRV2HighestRank{}
	this.Old = old
	this.PatchedTier = patchedTier
	this.Season = season
	this.Tier = tier
	return &this
}

// NewMMRV2HighestRankWithDefaults instantiates a new MMRV2HighestRank object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRV2HighestRankWithDefaults() *MMRV2HighestRank {
	this := MMRV2HighestRank{}
	return &this
}

// GetOld returns the Old field value
func (o *MMRV2HighestRank) GetOld() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Old
}

// GetOldOk returns a tuple with the Old field value
// and a boolean to check if the value has been set.
func (o *MMRV2HighestRank) GetOldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Old, true
}

// SetOld sets field value
func (o *MMRV2HighestRank) SetOld(v bool) {
	o.Old = v
}

// GetPatchedTier returns the PatchedTier field value
func (o *MMRV2HighestRank) GetPatchedTier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PatchedTier
}

// GetPatchedTierOk returns a tuple with the PatchedTier field value
// and a boolean to check if the value has been set.
func (o *MMRV2HighestRank) GetPatchedTierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PatchedTier, true
}

// SetPatchedTier sets field value
func (o *MMRV2HighestRank) SetPatchedTier(v string) {
	o.PatchedTier = v
}

// GetSeason returns the Season field value
func (o *MMRV2HighestRank) GetSeason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *MMRV2HighestRank) GetSeasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *MMRV2HighestRank) SetSeason(v string) {
	o.Season = v
}

// GetTier returns the Tier field value
func (o *MMRV2HighestRank) GetTier() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *MMRV2HighestRank) GetTierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *MMRV2HighestRank) SetTier(v int32) {
	o.Tier = v
}

func (o MMRV2HighestRank) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRV2HighestRank) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["old"] = o.Old
	toSerialize["patched_tier"] = o.PatchedTier
	toSerialize["season"] = o.Season
	toSerialize["tier"] = o.Tier
	return toSerialize, nil
}

func (o *MMRV2HighestRank) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"old",
		"patched_tier",
		"season",
		"tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRV2HighestRank := _MMRV2HighestRank{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRV2HighestRank)

	if err != nil {
		return err
	}

	*o = MMRV2HighestRank(varMMRV2HighestRank)

	return err
}

type NullableMMRV2HighestRank struct {
	value *MMRV2HighestRank
	isSet bool
}

func (v NullableMMRV2HighestRank) Get() *MMRV2HighestRank {
	return v.value
}

func (v *NullableMMRV2HighestRank) Set(val *MMRV2HighestRank) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRV2HighestRank) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRV2HighestRank) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRV2HighestRank(val *MMRV2HighestRank) *NullableMMRV2HighestRank {
	return &NullableMMRV2HighestRank{value: val, isSet: true}
}

func (v NullableMMRV2HighestRank) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRV2HighestRank) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


