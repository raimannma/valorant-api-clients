/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRoundPlayerStatsStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRoundPlayerStatsStats{}

// MatchesV4DataRoundPlayerStatsStats struct for MatchesV4DataRoundPlayerStatsStats
type MatchesV4DataRoundPlayerStatsStats struct {
	Bodyshots int32 `json:"bodyshots"`
	Headshots int32 `json:"headshots"`
	Kills int32 `json:"kills"`
	Legshots int32 `json:"legshots"`
	Score int32 `json:"score"`
}

type _MatchesV4DataRoundPlayerStatsStats MatchesV4DataRoundPlayerStatsStats

// NewMatchesV4DataRoundPlayerStatsStats instantiates a new MatchesV4DataRoundPlayerStatsStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRoundPlayerStatsStats(bodyshots int32, headshots int32, kills int32, legshots int32, score int32) *MatchesV4DataRoundPlayerStatsStats {
	this := MatchesV4DataRoundPlayerStatsStats{}
	this.Bodyshots = bodyshots
	this.Headshots = headshots
	this.Kills = kills
	this.Legshots = legshots
	this.Score = score
	return &this
}

// NewMatchesV4DataRoundPlayerStatsStatsWithDefaults instantiates a new MatchesV4DataRoundPlayerStatsStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundPlayerStatsStatsWithDefaults() *MatchesV4DataRoundPlayerStatsStats {
	this := MatchesV4DataRoundPlayerStatsStats{}
	return &this
}

// GetBodyshots returns the Bodyshots field value
func (o *MatchesV4DataRoundPlayerStatsStats) GetBodyshots() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bodyshots
}

// GetBodyshotsOk returns a tuple with the Bodyshots field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsStats) GetBodyshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bodyshots, true
}

// SetBodyshots sets field value
func (o *MatchesV4DataRoundPlayerStatsStats) SetBodyshots(v int32) {
	o.Bodyshots = v
}

// GetHeadshots returns the Headshots field value
func (o *MatchesV4DataRoundPlayerStatsStats) GetHeadshots() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Headshots
}

// GetHeadshotsOk returns a tuple with the Headshots field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsStats) GetHeadshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headshots, true
}

// SetHeadshots sets field value
func (o *MatchesV4DataRoundPlayerStatsStats) SetHeadshots(v int32) {
	o.Headshots = v
}

// GetKills returns the Kills field value
func (o *MatchesV4DataRoundPlayerStatsStats) GetKills() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Kills
}

// GetKillsOk returns a tuple with the Kills field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsStats) GetKillsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kills, true
}

// SetKills sets field value
func (o *MatchesV4DataRoundPlayerStatsStats) SetKills(v int32) {
	o.Kills = v
}

// GetLegshots returns the Legshots field value
func (o *MatchesV4DataRoundPlayerStatsStats) GetLegshots() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Legshots
}

// GetLegshotsOk returns a tuple with the Legshots field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsStats) GetLegshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Legshots, true
}

// SetLegshots sets field value
func (o *MatchesV4DataRoundPlayerStatsStats) SetLegshots(v int32) {
	o.Legshots = v
}

// GetScore returns the Score field value
func (o *MatchesV4DataRoundPlayerStatsStats) GetScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStatsStats) GetScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *MatchesV4DataRoundPlayerStatsStats) SetScore(v int32) {
	o.Score = v
}

func (o MatchesV4DataRoundPlayerStatsStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRoundPlayerStatsStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bodyshots"] = o.Bodyshots
	toSerialize["headshots"] = o.Headshots
	toSerialize["kills"] = o.Kills
	toSerialize["legshots"] = o.Legshots
	toSerialize["score"] = o.Score
	return toSerialize, nil
}

func (o *MatchesV4DataRoundPlayerStatsStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bodyshots",
		"headshots",
		"kills",
		"legshots",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRoundPlayerStatsStats := _MatchesV4DataRoundPlayerStatsStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRoundPlayerStatsStats)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRoundPlayerStatsStats(varMatchesV4DataRoundPlayerStatsStats)

	return err
}

type NullableMatchesV4DataRoundPlayerStatsStats struct {
	value *MatchesV4DataRoundPlayerStatsStats
	isSet bool
}

func (v NullableMatchesV4DataRoundPlayerStatsStats) Get() *MatchesV4DataRoundPlayerStatsStats {
	return v.value
}

func (v *NullableMatchesV4DataRoundPlayerStatsStats) Set(val *MatchesV4DataRoundPlayerStatsStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRoundPlayerStatsStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRoundPlayerStatsStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRoundPlayerStatsStats(val *MatchesV4DataRoundPlayerStatsStats) *NullableMatchesV4DataRoundPlayerStatsStats {
	return &NullableMatchesV4DataRoundPlayerStatsStats{value: val, isSet: true}
}

func (v NullableMatchesV4DataRoundPlayerStatsStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRoundPlayerStatsStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


