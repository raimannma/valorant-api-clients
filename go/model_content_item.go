/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentItem{}

// ContentItem struct for ContentItem
type ContentItem struct {
	AssetName string `json:"assetName"`
	Id NullableString `json:"id,omitempty"`
	LocalizedNames map[string]string `json:"localizedNames,omitempty"`
	Name string `json:"name"`
}

type _ContentItem ContentItem

// NewContentItem instantiates a new ContentItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentItem(assetName string, name string) *ContentItem {
	this := ContentItem{}
	this.AssetName = assetName
	this.Name = name
	return &this
}

// NewContentItemWithDefaults instantiates a new ContentItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentItemWithDefaults() *ContentItem {
	this := ContentItem{}
	return &this
}

// GetAssetName returns the AssetName field value
func (o *ContentItem) GetAssetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetName
}

// GetAssetNameOk returns a tuple with the AssetName field value
// and a boolean to check if the value has been set.
func (o *ContentItem) GetAssetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetName, true
}

// SetAssetName sets field value
func (o *ContentItem) SetAssetName(v string) {
	o.AssetName = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentItem) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ContentItem) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ContentItem) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ContentItem) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ContentItem) UnsetId() {
	o.Id.Unset()
}

// GetLocalizedNames returns the LocalizedNames field value if set, zero value otherwise.
func (o *ContentItem) GetLocalizedNames() map[string]string {
	if o == nil || IsNil(o.LocalizedNames) {
		var ret map[string]string
		return ret
	}
	return o.LocalizedNames
}

// GetLocalizedNamesOk returns a tuple with the LocalizedNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentItem) GetLocalizedNamesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.LocalizedNames) {
		return map[string]string{}, false
	}
	return o.LocalizedNames, true
}

// HasLocalizedNames returns a boolean if a field has been set.
func (o *ContentItem) HasLocalizedNames() bool {
	if o != nil && !IsNil(o.LocalizedNames) {
		return true
	}

	return false
}

// SetLocalizedNames gets a reference to the given map[string]string and assigns it to the LocalizedNames field.
func (o *ContentItem) SetLocalizedNames(v map[string]string) {
	o.LocalizedNames = v
}

// GetName returns the Name field value
func (o *ContentItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContentItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContentItem) SetName(v string) {
	o.Name = v
}

func (o ContentItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assetName"] = o.AssetName
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.LocalizedNames) {
		toSerialize["localizedNames"] = o.LocalizedNames
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *ContentItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetName",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentItem := _ContentItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentItem)

	if err != nil {
		return err
	}

	*o = ContentItem(varContentItem)

	return err
}

type NullableContentItem struct {
	value *ContentItem
	isSet bool
}

func (v NullableContentItem) Get() *ContentItem {
	return v.value
}

func (v *NullableContentItem) Set(val *ContentItem) {
	v.value = val
	v.isSet = true
}

func (v NullableContentItem) IsSet() bool {
	return v.isSet
}

func (v *NullableContentItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentItem(val *ContentItem) *NullableContentItem {
	return &NullableContentItem{value: val, isSet: true}
}

func (v NullableContentItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


