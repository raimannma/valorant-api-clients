/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
)

// checks if the MatchesV2DataPlayerBehaviorFriendlyFire type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayerBehaviorFriendlyFire{}

// MatchesV2DataPlayerBehaviorFriendlyFire struct for MatchesV2DataPlayerBehaviorFriendlyFire
type MatchesV2DataPlayerBehaviorFriendlyFire struct {
	Incoming NullableFloat32 `json:"incoming,omitempty"`
	Outgoing NullableFloat32 `json:"outgoing,omitempty"`
}

// NewMatchesV2DataPlayerBehaviorFriendlyFire instantiates a new MatchesV2DataPlayerBehaviorFriendlyFire object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayerBehaviorFriendlyFire() *MatchesV2DataPlayerBehaviorFriendlyFire {
	this := MatchesV2DataPlayerBehaviorFriendlyFire{}
	return &this
}

// NewMatchesV2DataPlayerBehaviorFriendlyFireWithDefaults instantiates a new MatchesV2DataPlayerBehaviorFriendlyFire object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayerBehaviorFriendlyFireWithDefaults() *MatchesV2DataPlayerBehaviorFriendlyFire {
	this := MatchesV2DataPlayerBehaviorFriendlyFire{}
	return &this
}

// GetIncoming returns the Incoming field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) GetIncoming() float32 {
	if o == nil || IsNil(o.Incoming.Get()) {
		var ret float32
		return ret
	}
	return *o.Incoming.Get()
}

// GetIncomingOk returns a tuple with the Incoming field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) GetIncomingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Incoming.Get(), o.Incoming.IsSet()
}

// HasIncoming returns a boolean if a field has been set.
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) HasIncoming() bool {
	if o != nil && o.Incoming.IsSet() {
		return true
	}

	return false
}

// SetIncoming gets a reference to the given NullableFloat32 and assigns it to the Incoming field.
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) SetIncoming(v float32) {
	o.Incoming.Set(&v)
}
// SetIncomingNil sets the value for Incoming to be an explicit nil
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) SetIncomingNil() {
	o.Incoming.Set(nil)
}

// UnsetIncoming ensures that no value is present for Incoming, not even an explicit nil
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) UnsetIncoming() {
	o.Incoming.Unset()
}

// GetOutgoing returns the Outgoing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) GetOutgoing() float32 {
	if o == nil || IsNil(o.Outgoing.Get()) {
		var ret float32
		return ret
	}
	return *o.Outgoing.Get()
}

// GetOutgoingOk returns a tuple with the Outgoing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) GetOutgoingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outgoing.Get(), o.Outgoing.IsSet()
}

// HasOutgoing returns a boolean if a field has been set.
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) HasOutgoing() bool {
	if o != nil && o.Outgoing.IsSet() {
		return true
	}

	return false
}

// SetOutgoing gets a reference to the given NullableFloat32 and assigns it to the Outgoing field.
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) SetOutgoing(v float32) {
	o.Outgoing.Set(&v)
}
// SetOutgoingNil sets the value for Outgoing to be an explicit nil
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) SetOutgoingNil() {
	o.Outgoing.Set(nil)
}

// UnsetOutgoing ensures that no value is present for Outgoing, not even an explicit nil
func (o *MatchesV2DataPlayerBehaviorFriendlyFire) UnsetOutgoing() {
	o.Outgoing.Unset()
}

func (o MatchesV2DataPlayerBehaviorFriendlyFire) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayerBehaviorFriendlyFire) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Incoming.IsSet() {
		toSerialize["incoming"] = o.Incoming.Get()
	}
	if o.Outgoing.IsSet() {
		toSerialize["outgoing"] = o.Outgoing.Get()
	}
	return toSerialize, nil
}

type NullableMatchesV2DataPlayerBehaviorFriendlyFire struct {
	value *MatchesV2DataPlayerBehaviorFriendlyFire
	isSet bool
}

func (v NullableMatchesV2DataPlayerBehaviorFriendlyFire) Get() *MatchesV2DataPlayerBehaviorFriendlyFire {
	return v.value
}

func (v *NullableMatchesV2DataPlayerBehaviorFriendlyFire) Set(val *MatchesV2DataPlayerBehaviorFriendlyFire) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayerBehaviorFriendlyFire) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayerBehaviorFriendlyFire) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayerBehaviorFriendlyFire(val *MatchesV2DataPlayerBehaviorFriendlyFire) *NullableMatchesV2DataPlayerBehaviorFriendlyFire {
	return &NullableMatchesV2DataPlayerBehaviorFriendlyFire{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayerBehaviorFriendlyFire) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayerBehaviorFriendlyFire) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


