/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawV1ErrorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawV1ErrorData{}

// RawV1ErrorData struct for RawV1ErrorData
type RawV1ErrorData struct {
	Code int32 `json:"code"`
	Error bool `json:"error"`
	Id string `json:"id"`
}

type _RawV1ErrorData RawV1ErrorData

// NewRawV1ErrorData instantiates a new RawV1ErrorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawV1ErrorData(code int32, error_ bool, id string) *RawV1ErrorData {
	this := RawV1ErrorData{}
	this.Code = code
	this.Error = error_
	this.Id = id
	return &this
}

// NewRawV1ErrorDataWithDefaults instantiates a new RawV1ErrorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawV1ErrorDataWithDefaults() *RawV1ErrorData {
	this := RawV1ErrorData{}
	return &this
}

// GetCode returns the Code field value
func (o *RawV1ErrorData) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *RawV1ErrorData) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RawV1ErrorData) SetCode(v int32) {
	o.Code = v
}

// GetError returns the Error field value
func (o *RawV1ErrorData) GetError() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *RawV1ErrorData) GetErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *RawV1ErrorData) SetError(v bool) {
	o.Error = v
}

// GetId returns the Id field value
func (o *RawV1ErrorData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RawV1ErrorData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RawV1ErrorData) SetId(v string) {
	o.Id = v
}

func (o RawV1ErrorData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawV1ErrorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["error"] = o.Error
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *RawV1ErrorData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"error",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawV1ErrorData := _RawV1ErrorData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawV1ErrorData)

	if err != nil {
		return err
	}

	*o = RawV1ErrorData(varRawV1ErrorData)

	return err
}

type NullableRawV1ErrorData struct {
	value *RawV1ErrorData
	isSet bool
}

func (v NullableRawV1ErrorData) Get() *RawV1ErrorData {
	return v.value
}

func (v *NullableRawV1ErrorData) Set(val *RawV1ErrorData) {
	v.value = val
	v.isSet = true
}

func (v NullableRawV1ErrorData) IsSet() bool {
	return v.isSet
}

func (v *NullableRawV1ErrorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawV1ErrorData(val *RawV1ErrorData) *NullableRawV1ErrorData {
	return &NullableRawV1ErrorData{value: val, isSet: true}
}

func (v NullableRawV1ErrorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawV1ErrorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


