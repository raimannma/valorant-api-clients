/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PremierTeamV1ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PremierTeamV1ResponseData{}

// PremierTeamV1ResponseData struct for PremierTeamV1ResponseData
type PremierTeamV1ResponseData struct {
	Customization PremierTeamV1ResponseDataCustomization `json:"customization"`
	Enrolled bool `json:"enrolled"`
	Id string `json:"id"`
	Member []PremierTeamMember `json:"member"`
	Name string `json:"name"`
	Placement PremierTeamV1ResponseDataPlacement `json:"placement"`
	Stats PremierTeamV1ResponseDataStats `json:"stats"`
	Tag string `json:"tag"`
}

type _PremierTeamV1ResponseData PremierTeamV1ResponseData

// NewPremierTeamV1ResponseData instantiates a new PremierTeamV1ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremierTeamV1ResponseData(customization PremierTeamV1ResponseDataCustomization, enrolled bool, id string, member []PremierTeamMember, name string, placement PremierTeamV1ResponseDataPlacement, stats PremierTeamV1ResponseDataStats, tag string) *PremierTeamV1ResponseData {
	this := PremierTeamV1ResponseData{}
	this.Customization = customization
	this.Enrolled = enrolled
	this.Id = id
	this.Member = member
	this.Name = name
	this.Placement = placement
	this.Stats = stats
	this.Tag = tag
	return &this
}

// NewPremierTeamV1ResponseDataWithDefaults instantiates a new PremierTeamV1ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremierTeamV1ResponseDataWithDefaults() *PremierTeamV1ResponseData {
	this := PremierTeamV1ResponseData{}
	return &this
}

// GetCustomization returns the Customization field value
func (o *PremierTeamV1ResponseData) GetCustomization() PremierTeamV1ResponseDataCustomization {
	if o == nil {
		var ret PremierTeamV1ResponseDataCustomization
		return ret
	}

	return o.Customization
}

// GetCustomizationOk returns a tuple with the Customization field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetCustomizationOk() (*PremierTeamV1ResponseDataCustomization, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customization, true
}

// SetCustomization sets field value
func (o *PremierTeamV1ResponseData) SetCustomization(v PremierTeamV1ResponseDataCustomization) {
	o.Customization = v
}

// GetEnrolled returns the Enrolled field value
func (o *PremierTeamV1ResponseData) GetEnrolled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enrolled
}

// GetEnrolledOk returns a tuple with the Enrolled field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetEnrolledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enrolled, true
}

// SetEnrolled sets field value
func (o *PremierTeamV1ResponseData) SetEnrolled(v bool) {
	o.Enrolled = v
}

// GetId returns the Id field value
func (o *PremierTeamV1ResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PremierTeamV1ResponseData) SetId(v string) {
	o.Id = v
}

// GetMember returns the Member field value
func (o *PremierTeamV1ResponseData) GetMember() []PremierTeamMember {
	if o == nil {
		var ret []PremierTeamMember
		return ret
	}

	return o.Member
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetMemberOk() ([]PremierTeamMember, bool) {
	if o == nil {
		return nil, false
	}
	return o.Member, true
}

// SetMember sets field value
func (o *PremierTeamV1ResponseData) SetMember(v []PremierTeamMember) {
	o.Member = v
}

// GetName returns the Name field value
func (o *PremierTeamV1ResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PremierTeamV1ResponseData) SetName(v string) {
	o.Name = v
}

// GetPlacement returns the Placement field value
func (o *PremierTeamV1ResponseData) GetPlacement() PremierTeamV1ResponseDataPlacement {
	if o == nil {
		var ret PremierTeamV1ResponseDataPlacement
		return ret
	}

	return o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetPlacementOk() (*PremierTeamV1ResponseDataPlacement, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Placement, true
}

// SetPlacement sets field value
func (o *PremierTeamV1ResponseData) SetPlacement(v PremierTeamV1ResponseDataPlacement) {
	o.Placement = v
}

// GetStats returns the Stats field value
func (o *PremierTeamV1ResponseData) GetStats() PremierTeamV1ResponseDataStats {
	if o == nil {
		var ret PremierTeamV1ResponseDataStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetStatsOk() (*PremierTeamV1ResponseDataStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *PremierTeamV1ResponseData) SetStats(v PremierTeamV1ResponseDataStats) {
	o.Stats = v
}

// GetTag returns the Tag field value
func (o *PremierTeamV1ResponseData) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseData) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *PremierTeamV1ResponseData) SetTag(v string) {
	o.Tag = v
}

func (o PremierTeamV1ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PremierTeamV1ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customization"] = o.Customization
	toSerialize["enrolled"] = o.Enrolled
	toSerialize["id"] = o.Id
	toSerialize["member"] = o.Member
	toSerialize["name"] = o.Name
	toSerialize["placement"] = o.Placement
	toSerialize["stats"] = o.Stats
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *PremierTeamV1ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customization",
		"enrolled",
		"id",
		"member",
		"name",
		"placement",
		"stats",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPremierTeamV1ResponseData := _PremierTeamV1ResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPremierTeamV1ResponseData)

	if err != nil {
		return err
	}

	*o = PremierTeamV1ResponseData(varPremierTeamV1ResponseData)

	return err
}

type NullablePremierTeamV1ResponseData struct {
	value *PremierTeamV1ResponseData
	isSet bool
}

func (v NullablePremierTeamV1ResponseData) Get() *PremierTeamV1ResponseData {
	return v.value
}

func (v *NullablePremierTeamV1ResponseData) Set(val *PremierTeamV1ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullablePremierTeamV1ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullablePremierTeamV1ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremierTeamV1ResponseData(val *PremierTeamV1ResponseData) *NullablePremierTeamV1ResponseData {
	return &NullablePremierTeamV1ResponseData{value: val, isSet: true}
}

func (v NullablePremierTeamV1ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremierTeamV1ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


