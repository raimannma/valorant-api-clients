/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EsportsV1DataLeague type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsportsV1DataLeague{}

// EsportsV1DataLeague struct for EsportsV1DataLeague
type EsportsV1DataLeague struct {
	Icon string `json:"icon"`
	Identifier string `json:"identifier"`
	Name string `json:"name"`
	Region string `json:"region"`
}

type _EsportsV1DataLeague EsportsV1DataLeague

// NewEsportsV1DataLeague instantiates a new EsportsV1DataLeague object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsportsV1DataLeague(icon string, identifier string, name string, region string) *EsportsV1DataLeague {
	this := EsportsV1DataLeague{}
	this.Icon = icon
	this.Identifier = identifier
	this.Name = name
	this.Region = region
	return &this
}

// NewEsportsV1DataLeagueWithDefaults instantiates a new EsportsV1DataLeague object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsportsV1DataLeagueWithDefaults() *EsportsV1DataLeague {
	this := EsportsV1DataLeague{}
	return &this
}

// GetIcon returns the Icon field value
func (o *EsportsV1DataLeague) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataLeague) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *EsportsV1DataLeague) SetIcon(v string) {
	o.Icon = v
}

// GetIdentifier returns the Identifier field value
func (o *EsportsV1DataLeague) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataLeague) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *EsportsV1DataLeague) SetIdentifier(v string) {
	o.Identifier = v
}

// GetName returns the Name field value
func (o *EsportsV1DataLeague) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataLeague) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EsportsV1DataLeague) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *EsportsV1DataLeague) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataLeague) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *EsportsV1DataLeague) SetRegion(v string) {
	o.Region = v
}

func (o EsportsV1DataLeague) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsportsV1DataLeague) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["icon"] = o.Icon
	toSerialize["identifier"] = o.Identifier
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

func (o *EsportsV1DataLeague) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"icon",
		"identifier",
		"name",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEsportsV1DataLeague := _EsportsV1DataLeague{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEsportsV1DataLeague)

	if err != nil {
		return err
	}

	*o = EsportsV1DataLeague(varEsportsV1DataLeague)

	return err
}

type NullableEsportsV1DataLeague struct {
	value *EsportsV1DataLeague
	isSet bool
}

func (v NullableEsportsV1DataLeague) Get() *EsportsV1DataLeague {
	return v.value
}

func (v *NullableEsportsV1DataLeague) Set(val *EsportsV1DataLeague) {
	v.value = val
	v.isSet = true
}

func (v NullableEsportsV1DataLeague) IsSet() bool {
	return v.isSet
}

func (v *NullableEsportsV1DataLeague) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsportsV1DataLeague(val *EsportsV1DataLeague) *NullableEsportsV1DataLeague {
	return &NullableEsportsV1DataLeague{value: val, isSet: true}
}

func (v NullableEsportsV1DataLeague) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsportsV1DataLeague) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


