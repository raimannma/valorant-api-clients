/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EsportsV1DataMatchTeams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsportsV1DataMatchTeams{}

// EsportsV1DataMatchTeams struct for EsportsV1DataMatchTeams
type EsportsV1DataMatchTeams struct {
	Code string `json:"code"`
	GameWins int32 `json:"game_wins"`
	HasWon bool `json:"has_won"`
	Icon string `json:"icon"`
	Name string `json:"name"`
	Record EsportsV1DataMatchTeamsRecord `json:"record"`
}

type _EsportsV1DataMatchTeams EsportsV1DataMatchTeams

// NewEsportsV1DataMatchTeams instantiates a new EsportsV1DataMatchTeams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsportsV1DataMatchTeams(code string, gameWins int32, hasWon bool, icon string, name string, record EsportsV1DataMatchTeamsRecord) *EsportsV1DataMatchTeams {
	this := EsportsV1DataMatchTeams{}
	this.Code = code
	this.GameWins = gameWins
	this.HasWon = hasWon
	this.Icon = icon
	this.Name = name
	this.Record = record
	return &this
}

// NewEsportsV1DataMatchTeamsWithDefaults instantiates a new EsportsV1DataMatchTeams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsportsV1DataMatchTeamsWithDefaults() *EsportsV1DataMatchTeams {
	this := EsportsV1DataMatchTeams{}
	return &this
}

// GetCode returns the Code field value
func (o *EsportsV1DataMatchTeams) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeams) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *EsportsV1DataMatchTeams) SetCode(v string) {
	o.Code = v
}

// GetGameWins returns the GameWins field value
func (o *EsportsV1DataMatchTeams) GetGameWins() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GameWins
}

// GetGameWinsOk returns a tuple with the GameWins field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeams) GetGameWinsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameWins, true
}

// SetGameWins sets field value
func (o *EsportsV1DataMatchTeams) SetGameWins(v int32) {
	o.GameWins = v
}

// GetHasWon returns the HasWon field value
func (o *EsportsV1DataMatchTeams) GetHasWon() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasWon
}

// GetHasWonOk returns a tuple with the HasWon field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeams) GetHasWonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasWon, true
}

// SetHasWon sets field value
func (o *EsportsV1DataMatchTeams) SetHasWon(v bool) {
	o.HasWon = v
}

// GetIcon returns the Icon field value
func (o *EsportsV1DataMatchTeams) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeams) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *EsportsV1DataMatchTeams) SetIcon(v string) {
	o.Icon = v
}

// GetName returns the Name field value
func (o *EsportsV1DataMatchTeams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EsportsV1DataMatchTeams) SetName(v string) {
	o.Name = v
}

// GetRecord returns the Record field value
func (o *EsportsV1DataMatchTeams) GetRecord() EsportsV1DataMatchTeamsRecord {
	if o == nil {
		var ret EsportsV1DataMatchTeamsRecord
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeams) GetRecordOk() (*EsportsV1DataMatchTeamsRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *EsportsV1DataMatchTeams) SetRecord(v EsportsV1DataMatchTeamsRecord) {
	o.Record = v
}

func (o EsportsV1DataMatchTeams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsportsV1DataMatchTeams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["game_wins"] = o.GameWins
	toSerialize["has_won"] = o.HasWon
	toSerialize["icon"] = o.Icon
	toSerialize["name"] = o.Name
	toSerialize["record"] = o.Record
	return toSerialize, nil
}

func (o *EsportsV1DataMatchTeams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"game_wins",
		"has_won",
		"icon",
		"name",
		"record",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEsportsV1DataMatchTeams := _EsportsV1DataMatchTeams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEsportsV1DataMatchTeams)

	if err != nil {
		return err
	}

	*o = EsportsV1DataMatchTeams(varEsportsV1DataMatchTeams)

	return err
}

type NullableEsportsV1DataMatchTeams struct {
	value *EsportsV1DataMatchTeams
	isSet bool
}

func (v NullableEsportsV1DataMatchTeams) Get() *EsportsV1DataMatchTeams {
	return v.value
}

func (v *NullableEsportsV1DataMatchTeams) Set(val *EsportsV1DataMatchTeams) {
	v.value = val
	v.isSet = true
}

func (v NullableEsportsV1DataMatchTeams) IsSet() bool {
	return v.isSet
}

func (v *NullableEsportsV1DataMatchTeams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsportsV1DataMatchTeams(val *EsportsV1DataMatchTeams) *NullableEsportsV1DataMatchTeams {
	return &NullableEsportsV1DataMatchTeams{value: val, isSet: true}
}

func (v NullableEsportsV1DataMatchTeams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsportsV1DataMatchTeams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


