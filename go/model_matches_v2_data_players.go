/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataPlayers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayers{}

// MatchesV2DataPlayers struct for MatchesV2DataPlayers
type MatchesV2DataPlayers struct {
	AllPlayers []MatchesV2DataPlayer `json:"all_players"`
	Blue []MatchesV2DataPlayer `json:"blue"`
	Red []MatchesV2DataPlayer `json:"red"`
}

type _MatchesV2DataPlayers MatchesV2DataPlayers

// NewMatchesV2DataPlayers instantiates a new MatchesV2DataPlayers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayers(allPlayers []MatchesV2DataPlayer, blue []MatchesV2DataPlayer, red []MatchesV2DataPlayer) *MatchesV2DataPlayers {
	this := MatchesV2DataPlayers{}
	this.AllPlayers = allPlayers
	this.Blue = blue
	this.Red = red
	return &this
}

// NewMatchesV2DataPlayersWithDefaults instantiates a new MatchesV2DataPlayers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayersWithDefaults() *MatchesV2DataPlayers {
	this := MatchesV2DataPlayers{}
	return &this
}

// GetAllPlayers returns the AllPlayers field value
func (o *MatchesV2DataPlayers) GetAllPlayers() []MatchesV2DataPlayer {
	if o == nil {
		var ret []MatchesV2DataPlayer
		return ret
	}

	return o.AllPlayers
}

// GetAllPlayersOk returns a tuple with the AllPlayers field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayers) GetAllPlayersOk() ([]MatchesV2DataPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllPlayers, true
}

// SetAllPlayers sets field value
func (o *MatchesV2DataPlayers) SetAllPlayers(v []MatchesV2DataPlayer) {
	o.AllPlayers = v
}

// GetBlue returns the Blue field value
func (o *MatchesV2DataPlayers) GetBlue() []MatchesV2DataPlayer {
	if o == nil {
		var ret []MatchesV2DataPlayer
		return ret
	}

	return o.Blue
}

// GetBlueOk returns a tuple with the Blue field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayers) GetBlueOk() ([]MatchesV2DataPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blue, true
}

// SetBlue sets field value
func (o *MatchesV2DataPlayers) SetBlue(v []MatchesV2DataPlayer) {
	o.Blue = v
}

// GetRed returns the Red field value
func (o *MatchesV2DataPlayers) GetRed() []MatchesV2DataPlayer {
	if o == nil {
		var ret []MatchesV2DataPlayer
		return ret
	}

	return o.Red
}

// GetRedOk returns a tuple with the Red field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayers) GetRedOk() ([]MatchesV2DataPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Red, true
}

// SetRed sets field value
func (o *MatchesV2DataPlayers) SetRed(v []MatchesV2DataPlayer) {
	o.Red = v
}

func (o MatchesV2DataPlayers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["all_players"] = o.AllPlayers
	toSerialize["blue"] = o.Blue
	toSerialize["red"] = o.Red
	return toSerialize, nil
}

func (o *MatchesV2DataPlayers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"all_players",
		"blue",
		"red",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataPlayers := _MatchesV2DataPlayers{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataPlayers)

	if err != nil {
		return err
	}

	*o = MatchesV2DataPlayers(varMatchesV2DataPlayers)

	return err
}

type NullableMatchesV2DataPlayers struct {
	value *MatchesV2DataPlayers
	isSet bool
}

func (v NullableMatchesV2DataPlayers) Get() *MatchesV2DataPlayers {
	return v.value
}

func (v *NullableMatchesV2DataPlayers) Set(val *MatchesV2DataPlayers) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayers) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayers(val *MatchesV2DataPlayers) *NullableMatchesV2DataPlayers {
	return &NullableMatchesV2DataPlayers{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


