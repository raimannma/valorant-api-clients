/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PremierTeamHistoryV1ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PremierTeamHistoryV1ResponseData{}

// PremierTeamHistoryV1ResponseData struct for PremierTeamHistoryV1ResponseData
type PremierTeamHistoryV1ResponseData struct {
	LeagueMatches []PremierTeamGamesLeagueString `json:"league_matches"`
	TournamentMatches []PremierTeamGamesTournament `json:"tournament_matches"`
}

type _PremierTeamHistoryV1ResponseData PremierTeamHistoryV1ResponseData

// NewPremierTeamHistoryV1ResponseData instantiates a new PremierTeamHistoryV1ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremierTeamHistoryV1ResponseData(leagueMatches []PremierTeamGamesLeagueString, tournamentMatches []PremierTeamGamesTournament) *PremierTeamHistoryV1ResponseData {
	this := PremierTeamHistoryV1ResponseData{}
	this.LeagueMatches = leagueMatches
	this.TournamentMatches = tournamentMatches
	return &this
}

// NewPremierTeamHistoryV1ResponseDataWithDefaults instantiates a new PremierTeamHistoryV1ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremierTeamHistoryV1ResponseDataWithDefaults() *PremierTeamHistoryV1ResponseData {
	this := PremierTeamHistoryV1ResponseData{}
	return &this
}

// GetLeagueMatches returns the LeagueMatches field value
func (o *PremierTeamHistoryV1ResponseData) GetLeagueMatches() []PremierTeamGamesLeagueString {
	if o == nil {
		var ret []PremierTeamGamesLeagueString
		return ret
	}

	return o.LeagueMatches
}

// GetLeagueMatchesOk returns a tuple with the LeagueMatches field value
// and a boolean to check if the value has been set.
func (o *PremierTeamHistoryV1ResponseData) GetLeagueMatchesOk() ([]PremierTeamGamesLeagueString, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeagueMatches, true
}

// SetLeagueMatches sets field value
func (o *PremierTeamHistoryV1ResponseData) SetLeagueMatches(v []PremierTeamGamesLeagueString) {
	o.LeagueMatches = v
}

// GetTournamentMatches returns the TournamentMatches field value
func (o *PremierTeamHistoryV1ResponseData) GetTournamentMatches() []PremierTeamGamesTournament {
	if o == nil {
		var ret []PremierTeamGamesTournament
		return ret
	}

	return o.TournamentMatches
}

// GetTournamentMatchesOk returns a tuple with the TournamentMatches field value
// and a boolean to check if the value has been set.
func (o *PremierTeamHistoryV1ResponseData) GetTournamentMatchesOk() ([]PremierTeamGamesTournament, bool) {
	if o == nil {
		return nil, false
	}
	return o.TournamentMatches, true
}

// SetTournamentMatches sets field value
func (o *PremierTeamHistoryV1ResponseData) SetTournamentMatches(v []PremierTeamGamesTournament) {
	o.TournamentMatches = v
}

func (o PremierTeamHistoryV1ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PremierTeamHistoryV1ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["league_matches"] = o.LeagueMatches
	toSerialize["tournament_matches"] = o.TournamentMatches
	return toSerialize, nil
}

func (o *PremierTeamHistoryV1ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"league_matches",
		"tournament_matches",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPremierTeamHistoryV1ResponseData := _PremierTeamHistoryV1ResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPremierTeamHistoryV1ResponseData)

	if err != nil {
		return err
	}

	*o = PremierTeamHistoryV1ResponseData(varPremierTeamHistoryV1ResponseData)

	return err
}

type NullablePremierTeamHistoryV1ResponseData struct {
	value *PremierTeamHistoryV1ResponseData
	isSet bool
}

func (v NullablePremierTeamHistoryV1ResponseData) Get() *PremierTeamHistoryV1ResponseData {
	return v.value
}

func (v *NullablePremierTeamHistoryV1ResponseData) Set(val *PremierTeamHistoryV1ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullablePremierTeamHistoryV1ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullablePremierTeamHistoryV1ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremierTeamHistoryV1ResponseData(val *PremierTeamHistoryV1ResponseData) *NullablePremierTeamHistoryV1ResponseData {
	return &NullablePremierTeamHistoryV1ResponseData{value: val, isSet: true}
}

func (v NullablePremierTeamHistoryV1ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremierTeamHistoryV1ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


