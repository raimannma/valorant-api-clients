/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
)

// checks if the MatchesV2DataPlayerAbilityCasts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayerAbilityCasts{}

// MatchesV2DataPlayerAbilityCasts struct for MatchesV2DataPlayerAbilityCasts
type MatchesV2DataPlayerAbilityCasts struct {
	CCast NullableInt32 `json:"c_cast,omitempty"`
	ECast NullableInt32 `json:"e_cast,omitempty"`
	QCast NullableInt32 `json:"q_cast,omitempty"`
	XCast NullableInt32 `json:"x_cast,omitempty"`
}

// NewMatchesV2DataPlayerAbilityCasts instantiates a new MatchesV2DataPlayerAbilityCasts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayerAbilityCasts() *MatchesV2DataPlayerAbilityCasts {
	this := MatchesV2DataPlayerAbilityCasts{}
	return &this
}

// NewMatchesV2DataPlayerAbilityCastsWithDefaults instantiates a new MatchesV2DataPlayerAbilityCasts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayerAbilityCastsWithDefaults() *MatchesV2DataPlayerAbilityCasts {
	this := MatchesV2DataPlayerAbilityCasts{}
	return &this
}

// GetCCast returns the CCast field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataPlayerAbilityCasts) GetCCast() int32 {
	if o == nil || IsNil(o.CCast.Get()) {
		var ret int32
		return ret
	}
	return *o.CCast.Get()
}

// GetCCastOk returns a tuple with the CCast field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataPlayerAbilityCasts) GetCCastOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CCast.Get(), o.CCast.IsSet()
}

// HasCCast returns a boolean if a field has been set.
func (o *MatchesV2DataPlayerAbilityCasts) HasCCast() bool {
	if o != nil && o.CCast.IsSet() {
		return true
	}

	return false
}

// SetCCast gets a reference to the given NullableInt32 and assigns it to the CCast field.
func (o *MatchesV2DataPlayerAbilityCasts) SetCCast(v int32) {
	o.CCast.Set(&v)
}
// SetCCastNil sets the value for CCast to be an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) SetCCastNil() {
	o.CCast.Set(nil)
}

// UnsetCCast ensures that no value is present for CCast, not even an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) UnsetCCast() {
	o.CCast.Unset()
}

// GetECast returns the ECast field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataPlayerAbilityCasts) GetECast() int32 {
	if o == nil || IsNil(o.ECast.Get()) {
		var ret int32
		return ret
	}
	return *o.ECast.Get()
}

// GetECastOk returns a tuple with the ECast field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataPlayerAbilityCasts) GetECastOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ECast.Get(), o.ECast.IsSet()
}

// HasECast returns a boolean if a field has been set.
func (o *MatchesV2DataPlayerAbilityCasts) HasECast() bool {
	if o != nil && o.ECast.IsSet() {
		return true
	}

	return false
}

// SetECast gets a reference to the given NullableInt32 and assigns it to the ECast field.
func (o *MatchesV2DataPlayerAbilityCasts) SetECast(v int32) {
	o.ECast.Set(&v)
}
// SetECastNil sets the value for ECast to be an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) SetECastNil() {
	o.ECast.Set(nil)
}

// UnsetECast ensures that no value is present for ECast, not even an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) UnsetECast() {
	o.ECast.Unset()
}

// GetQCast returns the QCast field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataPlayerAbilityCasts) GetQCast() int32 {
	if o == nil || IsNil(o.QCast.Get()) {
		var ret int32
		return ret
	}
	return *o.QCast.Get()
}

// GetQCastOk returns a tuple with the QCast field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataPlayerAbilityCasts) GetQCastOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.QCast.Get(), o.QCast.IsSet()
}

// HasQCast returns a boolean if a field has been set.
func (o *MatchesV2DataPlayerAbilityCasts) HasQCast() bool {
	if o != nil && o.QCast.IsSet() {
		return true
	}

	return false
}

// SetQCast gets a reference to the given NullableInt32 and assigns it to the QCast field.
func (o *MatchesV2DataPlayerAbilityCasts) SetQCast(v int32) {
	o.QCast.Set(&v)
}
// SetQCastNil sets the value for QCast to be an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) SetQCastNil() {
	o.QCast.Set(nil)
}

// UnsetQCast ensures that no value is present for QCast, not even an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) UnsetQCast() {
	o.QCast.Unset()
}

// GetXCast returns the XCast field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataPlayerAbilityCasts) GetXCast() int32 {
	if o == nil || IsNil(o.XCast.Get()) {
		var ret int32
		return ret
	}
	return *o.XCast.Get()
}

// GetXCastOk returns a tuple with the XCast field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataPlayerAbilityCasts) GetXCastOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.XCast.Get(), o.XCast.IsSet()
}

// HasXCast returns a boolean if a field has been set.
func (o *MatchesV2DataPlayerAbilityCasts) HasXCast() bool {
	if o != nil && o.XCast.IsSet() {
		return true
	}

	return false
}

// SetXCast gets a reference to the given NullableInt32 and assigns it to the XCast field.
func (o *MatchesV2DataPlayerAbilityCasts) SetXCast(v int32) {
	o.XCast.Set(&v)
}
// SetXCastNil sets the value for XCast to be an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) SetXCastNil() {
	o.XCast.Set(nil)
}

// UnsetXCast ensures that no value is present for XCast, not even an explicit nil
func (o *MatchesV2DataPlayerAbilityCasts) UnsetXCast() {
	o.XCast.Unset()
}

func (o MatchesV2DataPlayerAbilityCasts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayerAbilityCasts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CCast.IsSet() {
		toSerialize["c_cast"] = o.CCast.Get()
	}
	if o.ECast.IsSet() {
		toSerialize["e_cast"] = o.ECast.Get()
	}
	if o.QCast.IsSet() {
		toSerialize["q_cast"] = o.QCast.Get()
	}
	if o.XCast.IsSet() {
		toSerialize["x_cast"] = o.XCast.Get()
	}
	return toSerialize, nil
}

type NullableMatchesV2DataPlayerAbilityCasts struct {
	value *MatchesV2DataPlayerAbilityCasts
	isSet bool
}

func (v NullableMatchesV2DataPlayerAbilityCasts) Get() *MatchesV2DataPlayerAbilityCasts {
	return v.value
}

func (v *NullableMatchesV2DataPlayerAbilityCasts) Set(val *MatchesV2DataPlayerAbilityCasts) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayerAbilityCasts) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayerAbilityCasts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayerAbilityCasts(val *MatchesV2DataPlayerAbilityCasts) *NullableMatchesV2DataPlayerAbilityCasts {
	return &NullableMatchesV2DataPlayerAbilityCasts{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayerAbilityCasts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayerAbilityCasts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


