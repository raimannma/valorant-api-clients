/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoreOffersV1Offer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreOffersV1Offer{}

// StoreOffersV1Offer struct for StoreOffersV1Offer
type StoreOffersV1Offer struct {
	Cost map[string]int32 `json:"Cost"`
	IsDirectPurchase bool `json:"IsDirectPurchase"`
	OfferID string `json:"OfferID"`
	Rewards []StoreOffersV1Reward `json:"Rewards"`
	StartDate string `json:"StartDate"`
}

type _StoreOffersV1Offer StoreOffersV1Offer

// NewStoreOffersV1Offer instantiates a new StoreOffersV1Offer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreOffersV1Offer(cost map[string]int32, isDirectPurchase bool, offerID string, rewards []StoreOffersV1Reward, startDate string) *StoreOffersV1Offer {
	this := StoreOffersV1Offer{}
	this.Cost = cost
	this.IsDirectPurchase = isDirectPurchase
	this.OfferID = offerID
	this.Rewards = rewards
	this.StartDate = startDate
	return &this
}

// NewStoreOffersV1OfferWithDefaults instantiates a new StoreOffersV1Offer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreOffersV1OfferWithDefaults() *StoreOffersV1Offer {
	this := StoreOffersV1Offer{}
	return &this
}

// GetCost returns the Cost field value
func (o *StoreOffersV1Offer) GetCost() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Offer) GetCostOk() (map[string]int32, bool) {
	if o == nil {
		return map[string]int32{}, false
	}
	return o.Cost, true
}

// SetCost sets field value
func (o *StoreOffersV1Offer) SetCost(v map[string]int32) {
	o.Cost = v
}

// GetIsDirectPurchase returns the IsDirectPurchase field value
func (o *StoreOffersV1Offer) GetIsDirectPurchase() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDirectPurchase
}

// GetIsDirectPurchaseOk returns a tuple with the IsDirectPurchase field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Offer) GetIsDirectPurchaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDirectPurchase, true
}

// SetIsDirectPurchase sets field value
func (o *StoreOffersV1Offer) SetIsDirectPurchase(v bool) {
	o.IsDirectPurchase = v
}

// GetOfferID returns the OfferID field value
func (o *StoreOffersV1Offer) GetOfferID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfferID
}

// GetOfferIDOk returns a tuple with the OfferID field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Offer) GetOfferIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferID, true
}

// SetOfferID sets field value
func (o *StoreOffersV1Offer) SetOfferID(v string) {
	o.OfferID = v
}

// GetRewards returns the Rewards field value
func (o *StoreOffersV1Offer) GetRewards() []StoreOffersV1Reward {
	if o == nil {
		var ret []StoreOffersV1Reward
		return ret
	}

	return o.Rewards
}

// GetRewardsOk returns a tuple with the Rewards field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Offer) GetRewardsOk() ([]StoreOffersV1Reward, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rewards, true
}

// SetRewards sets field value
func (o *StoreOffersV1Offer) SetRewards(v []StoreOffersV1Reward) {
	o.Rewards = v
}

// GetStartDate returns the StartDate field value
func (o *StoreOffersV1Offer) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Offer) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *StoreOffersV1Offer) SetStartDate(v string) {
	o.StartDate = v
}

func (o StoreOffersV1Offer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreOffersV1Offer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Cost"] = o.Cost
	toSerialize["IsDirectPurchase"] = o.IsDirectPurchase
	toSerialize["OfferID"] = o.OfferID
	toSerialize["Rewards"] = o.Rewards
	toSerialize["StartDate"] = o.StartDate
	return toSerialize, nil
}

func (o *StoreOffersV1Offer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Cost",
		"IsDirectPurchase",
		"OfferID",
		"Rewards",
		"StartDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreOffersV1Offer := _StoreOffersV1Offer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoreOffersV1Offer)

	if err != nil {
		return err
	}

	*o = StoreOffersV1Offer(varStoreOffersV1Offer)

	return err
}

type NullableStoreOffersV1Offer struct {
	value *StoreOffersV1Offer
	isSet bool
}

func (v NullableStoreOffersV1Offer) Get() *StoreOffersV1Offer {
	return v.value
}

func (v *NullableStoreOffersV1Offer) Set(val *StoreOffersV1Offer) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreOffersV1Offer) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreOffersV1Offer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreOffersV1Offer(val *StoreOffersV1Offer) *NullableStoreOffersV1Offer {
	return &NullableStoreOffersV1Offer{value: val, isSet: true}
}

func (v NullableStoreOffersV1Offer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreOffersV1Offer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


