/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataPlatform type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlatform{}

// MatchesV2DataPlatform struct for MatchesV2DataPlatform
type MatchesV2DataPlatform struct {
	Os MatchesV2DataPlatformOs `json:"os"`
	Type string `json:"type"`
}

type _MatchesV2DataPlatform MatchesV2DataPlatform

// NewMatchesV2DataPlatform instantiates a new MatchesV2DataPlatform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlatform(os MatchesV2DataPlatformOs, type_ string) *MatchesV2DataPlatform {
	this := MatchesV2DataPlatform{}
	this.Os = os
	this.Type = type_
	return &this
}

// NewMatchesV2DataPlatformWithDefaults instantiates a new MatchesV2DataPlatform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlatformWithDefaults() *MatchesV2DataPlatform {
	this := MatchesV2DataPlatform{}
	return &this
}

// GetOs returns the Os field value
func (o *MatchesV2DataPlatform) GetOs() MatchesV2DataPlatformOs {
	if o == nil {
		var ret MatchesV2DataPlatformOs
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlatform) GetOsOk() (*MatchesV2DataPlatformOs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *MatchesV2DataPlatform) SetOs(v MatchesV2DataPlatformOs) {
	o.Os = v
}

// GetType returns the Type field value
func (o *MatchesV2DataPlatform) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlatform) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MatchesV2DataPlatform) SetType(v string) {
	o.Type = v
}

func (o MatchesV2DataPlatform) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlatform) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["os"] = o.Os
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *MatchesV2DataPlatform) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"os",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataPlatform := _MatchesV2DataPlatform{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataPlatform)

	if err != nil {
		return err
	}

	*o = MatchesV2DataPlatform(varMatchesV2DataPlatform)

	return err
}

type NullableMatchesV2DataPlatform struct {
	value *MatchesV2DataPlatform
	isSet bool
}

func (v NullableMatchesV2DataPlatform) Get() *MatchesV2DataPlatform {
	return v.value
}

func (v *NullableMatchesV2DataPlatform) Set(val *MatchesV2DataPlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlatform(val *MatchesV2DataPlatform) *NullableMatchesV2DataPlatform {
	return &NullableMatchesV2DataPlatform{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


