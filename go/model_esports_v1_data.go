/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EsportsV1Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsportsV1Data{}

// EsportsV1Data struct for EsportsV1Data
type EsportsV1Data struct {
	Date string `json:"date"`
	League EsportsV1DataLeague `json:"league"`
	Match EsportsV1DataMatch `json:"match"`
	State string `json:"state"`
	Tournament EsportsV1DataTournament `json:"tournament"`
	Type string `json:"type"`
	Vod NullableString `json:"vod,omitempty"`
}

type _EsportsV1Data EsportsV1Data

// NewEsportsV1Data instantiates a new EsportsV1Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsportsV1Data(date string, league EsportsV1DataLeague, match EsportsV1DataMatch, state string, tournament EsportsV1DataTournament, type_ string) *EsportsV1Data {
	this := EsportsV1Data{}
	this.Date = date
	this.League = league
	this.Match = match
	this.State = state
	this.Tournament = tournament
	this.Type = type_
	return &this
}

// NewEsportsV1DataWithDefaults instantiates a new EsportsV1Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsportsV1DataWithDefaults() *EsportsV1Data {
	this := EsportsV1Data{}
	return &this
}

// GetDate returns the Date field value
func (o *EsportsV1Data) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *EsportsV1Data) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *EsportsV1Data) SetDate(v string) {
	o.Date = v
}

// GetLeague returns the League field value
func (o *EsportsV1Data) GetLeague() EsportsV1DataLeague {
	if o == nil {
		var ret EsportsV1DataLeague
		return ret
	}

	return o.League
}

// GetLeagueOk returns a tuple with the League field value
// and a boolean to check if the value has been set.
func (o *EsportsV1Data) GetLeagueOk() (*EsportsV1DataLeague, bool) {
	if o == nil {
		return nil, false
	}
	return &o.League, true
}

// SetLeague sets field value
func (o *EsportsV1Data) SetLeague(v EsportsV1DataLeague) {
	o.League = v
}

// GetMatch returns the Match field value
func (o *EsportsV1Data) GetMatch() EsportsV1DataMatch {
	if o == nil {
		var ret EsportsV1DataMatch
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *EsportsV1Data) GetMatchOk() (*EsportsV1DataMatch, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *EsportsV1Data) SetMatch(v EsportsV1DataMatch) {
	o.Match = v
}

// GetState returns the State field value
func (o *EsportsV1Data) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *EsportsV1Data) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *EsportsV1Data) SetState(v string) {
	o.State = v
}

// GetTournament returns the Tournament field value
func (o *EsportsV1Data) GetTournament() EsportsV1DataTournament {
	if o == nil {
		var ret EsportsV1DataTournament
		return ret
	}

	return o.Tournament
}

// GetTournamentOk returns a tuple with the Tournament field value
// and a boolean to check if the value has been set.
func (o *EsportsV1Data) GetTournamentOk() (*EsportsV1DataTournament, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tournament, true
}

// SetTournament sets field value
func (o *EsportsV1Data) SetTournament(v EsportsV1DataTournament) {
	o.Tournament = v
}

// GetType returns the Type field value
func (o *EsportsV1Data) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EsportsV1Data) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EsportsV1Data) SetType(v string) {
	o.Type = v
}

// GetVod returns the Vod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EsportsV1Data) GetVod() string {
	if o == nil || IsNil(o.Vod.Get()) {
		var ret string
		return ret
	}
	return *o.Vod.Get()
}

// GetVodOk returns a tuple with the Vod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsportsV1Data) GetVodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vod.Get(), o.Vod.IsSet()
}

// HasVod returns a boolean if a field has been set.
func (o *EsportsV1Data) HasVod() bool {
	if o != nil && o.Vod.IsSet() {
		return true
	}

	return false
}

// SetVod gets a reference to the given NullableString and assigns it to the Vod field.
func (o *EsportsV1Data) SetVod(v string) {
	o.Vod.Set(&v)
}
// SetVodNil sets the value for Vod to be an explicit nil
func (o *EsportsV1Data) SetVodNil() {
	o.Vod.Set(nil)
}

// UnsetVod ensures that no value is present for Vod, not even an explicit nil
func (o *EsportsV1Data) UnsetVod() {
	o.Vod.Unset()
}

func (o EsportsV1Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsportsV1Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["league"] = o.League
	toSerialize["match"] = o.Match
	toSerialize["state"] = o.State
	toSerialize["tournament"] = o.Tournament
	toSerialize["type"] = o.Type
	if o.Vod.IsSet() {
		toSerialize["vod"] = o.Vod.Get()
	}
	return toSerialize, nil
}

func (o *EsportsV1Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"league",
		"match",
		"state",
		"tournament",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEsportsV1Data := _EsportsV1Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEsportsV1Data)

	if err != nil {
		return err
	}

	*o = EsportsV1Data(varEsportsV1Data)

	return err
}

type NullableEsportsV1Data struct {
	value *EsportsV1Data
	isSet bool
}

func (v NullableEsportsV1Data) Get() *EsportsV1Data {
	return v.value
}

func (v *NullableEsportsV1Data) Set(val *EsportsV1Data) {
	v.value = val
	v.isSet = true
}

func (v NullableEsportsV1Data) IsSet() bool {
	return v.isSet
}

func (v *NullableEsportsV1Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsportsV1Data(val *EsportsV1Data) *NullableEsportsV1Data {
	return &NullableEsportsV1Data{value: val, isSet: true}
}

func (v NullableEsportsV1Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsportsV1Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


