/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoredMMRV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoredMMRV2{}

// StoredMMRV2 struct for StoredMMRV2
type StoredMMRV2 struct {
	Date string `json:"date"`
	Elo int32 `json:"elo"`
	LastChange int32 `json:"last_change"`
	Map MapIdNameCombo `json:"map"`
	MatchId string `json:"match_id"`
	RefundedRr int32 `json:"refunded_rr"`
	Rr int32 `json:"rr"`
	Season SeasonIdShortCombo `json:"season"`
	Tier TierIdNameCombo `json:"tier"`
	WasDerankProtected bool `json:"was_derank_protected"`
}

type _StoredMMRV2 StoredMMRV2

// NewStoredMMRV2 instantiates a new StoredMMRV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoredMMRV2(date string, elo int32, lastChange int32, map_ MapIdNameCombo, matchId string, refundedRr int32, rr int32, season SeasonIdShortCombo, tier TierIdNameCombo, wasDerankProtected bool) *StoredMMRV2 {
	this := StoredMMRV2{}
	this.Date = date
	this.Elo = elo
	this.LastChange = lastChange
	this.Map = map_
	this.MatchId = matchId
	this.RefundedRr = refundedRr
	this.Rr = rr
	this.Season = season
	this.Tier = tier
	this.WasDerankProtected = wasDerankProtected
	return &this
}

// NewStoredMMRV2WithDefaults instantiates a new StoredMMRV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoredMMRV2WithDefaults() *StoredMMRV2 {
	this := StoredMMRV2{}
	return &this
}

// GetDate returns the Date field value
func (o *StoredMMRV2) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *StoredMMRV2) SetDate(v string) {
	o.Date = v
}

// GetElo returns the Elo field value
func (o *StoredMMRV2) GetElo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Elo
}

// GetEloOk returns a tuple with the Elo field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetEloOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Elo, true
}

// SetElo sets field value
func (o *StoredMMRV2) SetElo(v int32) {
	o.Elo = v
}

// GetLastChange returns the LastChange field value
func (o *StoredMMRV2) GetLastChange() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastChange
}

// GetLastChangeOk returns a tuple with the LastChange field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetLastChangeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastChange, true
}

// SetLastChange sets field value
func (o *StoredMMRV2) SetLastChange(v int32) {
	o.LastChange = v
}

// GetMap returns the Map field value
func (o *StoredMMRV2) GetMap() MapIdNameCombo {
	if o == nil {
		var ret MapIdNameCombo
		return ret
	}

	return o.Map
}

// GetMapOk returns a tuple with the Map field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetMapOk() (*MapIdNameCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Map, true
}

// SetMap sets field value
func (o *StoredMMRV2) SetMap(v MapIdNameCombo) {
	o.Map = v
}

// GetMatchId returns the MatchId field value
func (o *StoredMMRV2) GetMatchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetMatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchId, true
}

// SetMatchId sets field value
func (o *StoredMMRV2) SetMatchId(v string) {
	o.MatchId = v
}

// GetRefundedRr returns the RefundedRr field value
func (o *StoredMMRV2) GetRefundedRr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RefundedRr
}

// GetRefundedRrOk returns a tuple with the RefundedRr field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetRefundedRrOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefundedRr, true
}

// SetRefundedRr sets field value
func (o *StoredMMRV2) SetRefundedRr(v int32) {
	o.RefundedRr = v
}

// GetRr returns the Rr field value
func (o *StoredMMRV2) GetRr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rr
}

// GetRrOk returns a tuple with the Rr field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetRrOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rr, true
}

// SetRr sets field value
func (o *StoredMMRV2) SetRr(v int32) {
	o.Rr = v
}

// GetSeason returns the Season field value
func (o *StoredMMRV2) GetSeason() SeasonIdShortCombo {
	if o == nil {
		var ret SeasonIdShortCombo
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetSeasonOk() (*SeasonIdShortCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *StoredMMRV2) SetSeason(v SeasonIdShortCombo) {
	o.Season = v
}

// GetTier returns the Tier field value
func (o *StoredMMRV2) GetTier() TierIdNameCombo {
	if o == nil {
		var ret TierIdNameCombo
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetTierOk() (*TierIdNameCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *StoredMMRV2) SetTier(v TierIdNameCombo) {
	o.Tier = v
}

// GetWasDerankProtected returns the WasDerankProtected field value
func (o *StoredMMRV2) GetWasDerankProtected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WasDerankProtected
}

// GetWasDerankProtectedOk returns a tuple with the WasDerankProtected field value
// and a boolean to check if the value has been set.
func (o *StoredMMRV2) GetWasDerankProtectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WasDerankProtected, true
}

// SetWasDerankProtected sets field value
func (o *StoredMMRV2) SetWasDerankProtected(v bool) {
	o.WasDerankProtected = v
}

func (o StoredMMRV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoredMMRV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["elo"] = o.Elo
	toSerialize["last_change"] = o.LastChange
	toSerialize["map"] = o.Map
	toSerialize["match_id"] = o.MatchId
	toSerialize["refunded_rr"] = o.RefundedRr
	toSerialize["rr"] = o.Rr
	toSerialize["season"] = o.Season
	toSerialize["tier"] = o.Tier
	toSerialize["was_derank_protected"] = o.WasDerankProtected
	return toSerialize, nil
}

func (o *StoredMMRV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"elo",
		"last_change",
		"map",
		"match_id",
		"refunded_rr",
		"rr",
		"season",
		"tier",
		"was_derank_protected",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoredMMRV2 := _StoredMMRV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoredMMRV2)

	if err != nil {
		return err
	}

	*o = StoredMMRV2(varStoredMMRV2)

	return err
}

type NullableStoredMMRV2 struct {
	value *StoredMMRV2
	isSet bool
}

func (v NullableStoredMMRV2) Get() *StoredMMRV2 {
	return v.value
}

func (v *NullableStoredMMRV2) Set(val *StoredMMRV2) {
	v.value = val
	v.isSet = true
}

func (v NullableStoredMMRV2) IsSet() bool {
	return v.isSet
}

func (v *NullableStoredMMRV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoredMMRV2(val *StoredMMRV2) *NullableStoredMMRV2 {
	return &NullableStoredMMRV2{value: val, isSet: true}
}

func (v NullableStoredMMRV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoredMMRV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


