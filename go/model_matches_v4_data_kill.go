/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataKill type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataKill{}

// MatchesV4DataKill struct for MatchesV4DataKill
type MatchesV4DataKill struct {
	Assistants []MatchesV4DataRoundPlayer `json:"assistants"`
	Killer MatchesV4DataRoundPlayer `json:"killer"`
	Location MatchesV4DataRoundLocation `json:"location"`
	PlayerLocations []MatchesV4DataRoundPlayerLocations `json:"player_locations"`
	Round int32 `json:"round"`
	SecondaryFireMode bool `json:"secondary_fire_mode"`
	TimeInMatchInMs int64 `json:"time_in_match_in_ms"`
	TimeInRoundInMs int64 `json:"time_in_round_in_ms"`
	Victim MatchesV4DataRoundPlayer `json:"victim"`
	Weapon MatchesV4DataRoundPlayerStatsEconomyWeapon `json:"weapon"`
}

type _MatchesV4DataKill MatchesV4DataKill

// NewMatchesV4DataKill instantiates a new MatchesV4DataKill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataKill(assistants []MatchesV4DataRoundPlayer, killer MatchesV4DataRoundPlayer, location MatchesV4DataRoundLocation, playerLocations []MatchesV4DataRoundPlayerLocations, round int32, secondaryFireMode bool, timeInMatchInMs int64, timeInRoundInMs int64, victim MatchesV4DataRoundPlayer, weapon MatchesV4DataRoundPlayerStatsEconomyWeapon) *MatchesV4DataKill {
	this := MatchesV4DataKill{}
	this.Assistants = assistants
	this.Killer = killer
	this.Location = location
	this.PlayerLocations = playerLocations
	this.Round = round
	this.SecondaryFireMode = secondaryFireMode
	this.TimeInMatchInMs = timeInMatchInMs
	this.TimeInRoundInMs = timeInRoundInMs
	this.Victim = victim
	this.Weapon = weapon
	return &this
}

// NewMatchesV4DataKillWithDefaults instantiates a new MatchesV4DataKill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataKillWithDefaults() *MatchesV4DataKill {
	this := MatchesV4DataKill{}
	return &this
}

// GetAssistants returns the Assistants field value
func (o *MatchesV4DataKill) GetAssistants() []MatchesV4DataRoundPlayer {
	if o == nil {
		var ret []MatchesV4DataRoundPlayer
		return ret
	}

	return o.Assistants
}

// GetAssistantsOk returns a tuple with the Assistants field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetAssistantsOk() ([]MatchesV4DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assistants, true
}

// SetAssistants sets field value
func (o *MatchesV4DataKill) SetAssistants(v []MatchesV4DataRoundPlayer) {
	o.Assistants = v
}

// GetKiller returns the Killer field value
func (o *MatchesV4DataKill) GetKiller() MatchesV4DataRoundPlayer {
	if o == nil {
		var ret MatchesV4DataRoundPlayer
		return ret
	}

	return o.Killer
}

// GetKillerOk returns a tuple with the Killer field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetKillerOk() (*MatchesV4DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Killer, true
}

// SetKiller sets field value
func (o *MatchesV4DataKill) SetKiller(v MatchesV4DataRoundPlayer) {
	o.Killer = v
}

// GetLocation returns the Location field value
func (o *MatchesV4DataKill) GetLocation() MatchesV4DataRoundLocation {
	if o == nil {
		var ret MatchesV4DataRoundLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetLocationOk() (*MatchesV4DataRoundLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *MatchesV4DataKill) SetLocation(v MatchesV4DataRoundLocation) {
	o.Location = v
}

// GetPlayerLocations returns the PlayerLocations field value
func (o *MatchesV4DataKill) GetPlayerLocations() []MatchesV4DataRoundPlayerLocations {
	if o == nil {
		var ret []MatchesV4DataRoundPlayerLocations
		return ret
	}

	return o.PlayerLocations
}

// GetPlayerLocationsOk returns a tuple with the PlayerLocations field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetPlayerLocationsOk() ([]MatchesV4DataRoundPlayerLocations, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayerLocations, true
}

// SetPlayerLocations sets field value
func (o *MatchesV4DataKill) SetPlayerLocations(v []MatchesV4DataRoundPlayerLocations) {
	o.PlayerLocations = v
}

// GetRound returns the Round field value
func (o *MatchesV4DataKill) GetRound() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Round
}

// GetRoundOk returns a tuple with the Round field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetRoundOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Round, true
}

// SetRound sets field value
func (o *MatchesV4DataKill) SetRound(v int32) {
	o.Round = v
}

// GetSecondaryFireMode returns the SecondaryFireMode field value
func (o *MatchesV4DataKill) GetSecondaryFireMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecondaryFireMode
}

// GetSecondaryFireModeOk returns a tuple with the SecondaryFireMode field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetSecondaryFireModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecondaryFireMode, true
}

// SetSecondaryFireMode sets field value
func (o *MatchesV4DataKill) SetSecondaryFireMode(v bool) {
	o.SecondaryFireMode = v
}

// GetTimeInMatchInMs returns the TimeInMatchInMs field value
func (o *MatchesV4DataKill) GetTimeInMatchInMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TimeInMatchInMs
}

// GetTimeInMatchInMsOk returns a tuple with the TimeInMatchInMs field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetTimeInMatchInMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeInMatchInMs, true
}

// SetTimeInMatchInMs sets field value
func (o *MatchesV4DataKill) SetTimeInMatchInMs(v int64) {
	o.TimeInMatchInMs = v
}

// GetTimeInRoundInMs returns the TimeInRoundInMs field value
func (o *MatchesV4DataKill) GetTimeInRoundInMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TimeInRoundInMs
}

// GetTimeInRoundInMsOk returns a tuple with the TimeInRoundInMs field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetTimeInRoundInMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeInRoundInMs, true
}

// SetTimeInRoundInMs sets field value
func (o *MatchesV4DataKill) SetTimeInRoundInMs(v int64) {
	o.TimeInRoundInMs = v
}

// GetVictim returns the Victim field value
func (o *MatchesV4DataKill) GetVictim() MatchesV4DataRoundPlayer {
	if o == nil {
		var ret MatchesV4DataRoundPlayer
		return ret
	}

	return o.Victim
}

// GetVictimOk returns a tuple with the Victim field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetVictimOk() (*MatchesV4DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Victim, true
}

// SetVictim sets field value
func (o *MatchesV4DataKill) SetVictim(v MatchesV4DataRoundPlayer) {
	o.Victim = v
}

// GetWeapon returns the Weapon field value
func (o *MatchesV4DataKill) GetWeapon() MatchesV4DataRoundPlayerStatsEconomyWeapon {
	if o == nil {
		var ret MatchesV4DataRoundPlayerStatsEconomyWeapon
		return ret
	}

	return o.Weapon
}

// GetWeaponOk returns a tuple with the Weapon field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataKill) GetWeaponOk() (*MatchesV4DataRoundPlayerStatsEconomyWeapon, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weapon, true
}

// SetWeapon sets field value
func (o *MatchesV4DataKill) SetWeapon(v MatchesV4DataRoundPlayerStatsEconomyWeapon) {
	o.Weapon = v
}

func (o MatchesV4DataKill) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataKill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assistants"] = o.Assistants
	toSerialize["killer"] = o.Killer
	toSerialize["location"] = o.Location
	toSerialize["player_locations"] = o.PlayerLocations
	toSerialize["round"] = o.Round
	toSerialize["secondary_fire_mode"] = o.SecondaryFireMode
	toSerialize["time_in_match_in_ms"] = o.TimeInMatchInMs
	toSerialize["time_in_round_in_ms"] = o.TimeInRoundInMs
	toSerialize["victim"] = o.Victim
	toSerialize["weapon"] = o.Weapon
	return toSerialize, nil
}

func (o *MatchesV4DataKill) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assistants",
		"killer",
		"location",
		"player_locations",
		"round",
		"secondary_fire_mode",
		"time_in_match_in_ms",
		"time_in_round_in_ms",
		"victim",
		"weapon",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataKill := _MatchesV4DataKill{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataKill)

	if err != nil {
		return err
	}

	*o = MatchesV4DataKill(varMatchesV4DataKill)

	return err
}

type NullableMatchesV4DataKill struct {
	value *MatchesV4DataKill
	isSet bool
}

func (v NullableMatchesV4DataKill) Get() *MatchesV4DataKill {
	return v.value
}

func (v *NullableMatchesV4DataKill) Set(val *MatchesV4DataKill) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataKill) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataKill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataKill(val *MatchesV4DataKill) *NullableMatchesV4DataKill {
	return &NullableMatchesV4DataKill{value: val, isSet: true}
}

func (v NullableMatchesV4DataKill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataKill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


