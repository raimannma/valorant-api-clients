/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PremierTeamV1ResponseDataStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PremierTeamV1ResponseDataStats{}

// PremierTeamV1ResponseDataStats struct for PremierTeamV1ResponseDataStats
type PremierTeamV1ResponseDataStats struct {
	Losses int32 `json:"losses"`
	Matches int32 `json:"matches"`
	RoundsLost int32 `json:"rounds_lost"`
	RoundsWon int32 `json:"rounds_won"`
	Wins int32 `json:"wins"`
}

type _PremierTeamV1ResponseDataStats PremierTeamV1ResponseDataStats

// NewPremierTeamV1ResponseDataStats instantiates a new PremierTeamV1ResponseDataStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremierTeamV1ResponseDataStats(losses int32, matches int32, roundsLost int32, roundsWon int32, wins int32) *PremierTeamV1ResponseDataStats {
	this := PremierTeamV1ResponseDataStats{}
	this.Losses = losses
	this.Matches = matches
	this.RoundsLost = roundsLost
	this.RoundsWon = roundsWon
	this.Wins = wins
	return &this
}

// NewPremierTeamV1ResponseDataStatsWithDefaults instantiates a new PremierTeamV1ResponseDataStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremierTeamV1ResponseDataStatsWithDefaults() *PremierTeamV1ResponseDataStats {
	this := PremierTeamV1ResponseDataStats{}
	return &this
}

// GetLosses returns the Losses field value
func (o *PremierTeamV1ResponseDataStats) GetLosses() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Losses
}

// GetLossesOk returns a tuple with the Losses field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseDataStats) GetLossesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Losses, true
}

// SetLosses sets field value
func (o *PremierTeamV1ResponseDataStats) SetLosses(v int32) {
	o.Losses = v
}

// GetMatches returns the Matches field value
func (o *PremierTeamV1ResponseDataStats) GetMatches() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseDataStats) GetMatchesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Matches, true
}

// SetMatches sets field value
func (o *PremierTeamV1ResponseDataStats) SetMatches(v int32) {
	o.Matches = v
}

// GetRoundsLost returns the RoundsLost field value
func (o *PremierTeamV1ResponseDataStats) GetRoundsLost() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RoundsLost
}

// GetRoundsLostOk returns a tuple with the RoundsLost field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseDataStats) GetRoundsLostOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoundsLost, true
}

// SetRoundsLost sets field value
func (o *PremierTeamV1ResponseDataStats) SetRoundsLost(v int32) {
	o.RoundsLost = v
}

// GetRoundsWon returns the RoundsWon field value
func (o *PremierTeamV1ResponseDataStats) GetRoundsWon() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RoundsWon
}

// GetRoundsWonOk returns a tuple with the RoundsWon field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseDataStats) GetRoundsWonOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoundsWon, true
}

// SetRoundsWon sets field value
func (o *PremierTeamV1ResponseDataStats) SetRoundsWon(v int32) {
	o.RoundsWon = v
}

// GetWins returns the Wins field value
func (o *PremierTeamV1ResponseDataStats) GetWins() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *PremierTeamV1ResponseDataStats) GetWinsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *PremierTeamV1ResponseDataStats) SetWins(v int32) {
	o.Wins = v
}

func (o PremierTeamV1ResponseDataStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PremierTeamV1ResponseDataStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["losses"] = o.Losses
	toSerialize["matches"] = o.Matches
	toSerialize["rounds_lost"] = o.RoundsLost
	toSerialize["rounds_won"] = o.RoundsWon
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *PremierTeamV1ResponseDataStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"losses",
		"matches",
		"rounds_lost",
		"rounds_won",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPremierTeamV1ResponseDataStats := _PremierTeamV1ResponseDataStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPremierTeamV1ResponseDataStats)

	if err != nil {
		return err
	}

	*o = PremierTeamV1ResponseDataStats(varPremierTeamV1ResponseDataStats)

	return err
}

type NullablePremierTeamV1ResponseDataStats struct {
	value *PremierTeamV1ResponseDataStats
	isSet bool
}

func (v NullablePremierTeamV1ResponseDataStats) Get() *PremierTeamV1ResponseDataStats {
	return v.value
}

func (v *NullablePremierTeamV1ResponseDataStats) Set(val *PremierTeamV1ResponseDataStats) {
	v.value = val
	v.isSet = true
}

func (v NullablePremierTeamV1ResponseDataStats) IsSet() bool {
	return v.isSet
}

func (v *NullablePremierTeamV1ResponseDataStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremierTeamV1ResponseDataStats(val *PremierTeamV1ResponseDataStats) *NullablePremierTeamV1ResponseDataStats {
	return &NullablePremierTeamV1ResponseDataStats{value: val, isSet: true}
}

func (v NullablePremierTeamV1ResponseDataStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremierTeamV1ResponseDataStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


