/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RawV1ResponseData - struct for RawV1ResponseData
type RawV1ResponseData struct {
	RawV1ErrorData *RawV1ErrorData
	ArrayOfAny *[]interface{}
}

// RawV1ErrorDataAsRawV1ResponseData is a convenience function that returns RawV1ErrorData wrapped in RawV1ResponseData
func RawV1ErrorDataAsRawV1ResponseData(v *RawV1ErrorData) RawV1ResponseData {
	return RawV1ResponseData{
		RawV1ErrorData: v,
	}
}

// []interface{}AsRawV1ResponseData is a convenience function that returns []interface{} wrapped in RawV1ResponseData
func ArrayOfAnyAsRawV1ResponseData(v *[]interface{}) RawV1ResponseData {
	return RawV1ResponseData{
		ArrayOfAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RawV1ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into RawV1ErrorData
	err = newStrictDecoder(data).Decode(&dst.RawV1ErrorData)
	if err == nil {
		jsonRawV1ErrorData, _ := json.Marshal(dst.RawV1ErrorData)
		if string(jsonRawV1ErrorData) == "{}" { // empty struct
			dst.RawV1ErrorData = nil
		} else {
			if err = validator.Validate(dst.RawV1ErrorData); err != nil {
				dst.RawV1ErrorData = nil
			} else {
				match++
			}
		}
	} else {
		dst.RawV1ErrorData = nil
	}

	// try to unmarshal data into ArrayOfAny
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAny)
	if err == nil {
		jsonArrayOfAny, _ := json.Marshal(dst.ArrayOfAny)
		if string(jsonArrayOfAny) == "{}" { // empty struct
			dst.ArrayOfAny = nil
		} else {
			if err = validator.Validate(dst.ArrayOfAny); err != nil {
				dst.ArrayOfAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RawV1ErrorData = nil
		dst.ArrayOfAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RawV1ResponseData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RawV1ResponseData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RawV1ResponseData) MarshalJSON() ([]byte, error) {
	if src.RawV1ErrorData != nil {
		return json.Marshal(&src.RawV1ErrorData)
	}

	if src.ArrayOfAny != nil {
		return json.Marshal(&src.ArrayOfAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RawV1ResponseData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RawV1ErrorData != nil {
		return obj.RawV1ErrorData
	}

	if obj.ArrayOfAny != nil {
		return obj.ArrayOfAny
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RawV1ResponseData) GetActualInstanceValue() (interface{}) {
	if obj.RawV1ErrorData != nil {
		return *obj.RawV1ErrorData
	}

	if obj.ArrayOfAny != nil {
		return *obj.ArrayOfAny
	}

	// all schemas are nil
	return nil
}

type NullableRawV1ResponseData struct {
	value *RawV1ResponseData
	isSet bool
}

func (v NullableRawV1ResponseData) Get() *RawV1ResponseData {
	return v.value
}

func (v *NullableRawV1ResponseData) Set(val *RawV1ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRawV1ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRawV1ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawV1ResponseData(val *RawV1ResponseData) *NullableRawV1ResponseData {
	return &NullableRawV1ResponseData{value: val, isSet: true}
}

func (v NullableRawV1ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawV1ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


