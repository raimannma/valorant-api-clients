/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRoundPlayerStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRoundPlayerStats{}

// MatchesV4DataRoundPlayerStats struct for MatchesV4DataRoundPlayerStats
type MatchesV4DataRoundPlayerStats struct {
	AbilityCasts MatchesV4DataRoundPlayerStatsAbilityCasts `json:"ability_casts"`
	DamageEvents []MatchesV4DataRoundPlayerStatsDamageEvents `json:"damage_events"`
	Economy MatchesV4DataRoundPlayerStatsEconomy `json:"economy"`
	Player MatchesV4DataRoundPlayer `json:"player"`
	ReceivedPenalty bool `json:"received_penalty"`
	Stats MatchesV4DataRoundPlayerStatsStats `json:"stats"`
	StayedInSpawn bool `json:"stayed_in_spawn"`
	WasAfk bool `json:"was_afk"`
}

type _MatchesV4DataRoundPlayerStats MatchesV4DataRoundPlayerStats

// NewMatchesV4DataRoundPlayerStats instantiates a new MatchesV4DataRoundPlayerStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRoundPlayerStats(abilityCasts MatchesV4DataRoundPlayerStatsAbilityCasts, damageEvents []MatchesV4DataRoundPlayerStatsDamageEvents, economy MatchesV4DataRoundPlayerStatsEconomy, player MatchesV4DataRoundPlayer, receivedPenalty bool, stats MatchesV4DataRoundPlayerStatsStats, stayedInSpawn bool, wasAfk bool) *MatchesV4DataRoundPlayerStats {
	this := MatchesV4DataRoundPlayerStats{}
	this.AbilityCasts = abilityCasts
	this.DamageEvents = damageEvents
	this.Economy = economy
	this.Player = player
	this.ReceivedPenalty = receivedPenalty
	this.Stats = stats
	this.StayedInSpawn = stayedInSpawn
	this.WasAfk = wasAfk
	return &this
}

// NewMatchesV4DataRoundPlayerStatsWithDefaults instantiates a new MatchesV4DataRoundPlayerStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundPlayerStatsWithDefaults() *MatchesV4DataRoundPlayerStats {
	this := MatchesV4DataRoundPlayerStats{}
	return &this
}

// GetAbilityCasts returns the AbilityCasts field value
func (o *MatchesV4DataRoundPlayerStats) GetAbilityCasts() MatchesV4DataRoundPlayerStatsAbilityCasts {
	if o == nil {
		var ret MatchesV4DataRoundPlayerStatsAbilityCasts
		return ret
	}

	return o.AbilityCasts
}

// GetAbilityCastsOk returns a tuple with the AbilityCasts field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetAbilityCastsOk() (*MatchesV4DataRoundPlayerStatsAbilityCasts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbilityCasts, true
}

// SetAbilityCasts sets field value
func (o *MatchesV4DataRoundPlayerStats) SetAbilityCasts(v MatchesV4DataRoundPlayerStatsAbilityCasts) {
	o.AbilityCasts = v
}

// GetDamageEvents returns the DamageEvents field value
func (o *MatchesV4DataRoundPlayerStats) GetDamageEvents() []MatchesV4DataRoundPlayerStatsDamageEvents {
	if o == nil {
		var ret []MatchesV4DataRoundPlayerStatsDamageEvents
		return ret
	}

	return o.DamageEvents
}

// GetDamageEventsOk returns a tuple with the DamageEvents field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetDamageEventsOk() ([]MatchesV4DataRoundPlayerStatsDamageEvents, bool) {
	if o == nil {
		return nil, false
	}
	return o.DamageEvents, true
}

// SetDamageEvents sets field value
func (o *MatchesV4DataRoundPlayerStats) SetDamageEvents(v []MatchesV4DataRoundPlayerStatsDamageEvents) {
	o.DamageEvents = v
}

// GetEconomy returns the Economy field value
func (o *MatchesV4DataRoundPlayerStats) GetEconomy() MatchesV4DataRoundPlayerStatsEconomy {
	if o == nil {
		var ret MatchesV4DataRoundPlayerStatsEconomy
		return ret
	}

	return o.Economy
}

// GetEconomyOk returns a tuple with the Economy field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetEconomyOk() (*MatchesV4DataRoundPlayerStatsEconomy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Economy, true
}

// SetEconomy sets field value
func (o *MatchesV4DataRoundPlayerStats) SetEconomy(v MatchesV4DataRoundPlayerStatsEconomy) {
	o.Economy = v
}

// GetPlayer returns the Player field value
func (o *MatchesV4DataRoundPlayerStats) GetPlayer() MatchesV4DataRoundPlayer {
	if o == nil {
		var ret MatchesV4DataRoundPlayer
		return ret
	}

	return o.Player
}

// GetPlayerOk returns a tuple with the Player field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetPlayerOk() (*MatchesV4DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Player, true
}

// SetPlayer sets field value
func (o *MatchesV4DataRoundPlayerStats) SetPlayer(v MatchesV4DataRoundPlayer) {
	o.Player = v
}

// GetReceivedPenalty returns the ReceivedPenalty field value
func (o *MatchesV4DataRoundPlayerStats) GetReceivedPenalty() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReceivedPenalty
}

// GetReceivedPenaltyOk returns a tuple with the ReceivedPenalty field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetReceivedPenaltyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceivedPenalty, true
}

// SetReceivedPenalty sets field value
func (o *MatchesV4DataRoundPlayerStats) SetReceivedPenalty(v bool) {
	o.ReceivedPenalty = v
}

// GetStats returns the Stats field value
func (o *MatchesV4DataRoundPlayerStats) GetStats() MatchesV4DataRoundPlayerStatsStats {
	if o == nil {
		var ret MatchesV4DataRoundPlayerStatsStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetStatsOk() (*MatchesV4DataRoundPlayerStatsStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *MatchesV4DataRoundPlayerStats) SetStats(v MatchesV4DataRoundPlayerStatsStats) {
	o.Stats = v
}

// GetStayedInSpawn returns the StayedInSpawn field value
func (o *MatchesV4DataRoundPlayerStats) GetStayedInSpawn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StayedInSpawn
}

// GetStayedInSpawnOk returns a tuple with the StayedInSpawn field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetStayedInSpawnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StayedInSpawn, true
}

// SetStayedInSpawn sets field value
func (o *MatchesV4DataRoundPlayerStats) SetStayedInSpawn(v bool) {
	o.StayedInSpawn = v
}

// GetWasAfk returns the WasAfk field value
func (o *MatchesV4DataRoundPlayerStats) GetWasAfk() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WasAfk
}

// GetWasAfkOk returns a tuple with the WasAfk field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayerStats) GetWasAfkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WasAfk, true
}

// SetWasAfk sets field value
func (o *MatchesV4DataRoundPlayerStats) SetWasAfk(v bool) {
	o.WasAfk = v
}

func (o MatchesV4DataRoundPlayerStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRoundPlayerStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ability_casts"] = o.AbilityCasts
	toSerialize["damage_events"] = o.DamageEvents
	toSerialize["economy"] = o.Economy
	toSerialize["player"] = o.Player
	toSerialize["received_penalty"] = o.ReceivedPenalty
	toSerialize["stats"] = o.Stats
	toSerialize["stayed_in_spawn"] = o.StayedInSpawn
	toSerialize["was_afk"] = o.WasAfk
	return toSerialize, nil
}

func (o *MatchesV4DataRoundPlayerStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ability_casts",
		"damage_events",
		"economy",
		"player",
		"received_penalty",
		"stats",
		"stayed_in_spawn",
		"was_afk",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRoundPlayerStats := _MatchesV4DataRoundPlayerStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRoundPlayerStats)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRoundPlayerStats(varMatchesV4DataRoundPlayerStats)

	return err
}

type NullableMatchesV4DataRoundPlayerStats struct {
	value *MatchesV4DataRoundPlayerStats
	isSet bool
}

func (v NullableMatchesV4DataRoundPlayerStats) Get() *MatchesV4DataRoundPlayerStats {
	return v.value
}

func (v *NullableMatchesV4DataRoundPlayerStats) Set(val *MatchesV4DataRoundPlayerStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRoundPlayerStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRoundPlayerStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRoundPlayerStats(val *MatchesV4DataRoundPlayerStats) *NullableMatchesV4DataRoundPlayerStats {
	return &NullableMatchesV4DataRoundPlayerStats{value: val, isSet: true}
}

func (v NullableMatchesV4DataRoundPlayerStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRoundPlayerStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


