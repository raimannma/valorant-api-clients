/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"fmt"
)

// MatchMode the model 'MatchMode'
type MatchMode string

// List of MatchMode
const (
	COMPETITIVE MatchMode = "Competitive"
	UNRATED MatchMode = "Unrated"
	CUSTOM MatchMode = "Custom"
	PRACTICE MatchMode = "Practice"
	UNKNOWN MatchMode = "Unknown"
)

// All allowed values of MatchMode enum
var AllowedMatchModeEnumValues = []MatchMode{
	"Competitive",
	"Unrated",
	"Custom",
	"Practice",
	"Unknown",
}

func (v *MatchMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MatchMode(value)
	for _, existing := range AllowedMatchModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MatchMode", value)
}

// NewMatchModeFromValue returns a pointer to a valid MatchMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatchModeFromValue(v string) (*MatchMode, error) {
	ev := MatchMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MatchMode: valid values are %v", v, AllowedMatchModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatchMode) IsValid() bool {
	for _, existing := range AllowedMatchModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MatchMode value
func (v MatchMode) Ptr() *MatchMode {
	return &v
}

type NullableMatchMode struct {
	value *MatchMode
	isSet bool
}

func (v NullableMatchMode) Get() *MatchMode {
	return v.value
}

func (v *NullableMatchMode) Set(val *MatchMode) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchMode) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchMode(val *MatchMode) *NullableMatchMode {
	return &NullableMatchMode{value: val, isSet: true}
}

func (v NullableMatchMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

