/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataPlayerBehavior type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayerBehavior{}

// MatchesV2DataPlayerBehavior struct for MatchesV2DataPlayerBehavior
type MatchesV2DataPlayerBehavior struct {
	AfkRounds float32 `json:"afk_rounds"`
	FriendlyFire MatchesV2DataPlayerBehaviorFriendlyFire `json:"friendly_fire"`
	RoundsInSpawn NullableFloat32 `json:"rounds_in_spawn,omitempty"`
}

type _MatchesV2DataPlayerBehavior MatchesV2DataPlayerBehavior

// NewMatchesV2DataPlayerBehavior instantiates a new MatchesV2DataPlayerBehavior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayerBehavior(afkRounds float32, friendlyFire MatchesV2DataPlayerBehaviorFriendlyFire) *MatchesV2DataPlayerBehavior {
	this := MatchesV2DataPlayerBehavior{}
	this.AfkRounds = afkRounds
	this.FriendlyFire = friendlyFire
	return &this
}

// NewMatchesV2DataPlayerBehaviorWithDefaults instantiates a new MatchesV2DataPlayerBehavior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayerBehaviorWithDefaults() *MatchesV2DataPlayerBehavior {
	this := MatchesV2DataPlayerBehavior{}
	return &this
}

// GetAfkRounds returns the AfkRounds field value
func (o *MatchesV2DataPlayerBehavior) GetAfkRounds() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AfkRounds
}

// GetAfkRoundsOk returns a tuple with the AfkRounds field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerBehavior) GetAfkRoundsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AfkRounds, true
}

// SetAfkRounds sets field value
func (o *MatchesV2DataPlayerBehavior) SetAfkRounds(v float32) {
	o.AfkRounds = v
}

// GetFriendlyFire returns the FriendlyFire field value
func (o *MatchesV2DataPlayerBehavior) GetFriendlyFire() MatchesV2DataPlayerBehaviorFriendlyFire {
	if o == nil {
		var ret MatchesV2DataPlayerBehaviorFriendlyFire
		return ret
	}

	return o.FriendlyFire
}

// GetFriendlyFireOk returns a tuple with the FriendlyFire field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerBehavior) GetFriendlyFireOk() (*MatchesV2DataPlayerBehaviorFriendlyFire, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FriendlyFire, true
}

// SetFriendlyFire sets field value
func (o *MatchesV2DataPlayerBehavior) SetFriendlyFire(v MatchesV2DataPlayerBehaviorFriendlyFire) {
	o.FriendlyFire = v
}

// GetRoundsInSpawn returns the RoundsInSpawn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataPlayerBehavior) GetRoundsInSpawn() float32 {
	if o == nil || IsNil(o.RoundsInSpawn.Get()) {
		var ret float32
		return ret
	}
	return *o.RoundsInSpawn.Get()
}

// GetRoundsInSpawnOk returns a tuple with the RoundsInSpawn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataPlayerBehavior) GetRoundsInSpawnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundsInSpawn.Get(), o.RoundsInSpawn.IsSet()
}

// HasRoundsInSpawn returns a boolean if a field has been set.
func (o *MatchesV2DataPlayerBehavior) HasRoundsInSpawn() bool {
	if o != nil && o.RoundsInSpawn.IsSet() {
		return true
	}

	return false
}

// SetRoundsInSpawn gets a reference to the given NullableFloat32 and assigns it to the RoundsInSpawn field.
func (o *MatchesV2DataPlayerBehavior) SetRoundsInSpawn(v float32) {
	o.RoundsInSpawn.Set(&v)
}
// SetRoundsInSpawnNil sets the value for RoundsInSpawn to be an explicit nil
func (o *MatchesV2DataPlayerBehavior) SetRoundsInSpawnNil() {
	o.RoundsInSpawn.Set(nil)
}

// UnsetRoundsInSpawn ensures that no value is present for RoundsInSpawn, not even an explicit nil
func (o *MatchesV2DataPlayerBehavior) UnsetRoundsInSpawn() {
	o.RoundsInSpawn.Unset()
}

func (o MatchesV2DataPlayerBehavior) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayerBehavior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["afk_rounds"] = o.AfkRounds
	toSerialize["friendly_fire"] = o.FriendlyFire
	if o.RoundsInSpawn.IsSet() {
		toSerialize["rounds_in_spawn"] = o.RoundsInSpawn.Get()
	}
	return toSerialize, nil
}

func (o *MatchesV2DataPlayerBehavior) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"afk_rounds",
		"friendly_fire",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataPlayerBehavior := _MatchesV2DataPlayerBehavior{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataPlayerBehavior)

	if err != nil {
		return err
	}

	*o = MatchesV2DataPlayerBehavior(varMatchesV2DataPlayerBehavior)

	return err
}

type NullableMatchesV2DataPlayerBehavior struct {
	value *MatchesV2DataPlayerBehavior
	isSet bool
}

func (v NullableMatchesV2DataPlayerBehavior) Get() *MatchesV2DataPlayerBehavior {
	return v.value
}

func (v *NullableMatchesV2DataPlayerBehavior) Set(val *MatchesV2DataPlayerBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayerBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayerBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayerBehavior(val *MatchesV2DataPlayerBehavior) *NullableMatchesV2DataPlayerBehavior {
	return &NullableMatchesV2DataPlayerBehavior{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayerBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayerBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


