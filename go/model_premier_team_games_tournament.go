/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PremierTeamGamesTournament type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PremierTeamGamesTournament{}

// PremierTeamGamesTournament struct for PremierTeamGamesTournament
type PremierTeamGamesTournament struct {
	Matches []string `json:"matches"`
	Placement int32 `json:"placement"`
	PlacementLeagueBonus int32 `json:"placement_league_bonus"`
	PointsAfter int32 `json:"points_after"`
	PointsBefore int32 `json:"points_before"`
	TournamentId string `json:"tournament_id"`
}

type _PremierTeamGamesTournament PremierTeamGamesTournament

// NewPremierTeamGamesTournament instantiates a new PremierTeamGamesTournament object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremierTeamGamesTournament(matches []string, placement int32, placementLeagueBonus int32, pointsAfter int32, pointsBefore int32, tournamentId string) *PremierTeamGamesTournament {
	this := PremierTeamGamesTournament{}
	this.Matches = matches
	this.Placement = placement
	this.PlacementLeagueBonus = placementLeagueBonus
	this.PointsAfter = pointsAfter
	this.PointsBefore = pointsBefore
	this.TournamentId = tournamentId
	return &this
}

// NewPremierTeamGamesTournamentWithDefaults instantiates a new PremierTeamGamesTournament object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremierTeamGamesTournamentWithDefaults() *PremierTeamGamesTournament {
	this := PremierTeamGamesTournament{}
	return &this
}

// GetMatches returns the Matches field value
func (o *PremierTeamGamesTournament) GetMatches() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesTournament) GetMatchesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matches, true
}

// SetMatches sets field value
func (o *PremierTeamGamesTournament) SetMatches(v []string) {
	o.Matches = v
}

// GetPlacement returns the Placement field value
func (o *PremierTeamGamesTournament) GetPlacement() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesTournament) GetPlacementOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Placement, true
}

// SetPlacement sets field value
func (o *PremierTeamGamesTournament) SetPlacement(v int32) {
	o.Placement = v
}

// GetPlacementLeagueBonus returns the PlacementLeagueBonus field value
func (o *PremierTeamGamesTournament) GetPlacementLeagueBonus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlacementLeagueBonus
}

// GetPlacementLeagueBonusOk returns a tuple with the PlacementLeagueBonus field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesTournament) GetPlacementLeagueBonusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlacementLeagueBonus, true
}

// SetPlacementLeagueBonus sets field value
func (o *PremierTeamGamesTournament) SetPlacementLeagueBonus(v int32) {
	o.PlacementLeagueBonus = v
}

// GetPointsAfter returns the PointsAfter field value
func (o *PremierTeamGamesTournament) GetPointsAfter() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PointsAfter
}

// GetPointsAfterOk returns a tuple with the PointsAfter field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesTournament) GetPointsAfterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PointsAfter, true
}

// SetPointsAfter sets field value
func (o *PremierTeamGamesTournament) SetPointsAfter(v int32) {
	o.PointsAfter = v
}

// GetPointsBefore returns the PointsBefore field value
func (o *PremierTeamGamesTournament) GetPointsBefore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PointsBefore
}

// GetPointsBeforeOk returns a tuple with the PointsBefore field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesTournament) GetPointsBeforeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PointsBefore, true
}

// SetPointsBefore sets field value
func (o *PremierTeamGamesTournament) SetPointsBefore(v int32) {
	o.PointsBefore = v
}

// GetTournamentId returns the TournamentId field value
func (o *PremierTeamGamesTournament) GetTournamentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TournamentId
}

// GetTournamentIdOk returns a tuple with the TournamentId field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesTournament) GetTournamentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TournamentId, true
}

// SetTournamentId sets field value
func (o *PremierTeamGamesTournament) SetTournamentId(v string) {
	o.TournamentId = v
}

func (o PremierTeamGamesTournament) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PremierTeamGamesTournament) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matches"] = o.Matches
	toSerialize["placement"] = o.Placement
	toSerialize["placement_league_bonus"] = o.PlacementLeagueBonus
	toSerialize["points_after"] = o.PointsAfter
	toSerialize["points_before"] = o.PointsBefore
	toSerialize["tournament_id"] = o.TournamentId
	return toSerialize, nil
}

func (o *PremierTeamGamesTournament) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matches",
		"placement",
		"placement_league_bonus",
		"points_after",
		"points_before",
		"tournament_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPremierTeamGamesTournament := _PremierTeamGamesTournament{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPremierTeamGamesTournament)

	if err != nil {
		return err
	}

	*o = PremierTeamGamesTournament(varPremierTeamGamesTournament)

	return err
}

type NullablePremierTeamGamesTournament struct {
	value *PremierTeamGamesTournament
	isSet bool
}

func (v NullablePremierTeamGamesTournament) Get() *PremierTeamGamesTournament {
	return v.value
}

func (v *NullablePremierTeamGamesTournament) Set(val *PremierTeamGamesTournament) {
	v.value = val
	v.isSet = true
}

func (v NullablePremierTeamGamesTournament) IsSet() bool {
	return v.isSet
}

func (v *NullablePremierTeamGamesTournament) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremierTeamGamesTournament(val *PremierTeamGamesTournament) *NullablePremierTeamGamesTournament {
	return &NullablePremierTeamGamesTournament{value: val, isSet: true}
}

func (v NullablePremierTeamGamesTournament) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremierTeamGamesTournament) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


