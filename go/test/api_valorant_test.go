/*
HenrikDev API

Testing ValorantAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package henrikdevapiclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_henrikdevapiclient_ValorantAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ValorantAPIService Crosshair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ValorantAPI.Crosshair(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService EsportsSchedulesV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ValorantAPI.EsportsSchedulesV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetAccountByIdV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetAccountByIdV1(context.Background(), puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetAccountByIdV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetAccountByIdV2(context.Background(), puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetAccountV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetAccountV1(context.Background(), name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetAccountV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetAccountV2(context.Background(), name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetContentV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ValorantAPI.GetContentV1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMatchesV3ById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetMatchesV3ById(context.Background(), affinity, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMatchesV3ByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetMatchesV3ByName(context.Background(), affinity, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMatchesV4ById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetMatchesV4ById(context.Background(), affinity, platform, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMatchesV4ByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetMatchesV4ByName(context.Background(), affinity, platform, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrHistoryById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrHistoryById(context.Background(), affinity, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrHistoryByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrHistoryByName(context.Background(), affinity, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrHistoryV2ById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrHistoryV2ById(context.Background(), affinity, platform, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrHistoryV2ByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrHistoryV2ByName(context.Background(), affinity, platform, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrV1ById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrV1ById(context.Background(), affinity, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrV1ByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrV1ByName(context.Background(), affinity, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrV2ById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrV2ById(context.Background(), affinity, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrV2ByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrV2ByName(context.Background(), affinity, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrV3ById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrV3ById(context.Background(), affinity, platform, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService GetMmrV3ByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.GetMmrV3ByName(context.Background(), affinity, platform, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService LeaderboardV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string

		resp, httpRes, err := apiClient.ValorantAPI.LeaderboardV1(context.Background(), affinity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService LeaderboardV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string

		resp, httpRes, err := apiClient.ValorantAPI.LeaderboardV2(context.Background(), affinity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService LeaderboardV3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string

		resp, httpRes, err := apiClient.ValorantAPI.LeaderboardV3(context.Background(), affinity, platform).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService MatchV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var matchId string

		resp, httpRes, err := apiClient.ValorantAPI.MatchV2(context.Background(), matchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService MatchV4", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var matchId string

		resp, httpRes, err := apiClient.ValorantAPI.MatchV4(context.Background(), affinity, matchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService PremierById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ValorantAPI.PremierById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService PremierByIdHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ValorantAPI.PremierByIdHistory(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService PremierByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.PremierByName(context.Background(), name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService PremierByNameHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.PremierByNameHistory(context.Background(), name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService PremierLeaderboard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string

		resp, httpRes, err := apiClient.ValorantAPI.PremierLeaderboard(context.Background(), affinity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService PremierSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ValorantAPI.PremierSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService QueueStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string

		resp, httpRes, err := apiClient.ValorantAPI.QueueStatus(context.Background(), affinity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService Raw", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ValorantAPI.Raw(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService Status", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string

		resp, httpRes, err := apiClient.ValorantAPI.Status(context.Background(), affinity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoreFeatured", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string

		resp, httpRes, err := apiClient.ValorantAPI.StoreFeatured(context.Background(), version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoreOffers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string

		resp, httpRes, err := apiClient.ValorantAPI.StoreOffers(context.Background(), version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoredMatches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.StoredMatches(context.Background(), affinity, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoredMatchesById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.StoredMatchesById(context.Background(), affinity, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoredMmrHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.StoredMmrHistory(context.Background(), affinity, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoredMmrHistoryById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.StoredMmrHistoryById(context.Background(), affinity, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoredMmrHistoryV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var name string
		var tag string

		resp, httpRes, err := apiClient.ValorantAPI.StoredMmrHistoryV2(context.Background(), affinity, platform, name, tag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService StoredMmrHistoryV2ById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string
		var platform string
		var puuid string

		resp, httpRes, err := apiClient.ValorantAPI.StoredMmrHistoryV2ById(context.Background(), affinity, platform, puuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService Version", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var affinity string

		resp, httpRes, err := apiClient.ValorantAPI.Version(context.Background(), affinity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService Website", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryCode string

		resp, httpRes, err := apiClient.ValorantAPI.Website(context.Background(), countryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ValorantAPIService WebsiteById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dbId string
		var countryCode string

		resp, httpRes, err := apiClient.ValorantAPI.WebsiteById(context.Background(), dbId, countryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
