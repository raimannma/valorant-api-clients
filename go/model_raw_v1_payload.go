/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RawV1Payload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawV1Payload{}

// RawV1Payload struct for RawV1Payload
type RawV1Payload struct {
	Platform NullableString `json:"platform,omitempty"`
	Queries NullableString `json:"queries,omitempty"`
	Region string `json:"region"`
	Type string `json:"type"`
	Value RawV1PayloadValues `json:"value"`
}

type _RawV1Payload RawV1Payload

// NewRawV1Payload instantiates a new RawV1Payload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawV1Payload(region string, type_ string, value RawV1PayloadValues) *RawV1Payload {
	this := RawV1Payload{}
	this.Region = region
	this.Type = type_
	this.Value = value
	return &this
}

// NewRawV1PayloadWithDefaults instantiates a new RawV1Payload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawV1PayloadWithDefaults() *RawV1Payload {
	this := RawV1Payload{}
	return &this
}

// GetPlatform returns the Platform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawV1Payload) GetPlatform() string {
	if o == nil || IsNil(o.Platform.Get()) {
		var ret string
		return ret
	}
	return *o.Platform.Get()
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawV1Payload) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platform.Get(), o.Platform.IsSet()
}

// HasPlatform returns a boolean if a field has been set.
func (o *RawV1Payload) HasPlatform() bool {
	if o != nil && o.Platform.IsSet() {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given NullableString and assigns it to the Platform field.
func (o *RawV1Payload) SetPlatform(v string) {
	o.Platform.Set(&v)
}
// SetPlatformNil sets the value for Platform to be an explicit nil
func (o *RawV1Payload) SetPlatformNil() {
	o.Platform.Set(nil)
}

// UnsetPlatform ensures that no value is present for Platform, not even an explicit nil
func (o *RawV1Payload) UnsetPlatform() {
	o.Platform.Unset()
}

// GetQueries returns the Queries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawV1Payload) GetQueries() string {
	if o == nil || IsNil(o.Queries.Get()) {
		var ret string
		return ret
	}
	return *o.Queries.Get()
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawV1Payload) GetQueriesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries.Get(), o.Queries.IsSet()
}

// HasQueries returns a boolean if a field has been set.
func (o *RawV1Payload) HasQueries() bool {
	if o != nil && o.Queries.IsSet() {
		return true
	}

	return false
}

// SetQueries gets a reference to the given NullableString and assigns it to the Queries field.
func (o *RawV1Payload) SetQueries(v string) {
	o.Queries.Set(&v)
}
// SetQueriesNil sets the value for Queries to be an explicit nil
func (o *RawV1Payload) SetQueriesNil() {
	o.Queries.Set(nil)
}

// UnsetQueries ensures that no value is present for Queries, not even an explicit nil
func (o *RawV1Payload) UnsetQueries() {
	o.Queries.Unset()
}

// GetRegion returns the Region field value
func (o *RawV1Payload) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *RawV1Payload) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *RawV1Payload) SetRegion(v string) {
	o.Region = v
}

// GetType returns the Type field value
func (o *RawV1Payload) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RawV1Payload) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RawV1Payload) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *RawV1Payload) GetValue() RawV1PayloadValues {
	if o == nil {
		var ret RawV1PayloadValues
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *RawV1Payload) GetValueOk() (*RawV1PayloadValues, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *RawV1Payload) SetValue(v RawV1PayloadValues) {
	o.Value = v
}

func (o RawV1Payload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawV1Payload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Platform.IsSet() {
		toSerialize["platform"] = o.Platform.Get()
	}
	if o.Queries.IsSet() {
		toSerialize["queries"] = o.Queries.Get()
	}
	toSerialize["region"] = o.Region
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *RawV1Payload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawV1Payload := _RawV1Payload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRawV1Payload)

	if err != nil {
		return err
	}

	*o = RawV1Payload(varRawV1Payload)

	return err
}

type NullableRawV1Payload struct {
	value *RawV1Payload
	isSet bool
}

func (v NullableRawV1Payload) Get() *RawV1Payload {
	return v.value
}

func (v *NullableRawV1Payload) Set(val *RawV1Payload) {
	v.value = val
	v.isSet = true
}

func (v NullableRawV1Payload) IsSet() bool {
	return v.isSet
}

func (v *NullableRawV1Payload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawV1Payload(val *RawV1Payload) *NullableRawV1Payload {
	return &NullableRawV1Payload{value: val, isSet: true}
}

func (v NullableRawV1Payload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawV1Payload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


