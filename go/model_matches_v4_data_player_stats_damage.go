/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataPlayerStatsDamage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataPlayerStatsDamage{}

// MatchesV4DataPlayerStatsDamage struct for MatchesV4DataPlayerStatsDamage
type MatchesV4DataPlayerStatsDamage struct {
	Dealt int32 `json:"dealt"`
	Received int32 `json:"received"`
}

type _MatchesV4DataPlayerStatsDamage MatchesV4DataPlayerStatsDamage

// NewMatchesV4DataPlayerStatsDamage instantiates a new MatchesV4DataPlayerStatsDamage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataPlayerStatsDamage(dealt int32, received int32) *MatchesV4DataPlayerStatsDamage {
	this := MatchesV4DataPlayerStatsDamage{}
	this.Dealt = dealt
	this.Received = received
	return &this
}

// NewMatchesV4DataPlayerStatsDamageWithDefaults instantiates a new MatchesV4DataPlayerStatsDamage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataPlayerStatsDamageWithDefaults() *MatchesV4DataPlayerStatsDamage {
	this := MatchesV4DataPlayerStatsDamage{}
	return &this
}

// GetDealt returns the Dealt field value
func (o *MatchesV4DataPlayerStatsDamage) GetDealt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Dealt
}

// GetDealtOk returns a tuple with the Dealt field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerStatsDamage) GetDealtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dealt, true
}

// SetDealt sets field value
func (o *MatchesV4DataPlayerStatsDamage) SetDealt(v int32) {
	o.Dealt = v
}

// GetReceived returns the Received field value
func (o *MatchesV4DataPlayerStatsDamage) GetReceived() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Received
}

// GetReceivedOk returns a tuple with the Received field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerStatsDamage) GetReceivedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Received, true
}

// SetReceived sets field value
func (o *MatchesV4DataPlayerStatsDamage) SetReceived(v int32) {
	o.Received = v
}

func (o MatchesV4DataPlayerStatsDamage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataPlayerStatsDamage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dealt"] = o.Dealt
	toSerialize["received"] = o.Received
	return toSerialize, nil
}

func (o *MatchesV4DataPlayerStatsDamage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dealt",
		"received",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataPlayerStatsDamage := _MatchesV4DataPlayerStatsDamage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataPlayerStatsDamage)

	if err != nil {
		return err
	}

	*o = MatchesV4DataPlayerStatsDamage(varMatchesV4DataPlayerStatsDamage)

	return err
}

type NullableMatchesV4DataPlayerStatsDamage struct {
	value *MatchesV4DataPlayerStatsDamage
	isSet bool
}

func (v NullableMatchesV4DataPlayerStatsDamage) Get() *MatchesV4DataPlayerStatsDamage {
	return v.value
}

func (v *NullableMatchesV4DataPlayerStatsDamage) Set(val *MatchesV4DataPlayerStatsDamage) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataPlayerStatsDamage) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataPlayerStatsDamage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataPlayerStatsDamage(val *MatchesV4DataPlayerStatsDamage) *NullableMatchesV4DataPlayerStatsDamage {
	return &NullableMatchesV4DataPlayerStatsDamage{value: val, isSet: true}
}

func (v NullableMatchesV4DataPlayerStatsDamage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataPlayerStatsDamage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


