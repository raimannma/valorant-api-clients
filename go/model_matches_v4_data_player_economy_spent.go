/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataPlayerEconomySpent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataPlayerEconomySpent{}

// MatchesV4DataPlayerEconomySpent struct for MatchesV4DataPlayerEconomySpent
type MatchesV4DataPlayerEconomySpent struct {
	Average float32 `json:"average"`
	Overall int32 `json:"overall"`
}

type _MatchesV4DataPlayerEconomySpent MatchesV4DataPlayerEconomySpent

// NewMatchesV4DataPlayerEconomySpent instantiates a new MatchesV4DataPlayerEconomySpent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataPlayerEconomySpent(average float32, overall int32) *MatchesV4DataPlayerEconomySpent {
	this := MatchesV4DataPlayerEconomySpent{}
	this.Average = average
	this.Overall = overall
	return &this
}

// NewMatchesV4DataPlayerEconomySpentWithDefaults instantiates a new MatchesV4DataPlayerEconomySpent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataPlayerEconomySpentWithDefaults() *MatchesV4DataPlayerEconomySpent {
	this := MatchesV4DataPlayerEconomySpent{}
	return &this
}

// GetAverage returns the Average field value
func (o *MatchesV4DataPlayerEconomySpent) GetAverage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Average
}

// GetAverageOk returns a tuple with the Average field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerEconomySpent) GetAverageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Average, true
}

// SetAverage sets field value
func (o *MatchesV4DataPlayerEconomySpent) SetAverage(v float32) {
	o.Average = v
}

// GetOverall returns the Overall field value
func (o *MatchesV4DataPlayerEconomySpent) GetOverall() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Overall
}

// GetOverallOk returns a tuple with the Overall field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerEconomySpent) GetOverallOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Overall, true
}

// SetOverall sets field value
func (o *MatchesV4DataPlayerEconomySpent) SetOverall(v int32) {
	o.Overall = v
}

func (o MatchesV4DataPlayerEconomySpent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataPlayerEconomySpent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["average"] = o.Average
	toSerialize["overall"] = o.Overall
	return toSerialize, nil
}

func (o *MatchesV4DataPlayerEconomySpent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"average",
		"overall",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataPlayerEconomySpent := _MatchesV4DataPlayerEconomySpent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataPlayerEconomySpent)

	if err != nil {
		return err
	}

	*o = MatchesV4DataPlayerEconomySpent(varMatchesV4DataPlayerEconomySpent)

	return err
}

type NullableMatchesV4DataPlayerEconomySpent struct {
	value *MatchesV4DataPlayerEconomySpent
	isSet bool
}

func (v NullableMatchesV4DataPlayerEconomySpent) Get() *MatchesV4DataPlayerEconomySpent {
	return v.value
}

func (v *NullableMatchesV4DataPlayerEconomySpent) Set(val *MatchesV4DataPlayerEconomySpent) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataPlayerEconomySpent) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataPlayerEconomySpent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataPlayerEconomySpent(val *MatchesV4DataPlayerEconomySpent) *NullableMatchesV4DataPlayerEconomySpent {
	return &NullableMatchesV4DataPlayerEconomySpent{value: val, isSet: true}
}

func (v NullableMatchesV4DataPlayerEconomySpent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataPlayerEconomySpent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


