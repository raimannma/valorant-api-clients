/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataTeamRounds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataTeamRounds{}

// MatchesV4DataTeamRounds struct for MatchesV4DataTeamRounds
type MatchesV4DataTeamRounds struct {
	Lost int32 `json:"lost"`
	Won int32 `json:"won"`
}

type _MatchesV4DataTeamRounds MatchesV4DataTeamRounds

// NewMatchesV4DataTeamRounds instantiates a new MatchesV4DataTeamRounds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataTeamRounds(lost int32, won int32) *MatchesV4DataTeamRounds {
	this := MatchesV4DataTeamRounds{}
	this.Lost = lost
	this.Won = won
	return &this
}

// NewMatchesV4DataTeamRoundsWithDefaults instantiates a new MatchesV4DataTeamRounds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataTeamRoundsWithDefaults() *MatchesV4DataTeamRounds {
	this := MatchesV4DataTeamRounds{}
	return &this
}

// GetLost returns the Lost field value
func (o *MatchesV4DataTeamRounds) GetLost() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Lost
}

// GetLostOk returns a tuple with the Lost field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeamRounds) GetLostOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lost, true
}

// SetLost sets field value
func (o *MatchesV4DataTeamRounds) SetLost(v int32) {
	o.Lost = v
}

// GetWon returns the Won field value
func (o *MatchesV4DataTeamRounds) GetWon() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Won
}

// GetWonOk returns a tuple with the Won field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataTeamRounds) GetWonOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Won, true
}

// SetWon sets field value
func (o *MatchesV4DataTeamRounds) SetWon(v int32) {
	o.Won = v
}

func (o MatchesV4DataTeamRounds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataTeamRounds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lost"] = o.Lost
	toSerialize["won"] = o.Won
	return toSerialize, nil
}

func (o *MatchesV4DataTeamRounds) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lost",
		"won",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataTeamRounds := _MatchesV4DataTeamRounds{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataTeamRounds)

	if err != nil {
		return err
	}

	*o = MatchesV4DataTeamRounds(varMatchesV4DataTeamRounds)

	return err
}

type NullableMatchesV4DataTeamRounds struct {
	value *MatchesV4DataTeamRounds
	isSet bool
}

func (v NullableMatchesV4DataTeamRounds) Get() *MatchesV4DataTeamRounds {
	return v.value
}

func (v *NullableMatchesV4DataTeamRounds) Set(val *MatchesV4DataTeamRounds) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataTeamRounds) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataTeamRounds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataTeamRounds(val *MatchesV4DataTeamRounds) *NullableMatchesV4DataTeamRounds {
	return &NullableMatchesV4DataTeamRounds{value: val, isSet: true}
}

func (v NullableMatchesV4DataTeamRounds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataTeamRounds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


