/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StatusIncidentUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusIncidentUpdate{}

// StatusIncidentUpdate struct for StatusIncidentUpdate
type StatusIncidentUpdate struct {
	Author string `json:"author"`
	CreatedAt string `json:"created_at"`
	Id int32 `json:"id"`
	Publish bool `json:"publish"`
	PublishLocations []string `json:"publish_locations"`
	Translations []StatusIncidentContent `json:"translations"`
	UpdatedAt string `json:"updated_at"`
}

type _StatusIncidentUpdate StatusIncidentUpdate

// NewStatusIncidentUpdate instantiates a new StatusIncidentUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusIncidentUpdate(author string, createdAt string, id int32, publish bool, publishLocations []string, translations []StatusIncidentContent, updatedAt string) *StatusIncidentUpdate {
	this := StatusIncidentUpdate{}
	this.Author = author
	this.CreatedAt = createdAt
	this.Id = id
	this.Publish = publish
	this.PublishLocations = publishLocations
	this.Translations = translations
	this.UpdatedAt = updatedAt
	return &this
}

// NewStatusIncidentUpdateWithDefaults instantiates a new StatusIncidentUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusIncidentUpdateWithDefaults() *StatusIncidentUpdate {
	this := StatusIncidentUpdate{}
	return &this
}

// GetAuthor returns the Author field value
func (o *StatusIncidentUpdate) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentUpdate) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *StatusIncidentUpdate) SetAuthor(v string) {
	o.Author = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *StatusIncidentUpdate) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentUpdate) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *StatusIncidentUpdate) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *StatusIncidentUpdate) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentUpdate) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StatusIncidentUpdate) SetId(v int32) {
	o.Id = v
}

// GetPublish returns the Publish field value
func (o *StatusIncidentUpdate) GetPublish() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Publish
}

// GetPublishOk returns a tuple with the Publish field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentUpdate) GetPublishOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Publish, true
}

// SetPublish sets field value
func (o *StatusIncidentUpdate) SetPublish(v bool) {
	o.Publish = v
}

// GetPublishLocations returns the PublishLocations field value
func (o *StatusIncidentUpdate) GetPublishLocations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PublishLocations
}

// GetPublishLocationsOk returns a tuple with the PublishLocations field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentUpdate) GetPublishLocationsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublishLocations, true
}

// SetPublishLocations sets field value
func (o *StatusIncidentUpdate) SetPublishLocations(v []string) {
	o.PublishLocations = v
}

// GetTranslations returns the Translations field value
func (o *StatusIncidentUpdate) GetTranslations() []StatusIncidentContent {
	if o == nil {
		var ret []StatusIncidentContent
		return ret
	}

	return o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentUpdate) GetTranslationsOk() ([]StatusIncidentContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Translations, true
}

// SetTranslations sets field value
func (o *StatusIncidentUpdate) SetTranslations(v []StatusIncidentContent) {
	o.Translations = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *StatusIncidentUpdate) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentUpdate) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *StatusIncidentUpdate) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o StatusIncidentUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusIncidentUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["author"] = o.Author
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["publish"] = o.Publish
	toSerialize["publish_locations"] = o.PublishLocations
	toSerialize["translations"] = o.Translations
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *StatusIncidentUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"author",
		"created_at",
		"id",
		"publish",
		"publish_locations",
		"translations",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatusIncidentUpdate := _StatusIncidentUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatusIncidentUpdate)

	if err != nil {
		return err
	}

	*o = StatusIncidentUpdate(varStatusIncidentUpdate)

	return err
}

type NullableStatusIncidentUpdate struct {
	value *StatusIncidentUpdate
	isSet bool
}

func (v NullableStatusIncidentUpdate) Get() *StatusIncidentUpdate {
	return v.value
}

func (v *NullableStatusIncidentUpdate) Set(val *StatusIncidentUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusIncidentUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusIncidentUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusIncidentUpdate(val *StatusIncidentUpdate) *NullableStatusIncidentUpdate {
	return &NullableStatusIncidentUpdate{value: val, isSet: true}
}

func (v NullableStatusIncidentUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusIncidentUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


