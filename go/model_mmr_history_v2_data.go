/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRHistoryV2Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRHistoryV2Data{}

// MMRHistoryV2Data struct for MMRHistoryV2Data
type MMRHistoryV2Data struct {
	Account MMRV3Account `json:"account"`
	History []MMRHistoryV2History `json:"history"`
}

type _MMRHistoryV2Data MMRHistoryV2Data

// NewMMRHistoryV2Data instantiates a new MMRHistoryV2Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRHistoryV2Data(account MMRV3Account, history []MMRHistoryV2History) *MMRHistoryV2Data {
	this := MMRHistoryV2Data{}
	this.Account = account
	this.History = history
	return &this
}

// NewMMRHistoryV2DataWithDefaults instantiates a new MMRHistoryV2Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRHistoryV2DataWithDefaults() *MMRHistoryV2Data {
	this := MMRHistoryV2Data{}
	return &this
}

// GetAccount returns the Account field value
func (o *MMRHistoryV2Data) GetAccount() MMRV3Account {
	if o == nil {
		var ret MMRV3Account
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *MMRHistoryV2Data) GetAccountOk() (*MMRV3Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *MMRHistoryV2Data) SetAccount(v MMRV3Account) {
	o.Account = v
}

// GetHistory returns the History field value
func (o *MMRHistoryV2Data) GetHistory() []MMRHistoryV2History {
	if o == nil {
		var ret []MMRHistoryV2History
		return ret
	}

	return o.History
}

// GetHistoryOk returns a tuple with the History field value
// and a boolean to check if the value has been set.
func (o *MMRHistoryV2Data) GetHistoryOk() ([]MMRHistoryV2History, bool) {
	if o == nil {
		return nil, false
	}
	return o.History, true
}

// SetHistory sets field value
func (o *MMRHistoryV2Data) SetHistory(v []MMRHistoryV2History) {
	o.History = v
}

func (o MMRHistoryV2Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRHistoryV2Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account"] = o.Account
	toSerialize["history"] = o.History
	return toSerialize, nil
}

func (o *MMRHistoryV2Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account",
		"history",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRHistoryV2Data := _MMRHistoryV2Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRHistoryV2Data)

	if err != nil {
		return err
	}

	*o = MMRHistoryV2Data(varMMRHistoryV2Data)

	return err
}

type NullableMMRHistoryV2Data struct {
	value *MMRHistoryV2Data
	isSet bool
}

func (v NullableMMRHistoryV2Data) Get() *MMRHistoryV2Data {
	return v.value
}

func (v *NullableMMRHistoryV2Data) Set(val *MMRHistoryV2Data) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRHistoryV2Data) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRHistoryV2Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRHistoryV2Data(val *MMRHistoryV2Data) *NullableMMRHistoryV2Data {
	return &NullableMMRHistoryV2Data{value: val, isSet: true}
}

func (v NullableMMRHistoryV2Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRHistoryV2Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


