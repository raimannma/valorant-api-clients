/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoredMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoredMatch{}

// StoredMatch struct for StoredMatch
type StoredMatch struct {
	Meta StoredMatchMeta `json:"meta"`
	Stats StoredMatchStats `json:"stats"`
	Teams StoredMatchTeam `json:"teams"`
}

type _StoredMatch StoredMatch

// NewStoredMatch instantiates a new StoredMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoredMatch(meta StoredMatchMeta, stats StoredMatchStats, teams StoredMatchTeam) *StoredMatch {
	this := StoredMatch{}
	this.Meta = meta
	this.Stats = stats
	this.Teams = teams
	return &this
}

// NewStoredMatchWithDefaults instantiates a new StoredMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoredMatchWithDefaults() *StoredMatch {
	this := StoredMatch{}
	return &this
}

// GetMeta returns the Meta field value
func (o *StoredMatch) GetMeta() StoredMatchMeta {
	if o == nil {
		var ret StoredMatchMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *StoredMatch) GetMetaOk() (*StoredMatchMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *StoredMatch) SetMeta(v StoredMatchMeta) {
	o.Meta = v
}

// GetStats returns the Stats field value
func (o *StoredMatch) GetStats() StoredMatchStats {
	if o == nil {
		var ret StoredMatchStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *StoredMatch) GetStatsOk() (*StoredMatchStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *StoredMatch) SetStats(v StoredMatchStats) {
	o.Stats = v
}

// GetTeams returns the Teams field value
func (o *StoredMatch) GetTeams() StoredMatchTeam {
	if o == nil {
		var ret StoredMatchTeam
		return ret
	}

	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value
// and a boolean to check if the value has been set.
func (o *StoredMatch) GetTeamsOk() (*StoredMatchTeam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Teams, true
}

// SetTeams sets field value
func (o *StoredMatch) SetTeams(v StoredMatchTeam) {
	o.Teams = v
}

func (o StoredMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoredMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["meta"] = o.Meta
	toSerialize["stats"] = o.Stats
	toSerialize["teams"] = o.Teams
	return toSerialize, nil
}

func (o *StoredMatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meta",
		"stats",
		"teams",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoredMatch := _StoredMatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoredMatch)

	if err != nil {
		return err
	}

	*o = StoredMatch(varStoredMatch)

	return err
}

type NullableStoredMatch struct {
	value *StoredMatch
	isSet bool
}

func (v NullableStoredMatch) Get() *StoredMatch {
	return v.value
}

func (v *NullableStoredMatch) Set(val *StoredMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableStoredMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableStoredMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoredMatch(val *StoredMatch) *NullableStoredMatch {
	return &NullableStoredMatch{value: val, isSet: true}
}

func (v NullableStoredMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoredMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


