/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataPlayerAssets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayerAssets{}

// MatchesV2DataPlayerAssets struct for MatchesV2DataPlayerAssets
type MatchesV2DataPlayerAssets struct {
	Agent MatchesV2DataPlayerAssetsAgent `json:"agent"`
	Card MatchesV2DataPlayerAssetsCard `json:"card"`
}

type _MatchesV2DataPlayerAssets MatchesV2DataPlayerAssets

// NewMatchesV2DataPlayerAssets instantiates a new MatchesV2DataPlayerAssets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayerAssets(agent MatchesV2DataPlayerAssetsAgent, card MatchesV2DataPlayerAssetsCard) *MatchesV2DataPlayerAssets {
	this := MatchesV2DataPlayerAssets{}
	this.Agent = agent
	this.Card = card
	return &this
}

// NewMatchesV2DataPlayerAssetsWithDefaults instantiates a new MatchesV2DataPlayerAssets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayerAssetsWithDefaults() *MatchesV2DataPlayerAssets {
	this := MatchesV2DataPlayerAssets{}
	return &this
}

// GetAgent returns the Agent field value
func (o *MatchesV2DataPlayerAssets) GetAgent() MatchesV2DataPlayerAssetsAgent {
	if o == nil {
		var ret MatchesV2DataPlayerAssetsAgent
		return ret
	}

	return o.Agent
}

// GetAgentOk returns a tuple with the Agent field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerAssets) GetAgentOk() (*MatchesV2DataPlayerAssetsAgent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Agent, true
}

// SetAgent sets field value
func (o *MatchesV2DataPlayerAssets) SetAgent(v MatchesV2DataPlayerAssetsAgent) {
	o.Agent = v
}

// GetCard returns the Card field value
func (o *MatchesV2DataPlayerAssets) GetCard() MatchesV2DataPlayerAssetsCard {
	if o == nil {
		var ret MatchesV2DataPlayerAssetsCard
		return ret
	}

	return o.Card
}

// GetCardOk returns a tuple with the Card field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerAssets) GetCardOk() (*MatchesV2DataPlayerAssetsCard, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Card, true
}

// SetCard sets field value
func (o *MatchesV2DataPlayerAssets) SetCard(v MatchesV2DataPlayerAssetsCard) {
	o.Card = v
}

func (o MatchesV2DataPlayerAssets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayerAssets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["agent"] = o.Agent
	toSerialize["card"] = o.Card
	return toSerialize, nil
}

func (o *MatchesV2DataPlayerAssets) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agent",
		"card",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataPlayerAssets := _MatchesV2DataPlayerAssets{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataPlayerAssets)

	if err != nil {
		return err
	}

	*o = MatchesV2DataPlayerAssets(varMatchesV2DataPlayerAssets)

	return err
}

type NullableMatchesV2DataPlayerAssets struct {
	value *MatchesV2DataPlayerAssets
	isSet bool
}

func (v NullableMatchesV2DataPlayerAssets) Get() *MatchesV2DataPlayerAssets {
	return v.value
}

func (v *NullableMatchesV2DataPlayerAssets) Set(val *MatchesV2DataPlayerAssets) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayerAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayerAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayerAssets(val *MatchesV2DataPlayerAssets) *NullableMatchesV2DataPlayerAssets {
	return &NullableMatchesV2DataPlayerAssets{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayerAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayerAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


