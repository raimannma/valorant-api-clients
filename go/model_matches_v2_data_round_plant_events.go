/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
)

// checks if the MatchesV2DataRoundPlantEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataRoundPlantEvents{}

// MatchesV2DataRoundPlantEvents struct for MatchesV2DataRoundPlantEvents
type MatchesV2DataRoundPlantEvents struct {
	PlantLocation NullableMatchesV2DataRoundEventLocation `json:"plant_location,omitempty"`
	PlantSite NullableString `json:"plant_site,omitempty"`
	PlantTimeInRound NullableInt64 `json:"plant_time_in_round,omitempty"`
	PlantedBy NullableMatchesV2DataRoundPlayer `json:"planted_by,omitempty"`
	PlayerLocationsOnPlant []MatchesV2DataRoundPlayerLocationsOnEvent `json:"player_locations_on_plant,omitempty"`
}

// NewMatchesV2DataRoundPlantEvents instantiates a new MatchesV2DataRoundPlantEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataRoundPlantEvents() *MatchesV2DataRoundPlantEvents {
	this := MatchesV2DataRoundPlantEvents{}
	return &this
}

// NewMatchesV2DataRoundPlantEventsWithDefaults instantiates a new MatchesV2DataRoundPlantEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataRoundPlantEventsWithDefaults() *MatchesV2DataRoundPlantEvents {
	this := MatchesV2DataRoundPlantEvents{}
	return &this
}

// GetPlantLocation returns the PlantLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundPlantEvents) GetPlantLocation() MatchesV2DataRoundEventLocation {
	if o == nil || IsNil(o.PlantLocation.Get()) {
		var ret MatchesV2DataRoundEventLocation
		return ret
	}
	return *o.PlantLocation.Get()
}

// GetPlantLocationOk returns a tuple with the PlantLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundPlantEvents) GetPlantLocationOk() (*MatchesV2DataRoundEventLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlantLocation.Get(), o.PlantLocation.IsSet()
}

// HasPlantLocation returns a boolean if a field has been set.
func (o *MatchesV2DataRoundPlantEvents) HasPlantLocation() bool {
	if o != nil && o.PlantLocation.IsSet() {
		return true
	}

	return false
}

// SetPlantLocation gets a reference to the given NullableMatchesV2DataRoundEventLocation and assigns it to the PlantLocation field.
func (o *MatchesV2DataRoundPlantEvents) SetPlantLocation(v MatchesV2DataRoundEventLocation) {
	o.PlantLocation.Set(&v)
}
// SetPlantLocationNil sets the value for PlantLocation to be an explicit nil
func (o *MatchesV2DataRoundPlantEvents) SetPlantLocationNil() {
	o.PlantLocation.Set(nil)
}

// UnsetPlantLocation ensures that no value is present for PlantLocation, not even an explicit nil
func (o *MatchesV2DataRoundPlantEvents) UnsetPlantLocation() {
	o.PlantLocation.Unset()
}

// GetPlantSite returns the PlantSite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundPlantEvents) GetPlantSite() string {
	if o == nil || IsNil(o.PlantSite.Get()) {
		var ret string
		return ret
	}
	return *o.PlantSite.Get()
}

// GetPlantSiteOk returns a tuple with the PlantSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundPlantEvents) GetPlantSiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlantSite.Get(), o.PlantSite.IsSet()
}

// HasPlantSite returns a boolean if a field has been set.
func (o *MatchesV2DataRoundPlantEvents) HasPlantSite() bool {
	if o != nil && o.PlantSite.IsSet() {
		return true
	}

	return false
}

// SetPlantSite gets a reference to the given NullableString and assigns it to the PlantSite field.
func (o *MatchesV2DataRoundPlantEvents) SetPlantSite(v string) {
	o.PlantSite.Set(&v)
}
// SetPlantSiteNil sets the value for PlantSite to be an explicit nil
func (o *MatchesV2DataRoundPlantEvents) SetPlantSiteNil() {
	o.PlantSite.Set(nil)
}

// UnsetPlantSite ensures that no value is present for PlantSite, not even an explicit nil
func (o *MatchesV2DataRoundPlantEvents) UnsetPlantSite() {
	o.PlantSite.Unset()
}

// GetPlantTimeInRound returns the PlantTimeInRound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundPlantEvents) GetPlantTimeInRound() int64 {
	if o == nil || IsNil(o.PlantTimeInRound.Get()) {
		var ret int64
		return ret
	}
	return *o.PlantTimeInRound.Get()
}

// GetPlantTimeInRoundOk returns a tuple with the PlantTimeInRound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundPlantEvents) GetPlantTimeInRoundOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlantTimeInRound.Get(), o.PlantTimeInRound.IsSet()
}

// HasPlantTimeInRound returns a boolean if a field has been set.
func (o *MatchesV2DataRoundPlantEvents) HasPlantTimeInRound() bool {
	if o != nil && o.PlantTimeInRound.IsSet() {
		return true
	}

	return false
}

// SetPlantTimeInRound gets a reference to the given NullableInt64 and assigns it to the PlantTimeInRound field.
func (o *MatchesV2DataRoundPlantEvents) SetPlantTimeInRound(v int64) {
	o.PlantTimeInRound.Set(&v)
}
// SetPlantTimeInRoundNil sets the value for PlantTimeInRound to be an explicit nil
func (o *MatchesV2DataRoundPlantEvents) SetPlantTimeInRoundNil() {
	o.PlantTimeInRound.Set(nil)
}

// UnsetPlantTimeInRound ensures that no value is present for PlantTimeInRound, not even an explicit nil
func (o *MatchesV2DataRoundPlantEvents) UnsetPlantTimeInRound() {
	o.PlantTimeInRound.Unset()
}

// GetPlantedBy returns the PlantedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundPlantEvents) GetPlantedBy() MatchesV2DataRoundPlayer {
	if o == nil || IsNil(o.PlantedBy.Get()) {
		var ret MatchesV2DataRoundPlayer
		return ret
	}
	return *o.PlantedBy.Get()
}

// GetPlantedByOk returns a tuple with the PlantedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundPlantEvents) GetPlantedByOk() (*MatchesV2DataRoundPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlantedBy.Get(), o.PlantedBy.IsSet()
}

// HasPlantedBy returns a boolean if a field has been set.
func (o *MatchesV2DataRoundPlantEvents) HasPlantedBy() bool {
	if o != nil && o.PlantedBy.IsSet() {
		return true
	}

	return false
}

// SetPlantedBy gets a reference to the given NullableMatchesV2DataRoundPlayer and assigns it to the PlantedBy field.
func (o *MatchesV2DataRoundPlantEvents) SetPlantedBy(v MatchesV2DataRoundPlayer) {
	o.PlantedBy.Set(&v)
}
// SetPlantedByNil sets the value for PlantedBy to be an explicit nil
func (o *MatchesV2DataRoundPlantEvents) SetPlantedByNil() {
	o.PlantedBy.Set(nil)
}

// UnsetPlantedBy ensures that no value is present for PlantedBy, not even an explicit nil
func (o *MatchesV2DataRoundPlantEvents) UnsetPlantedBy() {
	o.PlantedBy.Unset()
}

// GetPlayerLocationsOnPlant returns the PlayerLocationsOnPlant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataRoundPlantEvents) GetPlayerLocationsOnPlant() []MatchesV2DataRoundPlayerLocationsOnEvent {
	if o == nil {
		var ret []MatchesV2DataRoundPlayerLocationsOnEvent
		return ret
	}
	return o.PlayerLocationsOnPlant
}

// GetPlayerLocationsOnPlantOk returns a tuple with the PlayerLocationsOnPlant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataRoundPlantEvents) GetPlayerLocationsOnPlantOk() ([]MatchesV2DataRoundPlayerLocationsOnEvent, bool) {
	if o == nil || IsNil(o.PlayerLocationsOnPlant) {
		return nil, false
	}
	return o.PlayerLocationsOnPlant, true
}

// HasPlayerLocationsOnPlant returns a boolean if a field has been set.
func (o *MatchesV2DataRoundPlantEvents) HasPlayerLocationsOnPlant() bool {
	if o != nil && !IsNil(o.PlayerLocationsOnPlant) {
		return true
	}

	return false
}

// SetPlayerLocationsOnPlant gets a reference to the given []MatchesV2DataRoundPlayerLocationsOnEvent and assigns it to the PlayerLocationsOnPlant field.
func (o *MatchesV2DataRoundPlantEvents) SetPlayerLocationsOnPlant(v []MatchesV2DataRoundPlayerLocationsOnEvent) {
	o.PlayerLocationsOnPlant = v
}

func (o MatchesV2DataRoundPlantEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataRoundPlantEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PlantLocation.IsSet() {
		toSerialize["plant_location"] = o.PlantLocation.Get()
	}
	if o.PlantSite.IsSet() {
		toSerialize["plant_site"] = o.PlantSite.Get()
	}
	if o.PlantTimeInRound.IsSet() {
		toSerialize["plant_time_in_round"] = o.PlantTimeInRound.Get()
	}
	if o.PlantedBy.IsSet() {
		toSerialize["planted_by"] = o.PlantedBy.Get()
	}
	if o.PlayerLocationsOnPlant != nil {
		toSerialize["player_locations_on_plant"] = o.PlayerLocationsOnPlant
	}
	return toSerialize, nil
}

type NullableMatchesV2DataRoundPlantEvents struct {
	value *MatchesV2DataRoundPlantEvents
	isSet bool
}

func (v NullableMatchesV2DataRoundPlantEvents) Get() *MatchesV2DataRoundPlantEvents {
	return v.value
}

func (v *NullableMatchesV2DataRoundPlantEvents) Set(val *MatchesV2DataRoundPlantEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataRoundPlantEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataRoundPlantEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataRoundPlantEvents(val *MatchesV2DataRoundPlantEvents) *NullableMatchesV2DataRoundPlantEvents {
	return &NullableMatchesV2DataRoundPlantEvents{value: val, isSet: true}
}

func (v NullableMatchesV2DataRoundPlantEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataRoundPlantEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


