/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataPlayerCustomization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataPlayerCustomization{}

// MatchesV4DataPlayerCustomization struct for MatchesV4DataPlayerCustomization
type MatchesV4DataPlayerCustomization struct {
	Card string `json:"card"`
	PreferredLevelBorder NullableString `json:"preferred_level_border,omitempty"`
	Title string `json:"title"`
}

type _MatchesV4DataPlayerCustomization MatchesV4DataPlayerCustomization

// NewMatchesV4DataPlayerCustomization instantiates a new MatchesV4DataPlayerCustomization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataPlayerCustomization(card string, title string) *MatchesV4DataPlayerCustomization {
	this := MatchesV4DataPlayerCustomization{}
	this.Card = card
	this.Title = title
	return &this
}

// NewMatchesV4DataPlayerCustomizationWithDefaults instantiates a new MatchesV4DataPlayerCustomization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataPlayerCustomizationWithDefaults() *MatchesV4DataPlayerCustomization {
	this := MatchesV4DataPlayerCustomization{}
	return &this
}

// GetCard returns the Card field value
func (o *MatchesV4DataPlayerCustomization) GetCard() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Card
}

// GetCardOk returns a tuple with the Card field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerCustomization) GetCardOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Card, true
}

// SetCard sets field value
func (o *MatchesV4DataPlayerCustomization) SetCard(v string) {
	o.Card = v
}

// GetPreferredLevelBorder returns the PreferredLevelBorder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataPlayerCustomization) GetPreferredLevelBorder() string {
	if o == nil || IsNil(o.PreferredLevelBorder.Get()) {
		var ret string
		return ret
	}
	return *o.PreferredLevelBorder.Get()
}

// GetPreferredLevelBorderOk returns a tuple with the PreferredLevelBorder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataPlayerCustomization) GetPreferredLevelBorderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredLevelBorder.Get(), o.PreferredLevelBorder.IsSet()
}

// HasPreferredLevelBorder returns a boolean if a field has been set.
func (o *MatchesV4DataPlayerCustomization) HasPreferredLevelBorder() bool {
	if o != nil && o.PreferredLevelBorder.IsSet() {
		return true
	}

	return false
}

// SetPreferredLevelBorder gets a reference to the given NullableString and assigns it to the PreferredLevelBorder field.
func (o *MatchesV4DataPlayerCustomization) SetPreferredLevelBorder(v string) {
	o.PreferredLevelBorder.Set(&v)
}
// SetPreferredLevelBorderNil sets the value for PreferredLevelBorder to be an explicit nil
func (o *MatchesV4DataPlayerCustomization) SetPreferredLevelBorderNil() {
	o.PreferredLevelBorder.Set(nil)
}

// UnsetPreferredLevelBorder ensures that no value is present for PreferredLevelBorder, not even an explicit nil
func (o *MatchesV4DataPlayerCustomization) UnsetPreferredLevelBorder() {
	o.PreferredLevelBorder.Unset()
}

// GetTitle returns the Title field value
func (o *MatchesV4DataPlayerCustomization) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerCustomization) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *MatchesV4DataPlayerCustomization) SetTitle(v string) {
	o.Title = v
}

func (o MatchesV4DataPlayerCustomization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataPlayerCustomization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["card"] = o.Card
	if o.PreferredLevelBorder.IsSet() {
		toSerialize["preferred_level_border"] = o.PreferredLevelBorder.Get()
	}
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *MatchesV4DataPlayerCustomization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"card",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataPlayerCustomization := _MatchesV4DataPlayerCustomization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataPlayerCustomization)

	if err != nil {
		return err
	}

	*o = MatchesV4DataPlayerCustomization(varMatchesV4DataPlayerCustomization)

	return err
}

type NullableMatchesV4DataPlayerCustomization struct {
	value *MatchesV4DataPlayerCustomization
	isSet bool
}

func (v NullableMatchesV4DataPlayerCustomization) Get() *MatchesV4DataPlayerCustomization {
	return v.value
}

func (v *NullableMatchesV4DataPlayerCustomization) Set(val *MatchesV4DataPlayerCustomization) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataPlayerCustomization) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataPlayerCustomization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataPlayerCustomization(val *MatchesV4DataPlayerCustomization) *NullableMatchesV4DataPlayerCustomization {
	return &NullableMatchesV4DataPlayerCustomization{value: val, isSet: true}
}

func (v NullableMatchesV4DataPlayerCustomization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataPlayerCustomization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


