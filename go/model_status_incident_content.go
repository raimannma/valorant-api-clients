/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StatusIncidentContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusIncidentContent{}

// StatusIncidentContent struct for StatusIncidentContent
type StatusIncidentContent struct {
	Content string `json:"content"`
	Locale string `json:"locale"`
}

type _StatusIncidentContent StatusIncidentContent

// NewStatusIncidentContent instantiates a new StatusIncidentContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusIncidentContent(content string, locale string) *StatusIncidentContent {
	this := StatusIncidentContent{}
	this.Content = content
	this.Locale = locale
	return &this
}

// NewStatusIncidentContentWithDefaults instantiates a new StatusIncidentContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusIncidentContentWithDefaults() *StatusIncidentContent {
	this := StatusIncidentContent{}
	return &this
}

// GetContent returns the Content field value
func (o *StatusIncidentContent) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentContent) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *StatusIncidentContent) SetContent(v string) {
	o.Content = v
}

// GetLocale returns the Locale field value
func (o *StatusIncidentContent) GetLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *StatusIncidentContent) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *StatusIncidentContent) SetLocale(v string) {
	o.Locale = v
}

func (o StatusIncidentContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusIncidentContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["locale"] = o.Locale
	return toSerialize, nil
}

func (o *StatusIncidentContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"locale",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatusIncidentContent := _StatusIncidentContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatusIncidentContent)

	if err != nil {
		return err
	}

	*o = StatusIncidentContent(varStatusIncidentContent)

	return err
}

type NullableStatusIncidentContent struct {
	value *StatusIncidentContent
	isSet bool
}

func (v NullableStatusIncidentContent) Get() *StatusIncidentContent {
	return v.value
}

func (v *NullableStatusIncidentContent) Set(val *StatusIncidentContent) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusIncidentContent) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusIncidentContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusIncidentContent(val *StatusIncidentContent) *NullableStatusIncidentContent {
	return &NullableStatusIncidentContent{value: val, isSet: true}
}

func (v NullableStatusIncidentContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusIncidentContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


