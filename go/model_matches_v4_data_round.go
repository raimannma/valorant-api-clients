/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRound{}

// MatchesV4DataRound struct for MatchesV4DataRound
type MatchesV4DataRound struct {
	Ceremony string `json:"ceremony"`
	Defuse NullableMatchesV4DataRoundDefuse `json:"defuse,omitempty"`
	Id int32 `json:"id"`
	Plant NullableMatchesV4DataRoundPlant `json:"plant,omitempty"`
	Result string `json:"result"`
	Stats []MatchesV4DataRoundPlayerStats `json:"stats"`
	WinningTeam string `json:"winning_team"`
}

type _MatchesV4DataRound MatchesV4DataRound

// NewMatchesV4DataRound instantiates a new MatchesV4DataRound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRound(ceremony string, id int32, result string, stats []MatchesV4DataRoundPlayerStats, winningTeam string) *MatchesV4DataRound {
	this := MatchesV4DataRound{}
	this.Ceremony = ceremony
	this.Id = id
	this.Result = result
	this.Stats = stats
	this.WinningTeam = winningTeam
	return &this
}

// NewMatchesV4DataRoundWithDefaults instantiates a new MatchesV4DataRound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundWithDefaults() *MatchesV4DataRound {
	this := MatchesV4DataRound{}
	return &this
}

// GetCeremony returns the Ceremony field value
func (o *MatchesV4DataRound) GetCeremony() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ceremony
}

// GetCeremonyOk returns a tuple with the Ceremony field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRound) GetCeremonyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ceremony, true
}

// SetCeremony sets field value
func (o *MatchesV4DataRound) SetCeremony(v string) {
	o.Ceremony = v
}

// GetDefuse returns the Defuse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataRound) GetDefuse() MatchesV4DataRoundDefuse {
	if o == nil || IsNil(o.Defuse.Get()) {
		var ret MatchesV4DataRoundDefuse
		return ret
	}
	return *o.Defuse.Get()
}

// GetDefuseOk returns a tuple with the Defuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataRound) GetDefuseOk() (*MatchesV4DataRoundDefuse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Defuse.Get(), o.Defuse.IsSet()
}

// HasDefuse returns a boolean if a field has been set.
func (o *MatchesV4DataRound) HasDefuse() bool {
	if o != nil && o.Defuse.IsSet() {
		return true
	}

	return false
}

// SetDefuse gets a reference to the given NullableMatchesV4DataRoundDefuse and assigns it to the Defuse field.
func (o *MatchesV4DataRound) SetDefuse(v MatchesV4DataRoundDefuse) {
	o.Defuse.Set(&v)
}
// SetDefuseNil sets the value for Defuse to be an explicit nil
func (o *MatchesV4DataRound) SetDefuseNil() {
	o.Defuse.Set(nil)
}

// UnsetDefuse ensures that no value is present for Defuse, not even an explicit nil
func (o *MatchesV4DataRound) UnsetDefuse() {
	o.Defuse.Unset()
}

// GetId returns the Id field value
func (o *MatchesV4DataRound) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRound) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MatchesV4DataRound) SetId(v int32) {
	o.Id = v
}

// GetPlant returns the Plant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataRound) GetPlant() MatchesV4DataRoundPlant {
	if o == nil || IsNil(o.Plant.Get()) {
		var ret MatchesV4DataRoundPlant
		return ret
	}
	return *o.Plant.Get()
}

// GetPlantOk returns a tuple with the Plant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataRound) GetPlantOk() (*MatchesV4DataRoundPlant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plant.Get(), o.Plant.IsSet()
}

// HasPlant returns a boolean if a field has been set.
func (o *MatchesV4DataRound) HasPlant() bool {
	if o != nil && o.Plant.IsSet() {
		return true
	}

	return false
}

// SetPlant gets a reference to the given NullableMatchesV4DataRoundPlant and assigns it to the Plant field.
func (o *MatchesV4DataRound) SetPlant(v MatchesV4DataRoundPlant) {
	o.Plant.Set(&v)
}
// SetPlantNil sets the value for Plant to be an explicit nil
func (o *MatchesV4DataRound) SetPlantNil() {
	o.Plant.Set(nil)
}

// UnsetPlant ensures that no value is present for Plant, not even an explicit nil
func (o *MatchesV4DataRound) UnsetPlant() {
	o.Plant.Unset()
}

// GetResult returns the Result field value
func (o *MatchesV4DataRound) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRound) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *MatchesV4DataRound) SetResult(v string) {
	o.Result = v
}

// GetStats returns the Stats field value
func (o *MatchesV4DataRound) GetStats() []MatchesV4DataRoundPlayerStats {
	if o == nil {
		var ret []MatchesV4DataRoundPlayerStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRound) GetStatsOk() ([]MatchesV4DataRoundPlayerStats, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stats, true
}

// SetStats sets field value
func (o *MatchesV4DataRound) SetStats(v []MatchesV4DataRoundPlayerStats) {
	o.Stats = v
}

// GetWinningTeam returns the WinningTeam field value
func (o *MatchesV4DataRound) GetWinningTeam() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WinningTeam
}

// GetWinningTeamOk returns a tuple with the WinningTeam field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRound) GetWinningTeamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WinningTeam, true
}

// SetWinningTeam sets field value
func (o *MatchesV4DataRound) SetWinningTeam(v string) {
	o.WinningTeam = v
}

func (o MatchesV4DataRound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ceremony"] = o.Ceremony
	if o.Defuse.IsSet() {
		toSerialize["defuse"] = o.Defuse.Get()
	}
	toSerialize["id"] = o.Id
	if o.Plant.IsSet() {
		toSerialize["plant"] = o.Plant.Get()
	}
	toSerialize["result"] = o.Result
	toSerialize["stats"] = o.Stats
	toSerialize["winning_team"] = o.WinningTeam
	return toSerialize, nil
}

func (o *MatchesV4DataRound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ceremony",
		"id",
		"result",
		"stats",
		"winning_team",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRound := _MatchesV4DataRound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRound)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRound(varMatchesV4DataRound)

	return err
}

type NullableMatchesV4DataRound struct {
	value *MatchesV4DataRound
	isSet bool
}

func (v NullableMatchesV4DataRound) Get() *MatchesV4DataRound {
	return v.value
}

func (v *NullableMatchesV4DataRound) Set(val *MatchesV4DataRound) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRound) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRound(val *MatchesV4DataRound) *NullableMatchesV4DataRound {
	return &NullableMatchesV4DataRound{value: val, isSet: true}
}

func (v NullableMatchesV4DataRound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


