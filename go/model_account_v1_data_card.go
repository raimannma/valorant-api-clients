/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountV1DataCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountV1DataCard{}

// AccountV1DataCard struct for AccountV1DataCard
type AccountV1DataCard struct {
	Id string `json:"id"`
	Large string `json:"large"`
	Small string `json:"small"`
	Wide string `json:"wide"`
}

type _AccountV1DataCard AccountV1DataCard

// NewAccountV1DataCard instantiates a new AccountV1DataCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountV1DataCard(id string, large string, small string, wide string) *AccountV1DataCard {
	this := AccountV1DataCard{}
	this.Id = id
	this.Large = large
	this.Small = small
	this.Wide = wide
	return &this
}

// NewAccountV1DataCardWithDefaults instantiates a new AccountV1DataCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountV1DataCardWithDefaults() *AccountV1DataCard {
	this := AccountV1DataCard{}
	return &this
}

// GetId returns the Id field value
func (o *AccountV1DataCard) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountV1DataCard) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountV1DataCard) SetId(v string) {
	o.Id = v
}

// GetLarge returns the Large field value
func (o *AccountV1DataCard) GetLarge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Large
}

// GetLargeOk returns a tuple with the Large field value
// and a boolean to check if the value has been set.
func (o *AccountV1DataCard) GetLargeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Large, true
}

// SetLarge sets field value
func (o *AccountV1DataCard) SetLarge(v string) {
	o.Large = v
}

// GetSmall returns the Small field value
func (o *AccountV1DataCard) GetSmall() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Small
}

// GetSmallOk returns a tuple with the Small field value
// and a boolean to check if the value has been set.
func (o *AccountV1DataCard) GetSmallOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Small, true
}

// SetSmall sets field value
func (o *AccountV1DataCard) SetSmall(v string) {
	o.Small = v
}

// GetWide returns the Wide field value
func (o *AccountV1DataCard) GetWide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wide
}

// GetWideOk returns a tuple with the Wide field value
// and a boolean to check if the value has been set.
func (o *AccountV1DataCard) GetWideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wide, true
}

// SetWide sets field value
func (o *AccountV1DataCard) SetWide(v string) {
	o.Wide = v
}

func (o AccountV1DataCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountV1DataCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["large"] = o.Large
	toSerialize["small"] = o.Small
	toSerialize["wide"] = o.Wide
	return toSerialize, nil
}

func (o *AccountV1DataCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"large",
		"small",
		"wide",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountV1DataCard := _AccountV1DataCard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountV1DataCard)

	if err != nil {
		return err
	}

	*o = AccountV1DataCard(varAccountV1DataCard)

	return err
}

type NullableAccountV1DataCard struct {
	value *AccountV1DataCard
	isSet bool
}

func (v NullableAccountV1DataCard) Get() *AccountV1DataCard {
	return v.value
}

func (v *NullableAccountV1DataCard) Set(val *AccountV1DataCard) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountV1DataCard) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountV1DataCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountV1DataCard(val *AccountV1DataCard) *NullableAccountV1DataCard {
	return &NullableAccountV1DataCard{value: val, isSet: true}
}

func (v NullableAccountV1DataCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountV1DataCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


