/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataPlayerAssetsCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataPlayerAssetsCard{}

// MatchesV2DataPlayerAssetsCard struct for MatchesV2DataPlayerAssetsCard
type MatchesV2DataPlayerAssetsCard struct {
	Large string `json:"large"`
	Small string `json:"small"`
	Wide string `json:"wide"`
}

type _MatchesV2DataPlayerAssetsCard MatchesV2DataPlayerAssetsCard

// NewMatchesV2DataPlayerAssetsCard instantiates a new MatchesV2DataPlayerAssetsCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataPlayerAssetsCard(large string, small string, wide string) *MatchesV2DataPlayerAssetsCard {
	this := MatchesV2DataPlayerAssetsCard{}
	this.Large = large
	this.Small = small
	this.Wide = wide
	return &this
}

// NewMatchesV2DataPlayerAssetsCardWithDefaults instantiates a new MatchesV2DataPlayerAssetsCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataPlayerAssetsCardWithDefaults() *MatchesV2DataPlayerAssetsCard {
	this := MatchesV2DataPlayerAssetsCard{}
	return &this
}

// GetLarge returns the Large field value
func (o *MatchesV2DataPlayerAssetsCard) GetLarge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Large
}

// GetLargeOk returns a tuple with the Large field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerAssetsCard) GetLargeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Large, true
}

// SetLarge sets field value
func (o *MatchesV2DataPlayerAssetsCard) SetLarge(v string) {
	o.Large = v
}

// GetSmall returns the Small field value
func (o *MatchesV2DataPlayerAssetsCard) GetSmall() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Small
}

// GetSmallOk returns a tuple with the Small field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerAssetsCard) GetSmallOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Small, true
}

// SetSmall sets field value
func (o *MatchesV2DataPlayerAssetsCard) SetSmall(v string) {
	o.Small = v
}

// GetWide returns the Wide field value
func (o *MatchesV2DataPlayerAssetsCard) GetWide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wide
}

// GetWideOk returns a tuple with the Wide field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataPlayerAssetsCard) GetWideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wide, true
}

// SetWide sets field value
func (o *MatchesV2DataPlayerAssetsCard) SetWide(v string) {
	o.Wide = v
}

func (o MatchesV2DataPlayerAssetsCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataPlayerAssetsCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["large"] = o.Large
	toSerialize["small"] = o.Small
	toSerialize["wide"] = o.Wide
	return toSerialize, nil
}

func (o *MatchesV2DataPlayerAssetsCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"large",
		"small",
		"wide",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataPlayerAssetsCard := _MatchesV2DataPlayerAssetsCard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataPlayerAssetsCard)

	if err != nil {
		return err
	}

	*o = MatchesV2DataPlayerAssetsCard(varMatchesV2DataPlayerAssetsCard)

	return err
}

type NullableMatchesV2DataPlayerAssetsCard struct {
	value *MatchesV2DataPlayerAssetsCard
	isSet bool
}

func (v NullableMatchesV2DataPlayerAssetsCard) Get() *MatchesV2DataPlayerAssetsCard {
	return v.value
}

func (v *NullableMatchesV2DataPlayerAssetsCard) Set(val *MatchesV2DataPlayerAssetsCard) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataPlayerAssetsCard) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataPlayerAssetsCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataPlayerAssetsCard(val *MatchesV2DataPlayerAssetsCard) *NullableMatchesV2DataPlayerAssetsCard {
	return &NullableMatchesV2DataPlayerAssetsCard{value: val, isSet: true}
}

func (v NullableMatchesV2DataPlayerAssetsCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataPlayerAssetsCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


