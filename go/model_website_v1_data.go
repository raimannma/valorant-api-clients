/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebsiteV1Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebsiteV1Data{}

// WebsiteV1Data struct for WebsiteV1Data
type WebsiteV1Data struct {
	BannerUrl NullableString `json:"banner_url,omitempty"`
	Category string `json:"category"`
	Date string `json:"date"`
	Description NullableString `json:"description,omitempty"`
	ExternalLink NullableString `json:"external_link,omitempty"`
	Id string `json:"id"`
	Title string `json:"title"`
	Url string `json:"url"`
}

type _WebsiteV1Data WebsiteV1Data

// NewWebsiteV1Data instantiates a new WebsiteV1Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteV1Data(category string, date string, id string, title string, url string) *WebsiteV1Data {
	this := WebsiteV1Data{}
	this.Category = category
	this.Date = date
	this.Id = id
	this.Title = title
	this.Url = url
	return &this
}

// NewWebsiteV1DataWithDefaults instantiates a new WebsiteV1Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteV1DataWithDefaults() *WebsiteV1Data {
	this := WebsiteV1Data{}
	return &this
}

// GetBannerUrl returns the BannerUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteV1Data) GetBannerUrl() string {
	if o == nil || IsNil(o.BannerUrl.Get()) {
		var ret string
		return ret
	}
	return *o.BannerUrl.Get()
}

// GetBannerUrlOk returns a tuple with the BannerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteV1Data) GetBannerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BannerUrl.Get(), o.BannerUrl.IsSet()
}

// HasBannerUrl returns a boolean if a field has been set.
func (o *WebsiteV1Data) HasBannerUrl() bool {
	if o != nil && o.BannerUrl.IsSet() {
		return true
	}

	return false
}

// SetBannerUrl gets a reference to the given NullableString and assigns it to the BannerUrl field.
func (o *WebsiteV1Data) SetBannerUrl(v string) {
	o.BannerUrl.Set(&v)
}
// SetBannerUrlNil sets the value for BannerUrl to be an explicit nil
func (o *WebsiteV1Data) SetBannerUrlNil() {
	o.BannerUrl.Set(nil)
}

// UnsetBannerUrl ensures that no value is present for BannerUrl, not even an explicit nil
func (o *WebsiteV1Data) UnsetBannerUrl() {
	o.BannerUrl.Unset()
}

// GetCategory returns the Category field value
func (o *WebsiteV1Data) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *WebsiteV1Data) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *WebsiteV1Data) SetCategory(v string) {
	o.Category = v
}

// GetDate returns the Date field value
func (o *WebsiteV1Data) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *WebsiteV1Data) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *WebsiteV1Data) SetDate(v string) {
	o.Date = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteV1Data) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteV1Data) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *WebsiteV1Data) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *WebsiteV1Data) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *WebsiteV1Data) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *WebsiteV1Data) UnsetDescription() {
	o.Description.Unset()
}

// GetExternalLink returns the ExternalLink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteV1Data) GetExternalLink() string {
	if o == nil || IsNil(o.ExternalLink.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalLink.Get()
}

// GetExternalLinkOk returns a tuple with the ExternalLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteV1Data) GetExternalLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalLink.Get(), o.ExternalLink.IsSet()
}

// HasExternalLink returns a boolean if a field has been set.
func (o *WebsiteV1Data) HasExternalLink() bool {
	if o != nil && o.ExternalLink.IsSet() {
		return true
	}

	return false
}

// SetExternalLink gets a reference to the given NullableString and assigns it to the ExternalLink field.
func (o *WebsiteV1Data) SetExternalLink(v string) {
	o.ExternalLink.Set(&v)
}
// SetExternalLinkNil sets the value for ExternalLink to be an explicit nil
func (o *WebsiteV1Data) SetExternalLinkNil() {
	o.ExternalLink.Set(nil)
}

// UnsetExternalLink ensures that no value is present for ExternalLink, not even an explicit nil
func (o *WebsiteV1Data) UnsetExternalLink() {
	o.ExternalLink.Unset()
}

// GetId returns the Id field value
func (o *WebsiteV1Data) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebsiteV1Data) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebsiteV1Data) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *WebsiteV1Data) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *WebsiteV1Data) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *WebsiteV1Data) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value
func (o *WebsiteV1Data) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebsiteV1Data) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebsiteV1Data) SetUrl(v string) {
	o.Url = v
}

func (o WebsiteV1Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebsiteV1Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BannerUrl.IsSet() {
		toSerialize["banner_url"] = o.BannerUrl.Get()
	}
	toSerialize["category"] = o.Category
	toSerialize["date"] = o.Date
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ExternalLink.IsSet() {
		toSerialize["external_link"] = o.ExternalLink.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *WebsiteV1Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"date",
		"id",
		"title",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebsiteV1Data := _WebsiteV1Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebsiteV1Data)

	if err != nil {
		return err
	}

	*o = WebsiteV1Data(varWebsiteV1Data)

	return err
}

type NullableWebsiteV1Data struct {
	value *WebsiteV1Data
	isSet bool
}

func (v NullableWebsiteV1Data) Get() *WebsiteV1Data {
	return v.value
}

func (v *NullableWebsiteV1Data) Set(val *WebsiteV1Data) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteV1Data) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteV1Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteV1Data(val *WebsiteV1Data) *NullableWebsiteV1Data {
	return &NullableWebsiteV1Data{value: val, isSet: true}
}

func (v NullableWebsiteV1Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteV1Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


