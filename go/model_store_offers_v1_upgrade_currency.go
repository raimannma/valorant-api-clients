/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoreOffersV1UpgradeCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreOffersV1UpgradeCurrency{}

// StoreOffersV1UpgradeCurrency struct for StoreOffersV1UpgradeCurrency
type StoreOffersV1UpgradeCurrency struct {
	DiscountedPercent float64 `json:"DiscountedPercent"`
	Offer StoreOffersV1Offer `json:"Offer"`
	OfferID string `json:"OfferID"`
	StorefrontItemID string `json:"StorefrontItemID"`
}

type _StoreOffersV1UpgradeCurrency StoreOffersV1UpgradeCurrency

// NewStoreOffersV1UpgradeCurrency instantiates a new StoreOffersV1UpgradeCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreOffersV1UpgradeCurrency(discountedPercent float64, offer StoreOffersV1Offer, offerID string, storefrontItemID string) *StoreOffersV1UpgradeCurrency {
	this := StoreOffersV1UpgradeCurrency{}
	this.DiscountedPercent = discountedPercent
	this.Offer = offer
	this.OfferID = offerID
	this.StorefrontItemID = storefrontItemID
	return &this
}

// NewStoreOffersV1UpgradeCurrencyWithDefaults instantiates a new StoreOffersV1UpgradeCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreOffersV1UpgradeCurrencyWithDefaults() *StoreOffersV1UpgradeCurrency {
	this := StoreOffersV1UpgradeCurrency{}
	return &this
}

// GetDiscountedPercent returns the DiscountedPercent field value
func (o *StoreOffersV1UpgradeCurrency) GetDiscountedPercent() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DiscountedPercent
}

// GetDiscountedPercentOk returns a tuple with the DiscountedPercent field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1UpgradeCurrency) GetDiscountedPercentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscountedPercent, true
}

// SetDiscountedPercent sets field value
func (o *StoreOffersV1UpgradeCurrency) SetDiscountedPercent(v float64) {
	o.DiscountedPercent = v
}

// GetOffer returns the Offer field value
func (o *StoreOffersV1UpgradeCurrency) GetOffer() StoreOffersV1Offer {
	if o == nil {
		var ret StoreOffersV1Offer
		return ret
	}

	return o.Offer
}

// GetOfferOk returns a tuple with the Offer field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1UpgradeCurrency) GetOfferOk() (*StoreOffersV1Offer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offer, true
}

// SetOffer sets field value
func (o *StoreOffersV1UpgradeCurrency) SetOffer(v StoreOffersV1Offer) {
	o.Offer = v
}

// GetOfferID returns the OfferID field value
func (o *StoreOffersV1UpgradeCurrency) GetOfferID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfferID
}

// GetOfferIDOk returns a tuple with the OfferID field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1UpgradeCurrency) GetOfferIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferID, true
}

// SetOfferID sets field value
func (o *StoreOffersV1UpgradeCurrency) SetOfferID(v string) {
	o.OfferID = v
}

// GetStorefrontItemID returns the StorefrontItemID field value
func (o *StoreOffersV1UpgradeCurrency) GetStorefrontItemID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorefrontItemID
}

// GetStorefrontItemIDOk returns a tuple with the StorefrontItemID field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1UpgradeCurrency) GetStorefrontItemIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorefrontItemID, true
}

// SetStorefrontItemID sets field value
func (o *StoreOffersV1UpgradeCurrency) SetStorefrontItemID(v string) {
	o.StorefrontItemID = v
}

func (o StoreOffersV1UpgradeCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreOffersV1UpgradeCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DiscountedPercent"] = o.DiscountedPercent
	toSerialize["Offer"] = o.Offer
	toSerialize["OfferID"] = o.OfferID
	toSerialize["StorefrontItemID"] = o.StorefrontItemID
	return toSerialize, nil
}

func (o *StoreOffersV1UpgradeCurrency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DiscountedPercent",
		"Offer",
		"OfferID",
		"StorefrontItemID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreOffersV1UpgradeCurrency := _StoreOffersV1UpgradeCurrency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoreOffersV1UpgradeCurrency)

	if err != nil {
		return err
	}

	*o = StoreOffersV1UpgradeCurrency(varStoreOffersV1UpgradeCurrency)

	return err
}

type NullableStoreOffersV1UpgradeCurrency struct {
	value *StoreOffersV1UpgradeCurrency
	isSet bool
}

func (v NullableStoreOffersV1UpgradeCurrency) Get() *StoreOffersV1UpgradeCurrency {
	return v.value
}

func (v *NullableStoreOffersV1UpgradeCurrency) Set(val *StoreOffersV1UpgradeCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreOffersV1UpgradeCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreOffersV1UpgradeCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreOffersV1UpgradeCurrency(val *StoreOffersV1UpgradeCurrency) *NullableStoreOffersV1UpgradeCurrency {
	return &NullableStoreOffersV1UpgradeCurrency{value: val, isSet: true}
}

func (v NullableStoreOffersV1UpgradeCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreOffersV1UpgradeCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


