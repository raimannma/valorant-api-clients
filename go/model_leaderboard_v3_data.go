/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LeaderboardV3Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeaderboardV3Data{}

// LeaderboardV3Data struct for LeaderboardV3Data
type LeaderboardV3Data struct {
	Players []LeaderboardV3DataPlayer `json:"players"`
	Thresholds []LeaderboardV3DataThreshold `json:"thresholds"`
	UpdatedAt string `json:"updated_at"`
}

type _LeaderboardV3Data LeaderboardV3Data

// NewLeaderboardV3Data instantiates a new LeaderboardV3Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeaderboardV3Data(players []LeaderboardV3DataPlayer, thresholds []LeaderboardV3DataThreshold, updatedAt string) *LeaderboardV3Data {
	this := LeaderboardV3Data{}
	this.Players = players
	this.Thresholds = thresholds
	this.UpdatedAt = updatedAt
	return &this
}

// NewLeaderboardV3DataWithDefaults instantiates a new LeaderboardV3Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaderboardV3DataWithDefaults() *LeaderboardV3Data {
	this := LeaderboardV3Data{}
	return &this
}

// GetPlayers returns the Players field value
func (o *LeaderboardV3Data) GetPlayers() []LeaderboardV3DataPlayer {
	if o == nil {
		var ret []LeaderboardV3DataPlayer
		return ret
	}

	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value
// and a boolean to check if the value has been set.
func (o *LeaderboardV3Data) GetPlayersOk() ([]LeaderboardV3DataPlayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Players, true
}

// SetPlayers sets field value
func (o *LeaderboardV3Data) SetPlayers(v []LeaderboardV3DataPlayer) {
	o.Players = v
}

// GetThresholds returns the Thresholds field value
func (o *LeaderboardV3Data) GetThresholds() []LeaderboardV3DataThreshold {
	if o == nil {
		var ret []LeaderboardV3DataThreshold
		return ret
	}

	return o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value
// and a boolean to check if the value has been set.
func (o *LeaderboardV3Data) GetThresholdsOk() ([]LeaderboardV3DataThreshold, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thresholds, true
}

// SetThresholds sets field value
func (o *LeaderboardV3Data) SetThresholds(v []LeaderboardV3DataThreshold) {
	o.Thresholds = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *LeaderboardV3Data) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *LeaderboardV3Data) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *LeaderboardV3Data) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o LeaderboardV3Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeaderboardV3Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["players"] = o.Players
	toSerialize["thresholds"] = o.Thresholds
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *LeaderboardV3Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"players",
		"thresholds",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLeaderboardV3Data := _LeaderboardV3Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLeaderboardV3Data)

	if err != nil {
		return err
	}

	*o = LeaderboardV3Data(varLeaderboardV3Data)

	return err
}

type NullableLeaderboardV3Data struct {
	value *LeaderboardV3Data
	isSet bool
}

func (v NullableLeaderboardV3Data) Get() *LeaderboardV3Data {
	return v.value
}

func (v *NullableLeaderboardV3Data) Set(val *LeaderboardV3Data) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaderboardV3Data) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaderboardV3Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaderboardV3Data(val *LeaderboardV3Data) *NullableLeaderboardV3Data {
	return &NullableLeaderboardV3Data{value: val, isSet: true}
}

func (v NullableLeaderboardV3Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaderboardV3Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


