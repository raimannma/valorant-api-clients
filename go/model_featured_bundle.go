/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FeaturedBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeaturedBundle{}

// FeaturedBundle struct for FeaturedBundle
type FeaturedBundle struct {
	Bundle Bundle `json:"Bundle"`
	BundleRemainingDurationInSeconds int32 `json:"BundleRemainingDurationInSeconds"`
	Bundles []Bundle `json:"Bundles"`
}

type _FeaturedBundle FeaturedBundle

// NewFeaturedBundle instantiates a new FeaturedBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeaturedBundle(bundle Bundle, bundleRemainingDurationInSeconds int32, bundles []Bundle) *FeaturedBundle {
	this := FeaturedBundle{}
	this.Bundle = bundle
	this.BundleRemainingDurationInSeconds = bundleRemainingDurationInSeconds
	this.Bundles = bundles
	return &this
}

// NewFeaturedBundleWithDefaults instantiates a new FeaturedBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeaturedBundleWithDefaults() *FeaturedBundle {
	this := FeaturedBundle{}
	return &this
}

// GetBundle returns the Bundle field value
func (o *FeaturedBundle) GetBundle() Bundle {
	if o == nil {
		var ret Bundle
		return ret
	}

	return o.Bundle
}

// GetBundleOk returns a tuple with the Bundle field value
// and a boolean to check if the value has been set.
func (o *FeaturedBundle) GetBundleOk() (*Bundle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bundle, true
}

// SetBundle sets field value
func (o *FeaturedBundle) SetBundle(v Bundle) {
	o.Bundle = v
}

// GetBundleRemainingDurationInSeconds returns the BundleRemainingDurationInSeconds field value
func (o *FeaturedBundle) GetBundleRemainingDurationInSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BundleRemainingDurationInSeconds
}

// GetBundleRemainingDurationInSecondsOk returns a tuple with the BundleRemainingDurationInSeconds field value
// and a boolean to check if the value has been set.
func (o *FeaturedBundle) GetBundleRemainingDurationInSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BundleRemainingDurationInSeconds, true
}

// SetBundleRemainingDurationInSeconds sets field value
func (o *FeaturedBundle) SetBundleRemainingDurationInSeconds(v int32) {
	o.BundleRemainingDurationInSeconds = v
}

// GetBundles returns the Bundles field value
func (o *FeaturedBundle) GetBundles() []Bundle {
	if o == nil {
		var ret []Bundle
		return ret
	}

	return o.Bundles
}

// GetBundlesOk returns a tuple with the Bundles field value
// and a boolean to check if the value has been set.
func (o *FeaturedBundle) GetBundlesOk() ([]Bundle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bundles, true
}

// SetBundles sets field value
func (o *FeaturedBundle) SetBundles(v []Bundle) {
	o.Bundles = v
}

func (o FeaturedBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeaturedBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Bundle"] = o.Bundle
	toSerialize["BundleRemainingDurationInSeconds"] = o.BundleRemainingDurationInSeconds
	toSerialize["Bundles"] = o.Bundles
	return toSerialize, nil
}

func (o *FeaturedBundle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Bundle",
		"BundleRemainingDurationInSeconds",
		"Bundles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeaturedBundle := _FeaturedBundle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeaturedBundle)

	if err != nil {
		return err
	}

	*o = FeaturedBundle(varFeaturedBundle)

	return err
}

type NullableFeaturedBundle struct {
	value *FeaturedBundle
	isSet bool
}

func (v NullableFeaturedBundle) Get() *FeaturedBundle {
	return v.value
}

func (v *NullableFeaturedBundle) Set(val *FeaturedBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableFeaturedBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableFeaturedBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeaturedBundle(val *FeaturedBundle) *NullableFeaturedBundle {
	return &NullableFeaturedBundle{value: val, isSet: true}
}

func (v NullableFeaturedBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeaturedBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


