/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataTeams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataTeams{}

// MatchesV2DataTeams struct for MatchesV2DataTeams
type MatchesV2DataTeams struct {
	Blue MatchesV2DataTeam `json:"blue"`
	Red MatchesV2DataTeam `json:"red"`
}

type _MatchesV2DataTeams MatchesV2DataTeams

// NewMatchesV2DataTeams instantiates a new MatchesV2DataTeams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataTeams(blue MatchesV2DataTeam, red MatchesV2DataTeam) *MatchesV2DataTeams {
	this := MatchesV2DataTeams{}
	this.Blue = blue
	this.Red = red
	return &this
}

// NewMatchesV2DataTeamsWithDefaults instantiates a new MatchesV2DataTeams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataTeamsWithDefaults() *MatchesV2DataTeams {
	this := MatchesV2DataTeams{}
	return &this
}

// GetBlue returns the Blue field value
func (o *MatchesV2DataTeams) GetBlue() MatchesV2DataTeam {
	if o == nil {
		var ret MatchesV2DataTeam
		return ret
	}

	return o.Blue
}

// GetBlueOk returns a tuple with the Blue field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataTeams) GetBlueOk() (*MatchesV2DataTeam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blue, true
}

// SetBlue sets field value
func (o *MatchesV2DataTeams) SetBlue(v MatchesV2DataTeam) {
	o.Blue = v
}

// GetRed returns the Red field value
func (o *MatchesV2DataTeams) GetRed() MatchesV2DataTeam {
	if o == nil {
		var ret MatchesV2DataTeam
		return ret
	}

	return o.Red
}

// GetRedOk returns a tuple with the Red field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataTeams) GetRedOk() (*MatchesV2DataTeam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Red, true
}

// SetRed sets field value
func (o *MatchesV2DataTeams) SetRed(v MatchesV2DataTeam) {
	o.Red = v
}

func (o MatchesV2DataTeams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataTeams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blue"] = o.Blue
	toSerialize["red"] = o.Red
	return toSerialize, nil
}

func (o *MatchesV2DataTeams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blue",
		"red",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataTeams := _MatchesV2DataTeams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataTeams)

	if err != nil {
		return err
	}

	*o = MatchesV2DataTeams(varMatchesV2DataTeams)

	return err
}

type NullableMatchesV2DataTeams struct {
	value *MatchesV2DataTeams
	isSet bool
}

func (v NullableMatchesV2DataTeams) Get() *MatchesV2DataTeams {
	return v.value
}

func (v *NullableMatchesV2DataTeams) Set(val *MatchesV2DataTeams) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataTeams) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataTeams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataTeams(val *MatchesV2DataTeams) *NullableMatchesV2DataTeams {
	return &NullableMatchesV2DataTeams{value: val, isSet: true}
}

func (v NullableMatchesV2DataTeams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataTeams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


