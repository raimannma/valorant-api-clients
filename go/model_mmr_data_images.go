/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRDataImages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRDataImages{}

// MMRDataImages struct for MMRDataImages
type MMRDataImages struct {
	Large string `json:"large"`
	Small string `json:"small"`
	TriangleDown string `json:"triangle_down"`
	TriangleUp string `json:"triangle_up"`
}

type _MMRDataImages MMRDataImages

// NewMMRDataImages instantiates a new MMRDataImages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRDataImages(large string, small string, triangleDown string, triangleUp string) *MMRDataImages {
	this := MMRDataImages{}
	this.Large = large
	this.Small = small
	this.TriangleDown = triangleDown
	this.TriangleUp = triangleUp
	return &this
}

// NewMMRDataImagesWithDefaults instantiates a new MMRDataImages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRDataImagesWithDefaults() *MMRDataImages {
	this := MMRDataImages{}
	return &this
}

// GetLarge returns the Large field value
func (o *MMRDataImages) GetLarge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Large
}

// GetLargeOk returns a tuple with the Large field value
// and a boolean to check if the value has been set.
func (o *MMRDataImages) GetLargeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Large, true
}

// SetLarge sets field value
func (o *MMRDataImages) SetLarge(v string) {
	o.Large = v
}

// GetSmall returns the Small field value
func (o *MMRDataImages) GetSmall() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Small
}

// GetSmallOk returns a tuple with the Small field value
// and a boolean to check if the value has been set.
func (o *MMRDataImages) GetSmallOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Small, true
}

// SetSmall sets field value
func (o *MMRDataImages) SetSmall(v string) {
	o.Small = v
}

// GetTriangleDown returns the TriangleDown field value
func (o *MMRDataImages) GetTriangleDown() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriangleDown
}

// GetTriangleDownOk returns a tuple with the TriangleDown field value
// and a boolean to check if the value has been set.
func (o *MMRDataImages) GetTriangleDownOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriangleDown, true
}

// SetTriangleDown sets field value
func (o *MMRDataImages) SetTriangleDown(v string) {
	o.TriangleDown = v
}

// GetTriangleUp returns the TriangleUp field value
func (o *MMRDataImages) GetTriangleUp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriangleUp
}

// GetTriangleUpOk returns a tuple with the TriangleUp field value
// and a boolean to check if the value has been set.
func (o *MMRDataImages) GetTriangleUpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriangleUp, true
}

// SetTriangleUp sets field value
func (o *MMRDataImages) SetTriangleUp(v string) {
	o.TriangleUp = v
}

func (o MMRDataImages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRDataImages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["large"] = o.Large
	toSerialize["small"] = o.Small
	toSerialize["triangle_down"] = o.TriangleDown
	toSerialize["triangle_up"] = o.TriangleUp
	return toSerialize, nil
}

func (o *MMRDataImages) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"large",
		"small",
		"triangle_down",
		"triangle_up",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRDataImages := _MMRDataImages{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRDataImages)

	if err != nil {
		return err
	}

	*o = MMRDataImages(varMMRDataImages)

	return err
}

type NullableMMRDataImages struct {
	value *MMRDataImages
	isSet bool
}

func (v NullableMMRDataImages) Get() *MMRDataImages {
	return v.value
}

func (v *NullableMMRDataImages) Set(val *MMRDataImages) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRDataImages) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRDataImages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRDataImages(val *MMRDataImages) *NullableMMRDataImages {
	return &NullableMMRDataImages{value: val, isSet: true}
}

func (v NullableMMRDataImages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRDataImages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


