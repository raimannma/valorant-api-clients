/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoredMMR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoredMMR{}

// StoredMMR struct for StoredMMR
type StoredMMR struct {
	Date string `json:"date"`
	Elo int32 `json:"elo"`
	LastMmrChange int32 `json:"last_mmr_change"`
	Map StoredMMRMap `json:"map"`
	MatchId string `json:"match_id"`
	RankingInTier int32 `json:"ranking_in_tier"`
	Season StoredMMRSeason `json:"season"`
	Tier StoredMMRTier `json:"tier"`
}

type _StoredMMR StoredMMR

// NewStoredMMR instantiates a new StoredMMR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoredMMR(date string, elo int32, lastMmrChange int32, map_ StoredMMRMap, matchId string, rankingInTier int32, season StoredMMRSeason, tier StoredMMRTier) *StoredMMR {
	this := StoredMMR{}
	this.Date = date
	this.Elo = elo
	this.LastMmrChange = lastMmrChange
	this.Map = map_
	this.MatchId = matchId
	this.RankingInTier = rankingInTier
	this.Season = season
	this.Tier = tier
	return &this
}

// NewStoredMMRWithDefaults instantiates a new StoredMMR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoredMMRWithDefaults() *StoredMMR {
	this := StoredMMR{}
	return &this
}

// GetDate returns the Date field value
func (o *StoredMMR) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *StoredMMR) SetDate(v string) {
	o.Date = v
}

// GetElo returns the Elo field value
func (o *StoredMMR) GetElo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Elo
}

// GetEloOk returns a tuple with the Elo field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetEloOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Elo, true
}

// SetElo sets field value
func (o *StoredMMR) SetElo(v int32) {
	o.Elo = v
}

// GetLastMmrChange returns the LastMmrChange field value
func (o *StoredMMR) GetLastMmrChange() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastMmrChange
}

// GetLastMmrChangeOk returns a tuple with the LastMmrChange field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetLastMmrChangeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastMmrChange, true
}

// SetLastMmrChange sets field value
func (o *StoredMMR) SetLastMmrChange(v int32) {
	o.LastMmrChange = v
}

// GetMap returns the Map field value
func (o *StoredMMR) GetMap() StoredMMRMap {
	if o == nil {
		var ret StoredMMRMap
		return ret
	}

	return o.Map
}

// GetMapOk returns a tuple with the Map field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetMapOk() (*StoredMMRMap, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Map, true
}

// SetMap sets field value
func (o *StoredMMR) SetMap(v StoredMMRMap) {
	o.Map = v
}

// GetMatchId returns the MatchId field value
func (o *StoredMMR) GetMatchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetMatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchId, true
}

// SetMatchId sets field value
func (o *StoredMMR) SetMatchId(v string) {
	o.MatchId = v
}

// GetRankingInTier returns the RankingInTier field value
func (o *StoredMMR) GetRankingInTier() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RankingInTier
}

// GetRankingInTierOk returns a tuple with the RankingInTier field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetRankingInTierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RankingInTier, true
}

// SetRankingInTier sets field value
func (o *StoredMMR) SetRankingInTier(v int32) {
	o.RankingInTier = v
}

// GetSeason returns the Season field value
func (o *StoredMMR) GetSeason() StoredMMRSeason {
	if o == nil {
		var ret StoredMMRSeason
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetSeasonOk() (*StoredMMRSeason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *StoredMMR) SetSeason(v StoredMMRSeason) {
	o.Season = v
}

// GetTier returns the Tier field value
func (o *StoredMMR) GetTier() StoredMMRTier {
	if o == nil {
		var ret StoredMMRTier
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *StoredMMR) GetTierOk() (*StoredMMRTier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *StoredMMR) SetTier(v StoredMMRTier) {
	o.Tier = v
}

func (o StoredMMR) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoredMMR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["elo"] = o.Elo
	toSerialize["last_mmr_change"] = o.LastMmrChange
	toSerialize["map"] = o.Map
	toSerialize["match_id"] = o.MatchId
	toSerialize["ranking_in_tier"] = o.RankingInTier
	toSerialize["season"] = o.Season
	toSerialize["tier"] = o.Tier
	return toSerialize, nil
}

func (o *StoredMMR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"elo",
		"last_mmr_change",
		"map",
		"match_id",
		"ranking_in_tier",
		"season",
		"tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoredMMR := _StoredMMR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoredMMR)

	if err != nil {
		return err
	}

	*o = StoredMMR(varStoredMMR)

	return err
}

type NullableStoredMMR struct {
	value *StoredMMR
	isSet bool
}

func (v NullableStoredMMR) Get() *StoredMMR {
	return v.value
}

func (v *NullableStoredMMR) Set(val *StoredMMR) {
	v.value = val
	v.isSet = true
}

func (v NullableStoredMMR) IsSet() bool {
	return v.isSet
}

func (v *NullableStoredMMR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoredMMR(val *StoredMMR) *NullableStoredMMR {
	return &NullableStoredMMR{value: val, isSet: true}
}

func (v NullableStoredMMR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoredMMR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


