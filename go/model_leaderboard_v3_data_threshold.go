/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LeaderboardV3DataThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeaderboardV3DataThreshold{}

// LeaderboardV3DataThreshold struct for LeaderboardV3DataThreshold
type LeaderboardV3DataThreshold struct {
	StartIndex int32 `json:"start_index"`
	Threshold int32 `json:"threshold"`
	Tier LeaderboardV3DataThresholdTier `json:"tier"`
}

type _LeaderboardV3DataThreshold LeaderboardV3DataThreshold

// NewLeaderboardV3DataThreshold instantiates a new LeaderboardV3DataThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeaderboardV3DataThreshold(startIndex int32, threshold int32, tier LeaderboardV3DataThresholdTier) *LeaderboardV3DataThreshold {
	this := LeaderboardV3DataThreshold{}
	this.StartIndex = startIndex
	this.Threshold = threshold
	this.Tier = tier
	return &this
}

// NewLeaderboardV3DataThresholdWithDefaults instantiates a new LeaderboardV3DataThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaderboardV3DataThresholdWithDefaults() *LeaderboardV3DataThreshold {
	this := LeaderboardV3DataThreshold{}
	return &this
}

// GetStartIndex returns the StartIndex field value
func (o *LeaderboardV3DataThreshold) GetStartIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value
// and a boolean to check if the value has been set.
func (o *LeaderboardV3DataThreshold) GetStartIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartIndex, true
}

// SetStartIndex sets field value
func (o *LeaderboardV3DataThreshold) SetStartIndex(v int32) {
	o.StartIndex = v
}

// GetThreshold returns the Threshold field value
func (o *LeaderboardV3DataThreshold) GetThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *LeaderboardV3DataThreshold) GetThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *LeaderboardV3DataThreshold) SetThreshold(v int32) {
	o.Threshold = v
}

// GetTier returns the Tier field value
func (o *LeaderboardV3DataThreshold) GetTier() LeaderboardV3DataThresholdTier {
	if o == nil {
		var ret LeaderboardV3DataThresholdTier
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *LeaderboardV3DataThreshold) GetTierOk() (*LeaderboardV3DataThresholdTier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *LeaderboardV3DataThreshold) SetTier(v LeaderboardV3DataThresholdTier) {
	o.Tier = v
}

func (o LeaderboardV3DataThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeaderboardV3DataThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start_index"] = o.StartIndex
	toSerialize["threshold"] = o.Threshold
	toSerialize["tier"] = o.Tier
	return toSerialize, nil
}

func (o *LeaderboardV3DataThreshold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start_index",
		"threshold",
		"tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLeaderboardV3DataThreshold := _LeaderboardV3DataThreshold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLeaderboardV3DataThreshold)

	if err != nil {
		return err
	}

	*o = LeaderboardV3DataThreshold(varLeaderboardV3DataThreshold)

	return err
}

type NullableLeaderboardV3DataThreshold struct {
	value *LeaderboardV3DataThreshold
	isSet bool
}

func (v NullableLeaderboardV3DataThreshold) Get() *LeaderboardV3DataThreshold {
	return v.value
}

func (v *NullableLeaderboardV3DataThreshold) Set(val *LeaderboardV3DataThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaderboardV3DataThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaderboardV3DataThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaderboardV3DataThreshold(val *LeaderboardV3DataThreshold) *NullableLeaderboardV3DataThreshold {
	return &NullableLeaderboardV3DataThreshold{value: val, isSet: true}
}

func (v NullableLeaderboardV3DataThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaderboardV3DataThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


