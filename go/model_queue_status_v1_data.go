/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueueStatusV1Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueueStatusV1Data{}

// QueueStatusV1Data struct for QueueStatusV1Data
type QueueStatusV1Data struct {
	Enabled bool `json:"enabled"`
	GameRules QueueStatusV1GameRules `json:"game_rules"`
	HighSkill QueueStatusV1HighSkill `json:"high_skill"`
	Maps []QueueStatusV1Maps `json:"maps"`
	Mode string `json:"mode"`
	ModeId string `json:"mode_id"`
	NumberOfTeams int32 `json:"number_of_teams"`
	PartySize QueueStatusV1PartySize `json:"party_size"`
	Platforms []string `json:"platforms"`
	Ranked bool `json:"ranked"`
	RequiredAccountLevel int32 `json:"required_account_level"`
	SkillDisparity []QueueStatusV1SkillDisparity `json:"skill_disparity"`
	TeamSize int32 `json:"team_size"`
	Tournament bool `json:"tournament"`
}

type _QueueStatusV1Data QueueStatusV1Data

// NewQueueStatusV1Data instantiates a new QueueStatusV1Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueueStatusV1Data(enabled bool, gameRules QueueStatusV1GameRules, highSkill QueueStatusV1HighSkill, maps []QueueStatusV1Maps, mode string, modeId string, numberOfTeams int32, partySize QueueStatusV1PartySize, platforms []string, ranked bool, requiredAccountLevel int32, skillDisparity []QueueStatusV1SkillDisparity, teamSize int32, tournament bool) *QueueStatusV1Data {
	this := QueueStatusV1Data{}
	this.Enabled = enabled
	this.GameRules = gameRules
	this.HighSkill = highSkill
	this.Maps = maps
	this.Mode = mode
	this.ModeId = modeId
	this.NumberOfTeams = numberOfTeams
	this.PartySize = partySize
	this.Platforms = platforms
	this.Ranked = ranked
	this.RequiredAccountLevel = requiredAccountLevel
	this.SkillDisparity = skillDisparity
	this.TeamSize = teamSize
	this.Tournament = tournament
	return &this
}

// NewQueueStatusV1DataWithDefaults instantiates a new QueueStatusV1Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueStatusV1DataWithDefaults() *QueueStatusV1Data {
	this := QueueStatusV1Data{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *QueueStatusV1Data) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *QueueStatusV1Data) SetEnabled(v bool) {
	o.Enabled = v
}

// GetGameRules returns the GameRules field value
func (o *QueueStatusV1Data) GetGameRules() QueueStatusV1GameRules {
	if o == nil {
		var ret QueueStatusV1GameRules
		return ret
	}

	return o.GameRules
}

// GetGameRulesOk returns a tuple with the GameRules field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetGameRulesOk() (*QueueStatusV1GameRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameRules, true
}

// SetGameRules sets field value
func (o *QueueStatusV1Data) SetGameRules(v QueueStatusV1GameRules) {
	o.GameRules = v
}

// GetHighSkill returns the HighSkill field value
func (o *QueueStatusV1Data) GetHighSkill() QueueStatusV1HighSkill {
	if o == nil {
		var ret QueueStatusV1HighSkill
		return ret
	}

	return o.HighSkill
}

// GetHighSkillOk returns a tuple with the HighSkill field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetHighSkillOk() (*QueueStatusV1HighSkill, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighSkill, true
}

// SetHighSkill sets field value
func (o *QueueStatusV1Data) SetHighSkill(v QueueStatusV1HighSkill) {
	o.HighSkill = v
}

// GetMaps returns the Maps field value
func (o *QueueStatusV1Data) GetMaps() []QueueStatusV1Maps {
	if o == nil {
		var ret []QueueStatusV1Maps
		return ret
	}

	return o.Maps
}

// GetMapsOk returns a tuple with the Maps field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetMapsOk() ([]QueueStatusV1Maps, bool) {
	if o == nil {
		return nil, false
	}
	return o.Maps, true
}

// SetMaps sets field value
func (o *QueueStatusV1Data) SetMaps(v []QueueStatusV1Maps) {
	o.Maps = v
}

// GetMode returns the Mode field value
func (o *QueueStatusV1Data) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *QueueStatusV1Data) SetMode(v string) {
	o.Mode = v
}

// GetModeId returns the ModeId field value
func (o *QueueStatusV1Data) GetModeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModeId
}

// GetModeIdOk returns a tuple with the ModeId field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetModeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModeId, true
}

// SetModeId sets field value
func (o *QueueStatusV1Data) SetModeId(v string) {
	o.ModeId = v
}

// GetNumberOfTeams returns the NumberOfTeams field value
func (o *QueueStatusV1Data) GetNumberOfTeams() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfTeams
}

// GetNumberOfTeamsOk returns a tuple with the NumberOfTeams field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetNumberOfTeamsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfTeams, true
}

// SetNumberOfTeams sets field value
func (o *QueueStatusV1Data) SetNumberOfTeams(v int32) {
	o.NumberOfTeams = v
}

// GetPartySize returns the PartySize field value
func (o *QueueStatusV1Data) GetPartySize() QueueStatusV1PartySize {
	if o == nil {
		var ret QueueStatusV1PartySize
		return ret
	}

	return o.PartySize
}

// GetPartySizeOk returns a tuple with the PartySize field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetPartySizeOk() (*QueueStatusV1PartySize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartySize, true
}

// SetPartySize sets field value
func (o *QueueStatusV1Data) SetPartySize(v QueueStatusV1PartySize) {
	o.PartySize = v
}

// GetPlatforms returns the Platforms field value
func (o *QueueStatusV1Data) GetPlatforms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Platforms
}

// GetPlatformsOk returns a tuple with the Platforms field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetPlatformsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platforms, true
}

// SetPlatforms sets field value
func (o *QueueStatusV1Data) SetPlatforms(v []string) {
	o.Platforms = v
}

// GetRanked returns the Ranked field value
func (o *QueueStatusV1Data) GetRanked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ranked
}

// GetRankedOk returns a tuple with the Ranked field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetRankedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ranked, true
}

// SetRanked sets field value
func (o *QueueStatusV1Data) SetRanked(v bool) {
	o.Ranked = v
}

// GetRequiredAccountLevel returns the RequiredAccountLevel field value
func (o *QueueStatusV1Data) GetRequiredAccountLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RequiredAccountLevel
}

// GetRequiredAccountLevelOk returns a tuple with the RequiredAccountLevel field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetRequiredAccountLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiredAccountLevel, true
}

// SetRequiredAccountLevel sets field value
func (o *QueueStatusV1Data) SetRequiredAccountLevel(v int32) {
	o.RequiredAccountLevel = v
}

// GetSkillDisparity returns the SkillDisparity field value
func (o *QueueStatusV1Data) GetSkillDisparity() []QueueStatusV1SkillDisparity {
	if o == nil {
		var ret []QueueStatusV1SkillDisparity
		return ret
	}

	return o.SkillDisparity
}

// GetSkillDisparityOk returns a tuple with the SkillDisparity field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetSkillDisparityOk() ([]QueueStatusV1SkillDisparity, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkillDisparity, true
}

// SetSkillDisparity sets field value
func (o *QueueStatusV1Data) SetSkillDisparity(v []QueueStatusV1SkillDisparity) {
	o.SkillDisparity = v
}

// GetTeamSize returns the TeamSize field value
func (o *QueueStatusV1Data) GetTeamSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TeamSize
}

// GetTeamSizeOk returns a tuple with the TeamSize field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetTeamSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamSize, true
}

// SetTeamSize sets field value
func (o *QueueStatusV1Data) SetTeamSize(v int32) {
	o.TeamSize = v
}

// GetTournament returns the Tournament field value
func (o *QueueStatusV1Data) GetTournament() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Tournament
}

// GetTournamentOk returns a tuple with the Tournament field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1Data) GetTournamentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tournament, true
}

// SetTournament sets field value
func (o *QueueStatusV1Data) SetTournament(v bool) {
	o.Tournament = v
}

func (o QueueStatusV1Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueueStatusV1Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["game_rules"] = o.GameRules
	toSerialize["high_skill"] = o.HighSkill
	toSerialize["maps"] = o.Maps
	toSerialize["mode"] = o.Mode
	toSerialize["mode_id"] = o.ModeId
	toSerialize["number_of_teams"] = o.NumberOfTeams
	toSerialize["party_size"] = o.PartySize
	toSerialize["platforms"] = o.Platforms
	toSerialize["ranked"] = o.Ranked
	toSerialize["required_account_level"] = o.RequiredAccountLevel
	toSerialize["skill_disparity"] = o.SkillDisparity
	toSerialize["team_size"] = o.TeamSize
	toSerialize["tournament"] = o.Tournament
	return toSerialize, nil
}

func (o *QueueStatusV1Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"game_rules",
		"high_skill",
		"maps",
		"mode",
		"mode_id",
		"number_of_teams",
		"party_size",
		"platforms",
		"ranked",
		"required_account_level",
		"skill_disparity",
		"team_size",
		"tournament",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueueStatusV1Data := _QueueStatusV1Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueueStatusV1Data)

	if err != nil {
		return err
	}

	*o = QueueStatusV1Data(varQueueStatusV1Data)

	return err
}

type NullableQueueStatusV1Data struct {
	value *QueueStatusV1Data
	isSet bool
}

func (v NullableQueueStatusV1Data) Get() *QueueStatusV1Data {
	return v.value
}

func (v *NullableQueueStatusV1Data) Set(val *QueueStatusV1Data) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueStatusV1Data) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueStatusV1Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueStatusV1Data(val *QueueStatusV1Data) *NullableQueueStatusV1Data {
	return &NullableQueueStatusV1Data{value: val, isSet: true}
}

func (v NullableQueueStatusV1Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueStatusV1Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


