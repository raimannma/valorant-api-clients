/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataPlayerBehavior type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataPlayerBehavior{}

// MatchesV4DataPlayerBehavior struct for MatchesV4DataPlayerBehavior
type MatchesV4DataPlayerBehavior struct {
	AfkRounds float32 `json:"afk_rounds"`
	FriendlyFire MatchesV4DataPlayerBehaviorFriendlyFire `json:"friendly_fire"`
	RoundsInSpawn float32 `json:"rounds_in_spawn"`
}

type _MatchesV4DataPlayerBehavior MatchesV4DataPlayerBehavior

// NewMatchesV4DataPlayerBehavior instantiates a new MatchesV4DataPlayerBehavior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataPlayerBehavior(afkRounds float32, friendlyFire MatchesV4DataPlayerBehaviorFriendlyFire, roundsInSpawn float32) *MatchesV4DataPlayerBehavior {
	this := MatchesV4DataPlayerBehavior{}
	this.AfkRounds = afkRounds
	this.FriendlyFire = friendlyFire
	this.RoundsInSpawn = roundsInSpawn
	return &this
}

// NewMatchesV4DataPlayerBehaviorWithDefaults instantiates a new MatchesV4DataPlayerBehavior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataPlayerBehaviorWithDefaults() *MatchesV4DataPlayerBehavior {
	this := MatchesV4DataPlayerBehavior{}
	return &this
}

// GetAfkRounds returns the AfkRounds field value
func (o *MatchesV4DataPlayerBehavior) GetAfkRounds() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AfkRounds
}

// GetAfkRoundsOk returns a tuple with the AfkRounds field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerBehavior) GetAfkRoundsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AfkRounds, true
}

// SetAfkRounds sets field value
func (o *MatchesV4DataPlayerBehavior) SetAfkRounds(v float32) {
	o.AfkRounds = v
}

// GetFriendlyFire returns the FriendlyFire field value
func (o *MatchesV4DataPlayerBehavior) GetFriendlyFire() MatchesV4DataPlayerBehaviorFriendlyFire {
	if o == nil {
		var ret MatchesV4DataPlayerBehaviorFriendlyFire
		return ret
	}

	return o.FriendlyFire
}

// GetFriendlyFireOk returns a tuple with the FriendlyFire field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerBehavior) GetFriendlyFireOk() (*MatchesV4DataPlayerBehaviorFriendlyFire, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FriendlyFire, true
}

// SetFriendlyFire sets field value
func (o *MatchesV4DataPlayerBehavior) SetFriendlyFire(v MatchesV4DataPlayerBehaviorFriendlyFire) {
	o.FriendlyFire = v
}

// GetRoundsInSpawn returns the RoundsInSpawn field value
func (o *MatchesV4DataPlayerBehavior) GetRoundsInSpawn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RoundsInSpawn
}

// GetRoundsInSpawnOk returns a tuple with the RoundsInSpawn field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerBehavior) GetRoundsInSpawnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoundsInSpawn, true
}

// SetRoundsInSpawn sets field value
func (o *MatchesV4DataPlayerBehavior) SetRoundsInSpawn(v float32) {
	o.RoundsInSpawn = v
}

func (o MatchesV4DataPlayerBehavior) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataPlayerBehavior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["afk_rounds"] = o.AfkRounds
	toSerialize["friendly_fire"] = o.FriendlyFire
	toSerialize["rounds_in_spawn"] = o.RoundsInSpawn
	return toSerialize, nil
}

func (o *MatchesV4DataPlayerBehavior) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"afk_rounds",
		"friendly_fire",
		"rounds_in_spawn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataPlayerBehavior := _MatchesV4DataPlayerBehavior{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataPlayerBehavior)

	if err != nil {
		return err
	}

	*o = MatchesV4DataPlayerBehavior(varMatchesV4DataPlayerBehavior)

	return err
}

type NullableMatchesV4DataPlayerBehavior struct {
	value *MatchesV4DataPlayerBehavior
	isSet bool
}

func (v NullableMatchesV4DataPlayerBehavior) Get() *MatchesV4DataPlayerBehavior {
	return v.value
}

func (v *NullableMatchesV4DataPlayerBehavior) Set(val *MatchesV4DataPlayerBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataPlayerBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataPlayerBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataPlayerBehavior(val *MatchesV4DataPlayerBehavior) *NullableMatchesV4DataPlayerBehavior {
	return &NullableMatchesV4DataPlayerBehavior{value: val, isSet: true}
}

func (v NullableMatchesV4DataPlayerBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataPlayerBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


