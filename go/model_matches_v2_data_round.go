/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV2DataRound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataRound{}

// MatchesV2DataRound struct for MatchesV2DataRound
type MatchesV2DataRound struct {
	BombDefused bool `json:"bomb_defused"`
	BombPlanted bool `json:"bomb_planted"`
	DefuseEvents MatchesV2DataRoundDefuseEvents `json:"defuse_events"`
	EndType string `json:"end_type"`
	PlantEvents MatchesV2DataRoundPlantEvents `json:"plant_events"`
	PlayerStats []MatchesV2DataRoundPlayerStats `json:"player_stats"`
	WinningTeam string `json:"winning_team"`
}

type _MatchesV2DataRound MatchesV2DataRound

// NewMatchesV2DataRound instantiates a new MatchesV2DataRound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataRound(bombDefused bool, bombPlanted bool, defuseEvents MatchesV2DataRoundDefuseEvents, endType string, plantEvents MatchesV2DataRoundPlantEvents, playerStats []MatchesV2DataRoundPlayerStats, winningTeam string) *MatchesV2DataRound {
	this := MatchesV2DataRound{}
	this.BombDefused = bombDefused
	this.BombPlanted = bombPlanted
	this.DefuseEvents = defuseEvents
	this.EndType = endType
	this.PlantEvents = plantEvents
	this.PlayerStats = playerStats
	this.WinningTeam = winningTeam
	return &this
}

// NewMatchesV2DataRoundWithDefaults instantiates a new MatchesV2DataRound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataRoundWithDefaults() *MatchesV2DataRound {
	this := MatchesV2DataRound{}
	return &this
}

// GetBombDefused returns the BombDefused field value
func (o *MatchesV2DataRound) GetBombDefused() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BombDefused
}

// GetBombDefusedOk returns a tuple with the BombDefused field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRound) GetBombDefusedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BombDefused, true
}

// SetBombDefused sets field value
func (o *MatchesV2DataRound) SetBombDefused(v bool) {
	o.BombDefused = v
}

// GetBombPlanted returns the BombPlanted field value
func (o *MatchesV2DataRound) GetBombPlanted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BombPlanted
}

// GetBombPlantedOk returns a tuple with the BombPlanted field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRound) GetBombPlantedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BombPlanted, true
}

// SetBombPlanted sets field value
func (o *MatchesV2DataRound) SetBombPlanted(v bool) {
	o.BombPlanted = v
}

// GetDefuseEvents returns the DefuseEvents field value
func (o *MatchesV2DataRound) GetDefuseEvents() MatchesV2DataRoundDefuseEvents {
	if o == nil {
		var ret MatchesV2DataRoundDefuseEvents
		return ret
	}

	return o.DefuseEvents
}

// GetDefuseEventsOk returns a tuple with the DefuseEvents field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRound) GetDefuseEventsOk() (*MatchesV2DataRoundDefuseEvents, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefuseEvents, true
}

// SetDefuseEvents sets field value
func (o *MatchesV2DataRound) SetDefuseEvents(v MatchesV2DataRoundDefuseEvents) {
	o.DefuseEvents = v
}

// GetEndType returns the EndType field value
func (o *MatchesV2DataRound) GetEndType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndType
}

// GetEndTypeOk returns a tuple with the EndType field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRound) GetEndTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndType, true
}

// SetEndType sets field value
func (o *MatchesV2DataRound) SetEndType(v string) {
	o.EndType = v
}

// GetPlantEvents returns the PlantEvents field value
func (o *MatchesV2DataRound) GetPlantEvents() MatchesV2DataRoundPlantEvents {
	if o == nil {
		var ret MatchesV2DataRoundPlantEvents
		return ret
	}

	return o.PlantEvents
}

// GetPlantEventsOk returns a tuple with the PlantEvents field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRound) GetPlantEventsOk() (*MatchesV2DataRoundPlantEvents, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlantEvents, true
}

// SetPlantEvents sets field value
func (o *MatchesV2DataRound) SetPlantEvents(v MatchesV2DataRoundPlantEvents) {
	o.PlantEvents = v
}

// GetPlayerStats returns the PlayerStats field value
func (o *MatchesV2DataRound) GetPlayerStats() []MatchesV2DataRoundPlayerStats {
	if o == nil {
		var ret []MatchesV2DataRoundPlayerStats
		return ret
	}

	return o.PlayerStats
}

// GetPlayerStatsOk returns a tuple with the PlayerStats field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRound) GetPlayerStatsOk() ([]MatchesV2DataRoundPlayerStats, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayerStats, true
}

// SetPlayerStats sets field value
func (o *MatchesV2DataRound) SetPlayerStats(v []MatchesV2DataRoundPlayerStats) {
	o.PlayerStats = v
}

// GetWinningTeam returns the WinningTeam field value
func (o *MatchesV2DataRound) GetWinningTeam() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WinningTeam
}

// GetWinningTeamOk returns a tuple with the WinningTeam field value
// and a boolean to check if the value has been set.
func (o *MatchesV2DataRound) GetWinningTeamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WinningTeam, true
}

// SetWinningTeam sets field value
func (o *MatchesV2DataRound) SetWinningTeam(v string) {
	o.WinningTeam = v
}

func (o MatchesV2DataRound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataRound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bomb_defused"] = o.BombDefused
	toSerialize["bomb_planted"] = o.BombPlanted
	toSerialize["defuse_events"] = o.DefuseEvents
	toSerialize["end_type"] = o.EndType
	toSerialize["plant_events"] = o.PlantEvents
	toSerialize["player_stats"] = o.PlayerStats
	toSerialize["winning_team"] = o.WinningTeam
	return toSerialize, nil
}

func (o *MatchesV2DataRound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bomb_defused",
		"bomb_planted",
		"defuse_events",
		"end_type",
		"plant_events",
		"player_stats",
		"winning_team",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV2DataRound := _MatchesV2DataRound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV2DataRound)

	if err != nil {
		return err
	}

	*o = MatchesV2DataRound(varMatchesV2DataRound)

	return err
}

type NullableMatchesV2DataRound struct {
	value *MatchesV2DataRound
	isSet bool
}

func (v NullableMatchesV2DataRound) Get() *MatchesV2DataRound {
	return v.value
}

func (v *NullableMatchesV2DataRound) Set(val *MatchesV2DataRound) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataRound) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataRound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataRound(val *MatchesV2DataRound) *NullableMatchesV2DataRound {
	return &NullableMatchesV2DataRound{value: val, isSet: true}
}

func (v NullableMatchesV2DataRound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataRound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


