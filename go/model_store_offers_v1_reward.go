/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoreOffersV1Reward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreOffersV1Reward{}

// StoreOffersV1Reward struct for StoreOffersV1Reward
type StoreOffersV1Reward struct {
	ItemID string `json:"ItemID"`
	ItemTypeID string `json:"ItemTypeID"`
	Quantity int32 `json:"Quantity"`
}

type _StoreOffersV1Reward StoreOffersV1Reward

// NewStoreOffersV1Reward instantiates a new StoreOffersV1Reward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreOffersV1Reward(itemID string, itemTypeID string, quantity int32) *StoreOffersV1Reward {
	this := StoreOffersV1Reward{}
	this.ItemID = itemID
	this.ItemTypeID = itemTypeID
	this.Quantity = quantity
	return &this
}

// NewStoreOffersV1RewardWithDefaults instantiates a new StoreOffersV1Reward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreOffersV1RewardWithDefaults() *StoreOffersV1Reward {
	this := StoreOffersV1Reward{}
	return &this
}

// GetItemID returns the ItemID field value
func (o *StoreOffersV1Reward) GetItemID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemID
}

// GetItemIDOk returns a tuple with the ItemID field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Reward) GetItemIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemID, true
}

// SetItemID sets field value
func (o *StoreOffersV1Reward) SetItemID(v string) {
	o.ItemID = v
}

// GetItemTypeID returns the ItemTypeID field value
func (o *StoreOffersV1Reward) GetItemTypeID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemTypeID
}

// GetItemTypeIDOk returns a tuple with the ItemTypeID field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Reward) GetItemTypeIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemTypeID, true
}

// SetItemTypeID sets field value
func (o *StoreOffersV1Reward) SetItemTypeID(v string) {
	o.ItemTypeID = v
}

// GetQuantity returns the Quantity field value
func (o *StoreOffersV1Reward) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1Reward) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *StoreOffersV1Reward) SetQuantity(v int32) {
	o.Quantity = v
}

func (o StoreOffersV1Reward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreOffersV1Reward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ItemID"] = o.ItemID
	toSerialize["ItemTypeID"] = o.ItemTypeID
	toSerialize["Quantity"] = o.Quantity
	return toSerialize, nil
}

func (o *StoreOffersV1Reward) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ItemID",
		"ItemTypeID",
		"Quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreOffersV1Reward := _StoreOffersV1Reward{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoreOffersV1Reward)

	if err != nil {
		return err
	}

	*o = StoreOffersV1Reward(varStoreOffersV1Reward)

	return err
}

type NullableStoreOffersV1Reward struct {
	value *StoreOffersV1Reward
	isSet bool
}

func (v NullableStoreOffersV1Reward) Get() *StoreOffersV1Reward {
	return v.value
}

func (v *NullableStoreOffersV1Reward) Set(val *StoreOffersV1Reward) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreOffersV1Reward) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreOffersV1Reward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreOffersV1Reward(val *StoreOffersV1Reward) *NullableStoreOffersV1Reward {
	return &NullableStoreOffersV1Reward{value: val, isSet: true}
}

func (v NullableStoreOffersV1Reward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreOffersV1Reward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


