/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueueStatusV1GameRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueueStatusV1GameRules{}

// QueueStatusV1GameRules struct for QueueStatusV1GameRules
type QueueStatusV1GameRules struct {
	AllowDropOut bool `json:"allow_drop_out"`
	AllowLenientSurrender bool `json:"allow_lenient_surrender"`
	AllowOvertimeDrawVote bool `json:"allow_overtime_draw_vote"`
	AssignRandomAgents bool `json:"assign_random_agents"`
	OvertimeWinByTwo bool `json:"overtime_win_by_two"`
	OvertimeWinByTwoCapped bool `json:"overtime_win_by_two_capped"`
	PremierMode bool `json:"premier_mode"`
	SkipPregame bool `json:"skip_pregame"`
}

type _QueueStatusV1GameRules QueueStatusV1GameRules

// NewQueueStatusV1GameRules instantiates a new QueueStatusV1GameRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueueStatusV1GameRules(allowDropOut bool, allowLenientSurrender bool, allowOvertimeDrawVote bool, assignRandomAgents bool, overtimeWinByTwo bool, overtimeWinByTwoCapped bool, premierMode bool, skipPregame bool) *QueueStatusV1GameRules {
	this := QueueStatusV1GameRules{}
	this.AllowDropOut = allowDropOut
	this.AllowLenientSurrender = allowLenientSurrender
	this.AllowOvertimeDrawVote = allowOvertimeDrawVote
	this.AssignRandomAgents = assignRandomAgents
	this.OvertimeWinByTwo = overtimeWinByTwo
	this.OvertimeWinByTwoCapped = overtimeWinByTwoCapped
	this.PremierMode = premierMode
	this.SkipPregame = skipPregame
	return &this
}

// NewQueueStatusV1GameRulesWithDefaults instantiates a new QueueStatusV1GameRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueStatusV1GameRulesWithDefaults() *QueueStatusV1GameRules {
	this := QueueStatusV1GameRules{}
	return &this
}

// GetAllowDropOut returns the AllowDropOut field value
func (o *QueueStatusV1GameRules) GetAllowDropOut() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowDropOut
}

// GetAllowDropOutOk returns a tuple with the AllowDropOut field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetAllowDropOutOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowDropOut, true
}

// SetAllowDropOut sets field value
func (o *QueueStatusV1GameRules) SetAllowDropOut(v bool) {
	o.AllowDropOut = v
}

// GetAllowLenientSurrender returns the AllowLenientSurrender field value
func (o *QueueStatusV1GameRules) GetAllowLenientSurrender() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowLenientSurrender
}

// GetAllowLenientSurrenderOk returns a tuple with the AllowLenientSurrender field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetAllowLenientSurrenderOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowLenientSurrender, true
}

// SetAllowLenientSurrender sets field value
func (o *QueueStatusV1GameRules) SetAllowLenientSurrender(v bool) {
	o.AllowLenientSurrender = v
}

// GetAllowOvertimeDrawVote returns the AllowOvertimeDrawVote field value
func (o *QueueStatusV1GameRules) GetAllowOvertimeDrawVote() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowOvertimeDrawVote
}

// GetAllowOvertimeDrawVoteOk returns a tuple with the AllowOvertimeDrawVote field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetAllowOvertimeDrawVoteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowOvertimeDrawVote, true
}

// SetAllowOvertimeDrawVote sets field value
func (o *QueueStatusV1GameRules) SetAllowOvertimeDrawVote(v bool) {
	o.AllowOvertimeDrawVote = v
}

// GetAssignRandomAgents returns the AssignRandomAgents field value
func (o *QueueStatusV1GameRules) GetAssignRandomAgents() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AssignRandomAgents
}

// GetAssignRandomAgentsOk returns a tuple with the AssignRandomAgents field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetAssignRandomAgentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignRandomAgents, true
}

// SetAssignRandomAgents sets field value
func (o *QueueStatusV1GameRules) SetAssignRandomAgents(v bool) {
	o.AssignRandomAgents = v
}

// GetOvertimeWinByTwo returns the OvertimeWinByTwo field value
func (o *QueueStatusV1GameRules) GetOvertimeWinByTwo() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OvertimeWinByTwo
}

// GetOvertimeWinByTwoOk returns a tuple with the OvertimeWinByTwo field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetOvertimeWinByTwoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OvertimeWinByTwo, true
}

// SetOvertimeWinByTwo sets field value
func (o *QueueStatusV1GameRules) SetOvertimeWinByTwo(v bool) {
	o.OvertimeWinByTwo = v
}

// GetOvertimeWinByTwoCapped returns the OvertimeWinByTwoCapped field value
func (o *QueueStatusV1GameRules) GetOvertimeWinByTwoCapped() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OvertimeWinByTwoCapped
}

// GetOvertimeWinByTwoCappedOk returns a tuple with the OvertimeWinByTwoCapped field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetOvertimeWinByTwoCappedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OvertimeWinByTwoCapped, true
}

// SetOvertimeWinByTwoCapped sets field value
func (o *QueueStatusV1GameRules) SetOvertimeWinByTwoCapped(v bool) {
	o.OvertimeWinByTwoCapped = v
}

// GetPremierMode returns the PremierMode field value
func (o *QueueStatusV1GameRules) GetPremierMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PremierMode
}

// GetPremierModeOk returns a tuple with the PremierMode field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetPremierModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PremierMode, true
}

// SetPremierMode sets field value
func (o *QueueStatusV1GameRules) SetPremierMode(v bool) {
	o.PremierMode = v
}

// GetSkipPregame returns the SkipPregame field value
func (o *QueueStatusV1GameRules) GetSkipPregame() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipPregame
}

// GetSkipPregameOk returns a tuple with the SkipPregame field value
// and a boolean to check if the value has been set.
func (o *QueueStatusV1GameRules) GetSkipPregameOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkipPregame, true
}

// SetSkipPregame sets field value
func (o *QueueStatusV1GameRules) SetSkipPregame(v bool) {
	o.SkipPregame = v
}

func (o QueueStatusV1GameRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueueStatusV1GameRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allow_drop_out"] = o.AllowDropOut
	toSerialize["allow_lenient_surrender"] = o.AllowLenientSurrender
	toSerialize["allow_overtime_draw_vote"] = o.AllowOvertimeDrawVote
	toSerialize["assign_random_agents"] = o.AssignRandomAgents
	toSerialize["overtime_win_by_two"] = o.OvertimeWinByTwo
	toSerialize["overtime_win_by_two_capped"] = o.OvertimeWinByTwoCapped
	toSerialize["premier_mode"] = o.PremierMode
	toSerialize["skip_pregame"] = o.SkipPregame
	return toSerialize, nil
}

func (o *QueueStatusV1GameRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allow_drop_out",
		"allow_lenient_surrender",
		"allow_overtime_draw_vote",
		"assign_random_agents",
		"overtime_win_by_two",
		"overtime_win_by_two_capped",
		"premier_mode",
		"skip_pregame",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueueStatusV1GameRules := _QueueStatusV1GameRules{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueueStatusV1GameRules)

	if err != nil {
		return err
	}

	*o = QueueStatusV1GameRules(varQueueStatusV1GameRules)

	return err
}

type NullableQueueStatusV1GameRules struct {
	value *QueueStatusV1GameRules
	isSet bool
}

func (v NullableQueueStatusV1GameRules) Get() *QueueStatusV1GameRules {
	return v.value
}

func (v *NullableQueueStatusV1GameRules) Set(val *QueueStatusV1GameRules) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueStatusV1GameRules) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueStatusV1GameRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueStatusV1GameRules(val *QueueStatusV1GameRules) *NullableQueueStatusV1GameRules {
	return &NullableQueueStatusV1GameRules{value: val, isSet: true}
}

func (v NullableQueueStatusV1GameRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueStatusV1GameRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


