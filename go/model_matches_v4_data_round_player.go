/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataRoundPlayer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataRoundPlayer{}

// MatchesV4DataRoundPlayer struct for MatchesV4DataRoundPlayer
type MatchesV4DataRoundPlayer struct {
	Name string `json:"name"`
	Puuid string `json:"puuid"`
	Tag string `json:"tag"`
	Team string `json:"team"`
}

type _MatchesV4DataRoundPlayer MatchesV4DataRoundPlayer

// NewMatchesV4DataRoundPlayer instantiates a new MatchesV4DataRoundPlayer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataRoundPlayer(name string, puuid string, tag string, team string) *MatchesV4DataRoundPlayer {
	this := MatchesV4DataRoundPlayer{}
	this.Name = name
	this.Puuid = puuid
	this.Tag = tag
	this.Team = team
	return &this
}

// NewMatchesV4DataRoundPlayerWithDefaults instantiates a new MatchesV4DataRoundPlayer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataRoundPlayerWithDefaults() *MatchesV4DataRoundPlayer {
	this := MatchesV4DataRoundPlayer{}
	return &this
}

// GetName returns the Name field value
func (o *MatchesV4DataRoundPlayer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MatchesV4DataRoundPlayer) SetName(v string) {
	o.Name = v
}

// GetPuuid returns the Puuid field value
func (o *MatchesV4DataRoundPlayer) GetPuuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Puuid
}

// GetPuuidOk returns a tuple with the Puuid field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayer) GetPuuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Puuid, true
}

// SetPuuid sets field value
func (o *MatchesV4DataRoundPlayer) SetPuuid(v string) {
	o.Puuid = v
}

// GetTag returns the Tag field value
func (o *MatchesV4DataRoundPlayer) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayer) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *MatchesV4DataRoundPlayer) SetTag(v string) {
	o.Tag = v
}

// GetTeam returns the Team field value
func (o *MatchesV4DataRoundPlayer) GetTeam() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataRoundPlayer) GetTeamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *MatchesV4DataRoundPlayer) SetTeam(v string) {
	o.Team = v
}

func (o MatchesV4DataRoundPlayer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataRoundPlayer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["puuid"] = o.Puuid
	toSerialize["tag"] = o.Tag
	toSerialize["team"] = o.Team
	return toSerialize, nil
}

func (o *MatchesV4DataRoundPlayer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"puuid",
		"tag",
		"team",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataRoundPlayer := _MatchesV4DataRoundPlayer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataRoundPlayer)

	if err != nil {
		return err
	}

	*o = MatchesV4DataRoundPlayer(varMatchesV4DataRoundPlayer)

	return err
}

type NullableMatchesV4DataRoundPlayer struct {
	value *MatchesV4DataRoundPlayer
	isSet bool
}

func (v NullableMatchesV4DataRoundPlayer) Get() *MatchesV4DataRoundPlayer {
	return v.value
}

func (v *NullableMatchesV4DataRoundPlayer) Set(val *MatchesV4DataRoundPlayer) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataRoundPlayer) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataRoundPlayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataRoundPlayer(val *MatchesV4DataRoundPlayer) *NullableMatchesV4DataRoundPlayer {
	return &NullableMatchesV4DataRoundPlayer{value: val, isSet: true}
}

func (v NullableMatchesV4DataRoundPlayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataRoundPlayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


