/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EsportsV1DataMatchTeamsRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsportsV1DataMatchTeamsRecord{}

// EsportsV1DataMatchTeamsRecord struct for EsportsV1DataMatchTeamsRecord
type EsportsV1DataMatchTeamsRecord struct {
	Losses int32 `json:"losses"`
	Wins int32 `json:"wins"`
}

type _EsportsV1DataMatchTeamsRecord EsportsV1DataMatchTeamsRecord

// NewEsportsV1DataMatchTeamsRecord instantiates a new EsportsV1DataMatchTeamsRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsportsV1DataMatchTeamsRecord(losses int32, wins int32) *EsportsV1DataMatchTeamsRecord {
	this := EsportsV1DataMatchTeamsRecord{}
	this.Losses = losses
	this.Wins = wins
	return &this
}

// NewEsportsV1DataMatchTeamsRecordWithDefaults instantiates a new EsportsV1DataMatchTeamsRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsportsV1DataMatchTeamsRecordWithDefaults() *EsportsV1DataMatchTeamsRecord {
	this := EsportsV1DataMatchTeamsRecord{}
	return &this
}

// GetLosses returns the Losses field value
func (o *EsportsV1DataMatchTeamsRecord) GetLosses() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Losses
}

// GetLossesOk returns a tuple with the Losses field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeamsRecord) GetLossesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Losses, true
}

// SetLosses sets field value
func (o *EsportsV1DataMatchTeamsRecord) SetLosses(v int32) {
	o.Losses = v
}

// GetWins returns the Wins field value
func (o *EsportsV1DataMatchTeamsRecord) GetWins() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *EsportsV1DataMatchTeamsRecord) GetWinsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *EsportsV1DataMatchTeamsRecord) SetWins(v int32) {
	o.Wins = v
}

func (o EsportsV1DataMatchTeamsRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsportsV1DataMatchTeamsRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["losses"] = o.Losses
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *EsportsV1DataMatchTeamsRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"losses",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEsportsV1DataMatchTeamsRecord := _EsportsV1DataMatchTeamsRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEsportsV1DataMatchTeamsRecord)

	if err != nil {
		return err
	}

	*o = EsportsV1DataMatchTeamsRecord(varEsportsV1DataMatchTeamsRecord)

	return err
}

type NullableEsportsV1DataMatchTeamsRecord struct {
	value *EsportsV1DataMatchTeamsRecord
	isSet bool
}

func (v NullableEsportsV1DataMatchTeamsRecord) Get() *EsportsV1DataMatchTeamsRecord {
	return v.value
}

func (v *NullableEsportsV1DataMatchTeamsRecord) Set(val *EsportsV1DataMatchTeamsRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableEsportsV1DataMatchTeamsRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableEsportsV1DataMatchTeamsRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsportsV1DataMatchTeamsRecord(val *EsportsV1DataMatchTeamsRecord) *NullableEsportsV1DataMatchTeamsRecord {
	return &NullableEsportsV1DataMatchTeamsRecord{value: val, isSet: true}
}

func (v NullableEsportsV1DataMatchTeamsRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsportsV1DataMatchTeamsRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


