/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoreOffersV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreOffersV1{}

// StoreOffersV1 struct for StoreOffersV1
type StoreOffersV1 struct {
	Offers []StoreOffersV1Offer `json:"Offers"`
	UpgradeCurrencyOffers []StoreOffersV1UpgradeCurrency `json:"UpgradeCurrencyOffers"`
}

type _StoreOffersV1 StoreOffersV1

// NewStoreOffersV1 instantiates a new StoreOffersV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreOffersV1(offers []StoreOffersV1Offer, upgradeCurrencyOffers []StoreOffersV1UpgradeCurrency) *StoreOffersV1 {
	this := StoreOffersV1{}
	this.Offers = offers
	this.UpgradeCurrencyOffers = upgradeCurrencyOffers
	return &this
}

// NewStoreOffersV1WithDefaults instantiates a new StoreOffersV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreOffersV1WithDefaults() *StoreOffersV1 {
	this := StoreOffersV1{}
	return &this
}

// GetOffers returns the Offers field value
func (o *StoreOffersV1) GetOffers() []StoreOffersV1Offer {
	if o == nil {
		var ret []StoreOffersV1Offer
		return ret
	}

	return o.Offers
}

// GetOffersOk returns a tuple with the Offers field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1) GetOffersOk() ([]StoreOffersV1Offer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Offers, true
}

// SetOffers sets field value
func (o *StoreOffersV1) SetOffers(v []StoreOffersV1Offer) {
	o.Offers = v
}

// GetUpgradeCurrencyOffers returns the UpgradeCurrencyOffers field value
func (o *StoreOffersV1) GetUpgradeCurrencyOffers() []StoreOffersV1UpgradeCurrency {
	if o == nil {
		var ret []StoreOffersV1UpgradeCurrency
		return ret
	}

	return o.UpgradeCurrencyOffers
}

// GetUpgradeCurrencyOffersOk returns a tuple with the UpgradeCurrencyOffers field value
// and a boolean to check if the value has been set.
func (o *StoreOffersV1) GetUpgradeCurrencyOffersOk() ([]StoreOffersV1UpgradeCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpgradeCurrencyOffers, true
}

// SetUpgradeCurrencyOffers sets field value
func (o *StoreOffersV1) SetUpgradeCurrencyOffers(v []StoreOffersV1UpgradeCurrency) {
	o.UpgradeCurrencyOffers = v
}

func (o StoreOffersV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreOffersV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Offers"] = o.Offers
	toSerialize["UpgradeCurrencyOffers"] = o.UpgradeCurrencyOffers
	return toSerialize, nil
}

func (o *StoreOffersV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Offers",
		"UpgradeCurrencyOffers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreOffersV1 := _StoreOffersV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoreOffersV1)

	if err != nil {
		return err
	}

	*o = StoreOffersV1(varStoreOffersV1)

	return err
}

type NullableStoreOffersV1 struct {
	value *StoreOffersV1
	isSet bool
}

func (v NullableStoreOffersV1) Get() *StoreOffersV1 {
	return v.value
}

func (v *NullableStoreOffersV1) Set(val *StoreOffersV1) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreOffersV1) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreOffersV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreOffersV1(val *StoreOffersV1) *NullableStoreOffersV1 {
	return &NullableStoreOffersV1{value: val, isSet: true}
}

func (v NullableStoreOffersV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreOffersV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


