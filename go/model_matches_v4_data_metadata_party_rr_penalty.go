/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataMetadataPartyRRPenalty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataMetadataPartyRRPenalty{}

// MatchesV4DataMetadataPartyRRPenalty struct for MatchesV4DataMetadataPartyRRPenalty
type MatchesV4DataMetadataPartyRRPenalty struct {
	PartyId string `json:"party_id"`
	Penalty float32 `json:"penalty"`
}

type _MatchesV4DataMetadataPartyRRPenalty MatchesV4DataMetadataPartyRRPenalty

// NewMatchesV4DataMetadataPartyRRPenalty instantiates a new MatchesV4DataMetadataPartyRRPenalty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataMetadataPartyRRPenalty(partyId string, penalty float32) *MatchesV4DataMetadataPartyRRPenalty {
	this := MatchesV4DataMetadataPartyRRPenalty{}
	this.PartyId = partyId
	this.Penalty = penalty
	return &this
}

// NewMatchesV4DataMetadataPartyRRPenaltyWithDefaults instantiates a new MatchesV4DataMetadataPartyRRPenalty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataMetadataPartyRRPenaltyWithDefaults() *MatchesV4DataMetadataPartyRRPenalty {
	this := MatchesV4DataMetadataPartyRRPenalty{}
	return &this
}

// GetPartyId returns the PartyId field value
func (o *MatchesV4DataMetadataPartyRRPenalty) GetPartyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartyId
}

// GetPartyIdOk returns a tuple with the PartyId field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadataPartyRRPenalty) GetPartyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartyId, true
}

// SetPartyId sets field value
func (o *MatchesV4DataMetadataPartyRRPenalty) SetPartyId(v string) {
	o.PartyId = v
}

// GetPenalty returns the Penalty field value
func (o *MatchesV4DataMetadataPartyRRPenalty) GetPenalty() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Penalty
}

// GetPenaltyOk returns a tuple with the Penalty field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadataPartyRRPenalty) GetPenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Penalty, true
}

// SetPenalty sets field value
func (o *MatchesV4DataMetadataPartyRRPenalty) SetPenalty(v float32) {
	o.Penalty = v
}

func (o MatchesV4DataMetadataPartyRRPenalty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataMetadataPartyRRPenalty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["party_id"] = o.PartyId
	toSerialize["penalty"] = o.Penalty
	return toSerialize, nil
}

func (o *MatchesV4DataMetadataPartyRRPenalty) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"party_id",
		"penalty",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataMetadataPartyRRPenalty := _MatchesV4DataMetadataPartyRRPenalty{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataMetadataPartyRRPenalty)

	if err != nil {
		return err
	}

	*o = MatchesV4DataMetadataPartyRRPenalty(varMatchesV4DataMetadataPartyRRPenalty)

	return err
}

type NullableMatchesV4DataMetadataPartyRRPenalty struct {
	value *MatchesV4DataMetadataPartyRRPenalty
	isSet bool
}

func (v NullableMatchesV4DataMetadataPartyRRPenalty) Get() *MatchesV4DataMetadataPartyRRPenalty {
	return v.value
}

func (v *NullableMatchesV4DataMetadataPartyRRPenalty) Set(val *MatchesV4DataMetadataPartyRRPenalty) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataMetadataPartyRRPenalty) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataMetadataPartyRRPenalty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataMetadataPartyRRPenalty(val *MatchesV4DataMetadataPartyRRPenalty) *NullableMatchesV4DataMetadataPartyRRPenalty {
	return &NullableMatchesV4DataMetadataPartyRRPenalty{value: val, isSet: true}
}

func (v NullableMatchesV4DataMetadataPartyRRPenalty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataMetadataPartyRRPenalty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


