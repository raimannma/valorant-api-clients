/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StatusIncident type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusIncident{}

// StatusIncident struct for StatusIncident
type StatusIncident struct {
	ArchiveAt NullableString `json:"archive_at,omitempty"`
	CreatedAt string `json:"created_at"`
	Id int32 `json:"id"`
	IncidentSeverity string `json:"incident_severity"`
	MaintenanceStatus NullableString `json:"maintenance_status,omitempty"`
	Platforms []string `json:"platforms"`
	Titles []StatusIncidentContent `json:"titles"`
	UpdatedAt string `json:"updated_at"`
	Updates []StatusIncidentUpdate `json:"updates"`
}

type _StatusIncident StatusIncident

// NewStatusIncident instantiates a new StatusIncident object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusIncident(createdAt string, id int32, incidentSeverity string, platforms []string, titles []StatusIncidentContent, updatedAt string, updates []StatusIncidentUpdate) *StatusIncident {
	this := StatusIncident{}
	this.CreatedAt = createdAt
	this.Id = id
	this.IncidentSeverity = incidentSeverity
	this.Platforms = platforms
	this.Titles = titles
	this.UpdatedAt = updatedAt
	this.Updates = updates
	return &this
}

// NewStatusIncidentWithDefaults instantiates a new StatusIncident object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusIncidentWithDefaults() *StatusIncident {
	this := StatusIncident{}
	return &this
}

// GetArchiveAt returns the ArchiveAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatusIncident) GetArchiveAt() string {
	if o == nil || IsNil(o.ArchiveAt.Get()) {
		var ret string
		return ret
	}
	return *o.ArchiveAt.Get()
}

// GetArchiveAtOk returns a tuple with the ArchiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatusIncident) GetArchiveAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchiveAt.Get(), o.ArchiveAt.IsSet()
}

// HasArchiveAt returns a boolean if a field has been set.
func (o *StatusIncident) HasArchiveAt() bool {
	if o != nil && o.ArchiveAt.IsSet() {
		return true
	}

	return false
}

// SetArchiveAt gets a reference to the given NullableString and assigns it to the ArchiveAt field.
func (o *StatusIncident) SetArchiveAt(v string) {
	o.ArchiveAt.Set(&v)
}
// SetArchiveAtNil sets the value for ArchiveAt to be an explicit nil
func (o *StatusIncident) SetArchiveAtNil() {
	o.ArchiveAt.Set(nil)
}

// UnsetArchiveAt ensures that no value is present for ArchiveAt, not even an explicit nil
func (o *StatusIncident) UnsetArchiveAt() {
	o.ArchiveAt.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *StatusIncident) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *StatusIncident) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *StatusIncident) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *StatusIncident) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StatusIncident) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StatusIncident) SetId(v int32) {
	o.Id = v
}

// GetIncidentSeverity returns the IncidentSeverity field value
func (o *StatusIncident) GetIncidentSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncidentSeverity
}

// GetIncidentSeverityOk returns a tuple with the IncidentSeverity field value
// and a boolean to check if the value has been set.
func (o *StatusIncident) GetIncidentSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncidentSeverity, true
}

// SetIncidentSeverity sets field value
func (o *StatusIncident) SetIncidentSeverity(v string) {
	o.IncidentSeverity = v
}

// GetMaintenanceStatus returns the MaintenanceStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatusIncident) GetMaintenanceStatus() string {
	if o == nil || IsNil(o.MaintenanceStatus.Get()) {
		var ret string
		return ret
	}
	return *o.MaintenanceStatus.Get()
}

// GetMaintenanceStatusOk returns a tuple with the MaintenanceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatusIncident) GetMaintenanceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaintenanceStatus.Get(), o.MaintenanceStatus.IsSet()
}

// HasMaintenanceStatus returns a boolean if a field has been set.
func (o *StatusIncident) HasMaintenanceStatus() bool {
	if o != nil && o.MaintenanceStatus.IsSet() {
		return true
	}

	return false
}

// SetMaintenanceStatus gets a reference to the given NullableString and assigns it to the MaintenanceStatus field.
func (o *StatusIncident) SetMaintenanceStatus(v string) {
	o.MaintenanceStatus.Set(&v)
}
// SetMaintenanceStatusNil sets the value for MaintenanceStatus to be an explicit nil
func (o *StatusIncident) SetMaintenanceStatusNil() {
	o.MaintenanceStatus.Set(nil)
}

// UnsetMaintenanceStatus ensures that no value is present for MaintenanceStatus, not even an explicit nil
func (o *StatusIncident) UnsetMaintenanceStatus() {
	o.MaintenanceStatus.Unset()
}

// GetPlatforms returns the Platforms field value
func (o *StatusIncident) GetPlatforms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Platforms
}

// GetPlatformsOk returns a tuple with the Platforms field value
// and a boolean to check if the value has been set.
func (o *StatusIncident) GetPlatformsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platforms, true
}

// SetPlatforms sets field value
func (o *StatusIncident) SetPlatforms(v []string) {
	o.Platforms = v
}

// GetTitles returns the Titles field value
func (o *StatusIncident) GetTitles() []StatusIncidentContent {
	if o == nil {
		var ret []StatusIncidentContent
		return ret
	}

	return o.Titles
}

// GetTitlesOk returns a tuple with the Titles field value
// and a boolean to check if the value has been set.
func (o *StatusIncident) GetTitlesOk() ([]StatusIncidentContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Titles, true
}

// SetTitles sets field value
func (o *StatusIncident) SetTitles(v []StatusIncidentContent) {
	o.Titles = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *StatusIncident) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *StatusIncident) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *StatusIncident) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetUpdates returns the Updates field value
func (o *StatusIncident) GetUpdates() []StatusIncidentUpdate {
	if o == nil {
		var ret []StatusIncidentUpdate
		return ret
	}

	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value
// and a boolean to check if the value has been set.
func (o *StatusIncident) GetUpdatesOk() ([]StatusIncidentUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updates, true
}

// SetUpdates sets field value
func (o *StatusIncident) SetUpdates(v []StatusIncidentUpdate) {
	o.Updates = v
}

func (o StatusIncident) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusIncident) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveAt.IsSet() {
		toSerialize["archive_at"] = o.ArchiveAt.Get()
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["incident_severity"] = o.IncidentSeverity
	if o.MaintenanceStatus.IsSet() {
		toSerialize["maintenance_status"] = o.MaintenanceStatus.Get()
	}
	toSerialize["platforms"] = o.Platforms
	toSerialize["titles"] = o.Titles
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["updates"] = o.Updates
	return toSerialize, nil
}

func (o *StatusIncident) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"id",
		"incident_severity",
		"platforms",
		"titles",
		"updated_at",
		"updates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatusIncident := _StatusIncident{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatusIncident)

	if err != nil {
		return err
	}

	*o = StatusIncident(varStatusIncident)

	return err
}

type NullableStatusIncident struct {
	value *StatusIncident
	isSet bool
}

func (v NullableStatusIncident) Get() *StatusIncident {
	return v.value
}

func (v *NullableStatusIncident) Set(val *StatusIncident) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusIncident) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusIncident) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusIncident(val *StatusIncident) *NullableStatusIncident {
	return &NullableStatusIncident{value: val, isSet: true}
}

func (v NullableStatusIncident) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusIncident) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


