/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRHistoryV1Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRHistoryV1Response{}

// MMRHistoryV1Response struct for MMRHistoryV1Response
type MMRHistoryV1Response struct {
	Data []MMRHistoryV1Data `json:"data"`
	Name string `json:"name"`
	Status int32 `json:"status"`
	Tag string `json:"tag"`
}

type _MMRHistoryV1Response MMRHistoryV1Response

// NewMMRHistoryV1Response instantiates a new MMRHistoryV1Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRHistoryV1Response(data []MMRHistoryV1Data, name string, status int32, tag string) *MMRHistoryV1Response {
	this := MMRHistoryV1Response{}
	this.Data = data
	this.Name = name
	this.Status = status
	this.Tag = tag
	return &this
}

// NewMMRHistoryV1ResponseWithDefaults instantiates a new MMRHistoryV1Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRHistoryV1ResponseWithDefaults() *MMRHistoryV1Response {
	this := MMRHistoryV1Response{}
	return &this
}

// GetData returns the Data field value
func (o *MMRHistoryV1Response) GetData() []MMRHistoryV1Data {
	if o == nil {
		var ret []MMRHistoryV1Data
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MMRHistoryV1Response) GetDataOk() ([]MMRHistoryV1Data, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *MMRHistoryV1Response) SetData(v []MMRHistoryV1Data) {
	o.Data = v
}

// GetName returns the Name field value
func (o *MMRHistoryV1Response) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MMRHistoryV1Response) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MMRHistoryV1Response) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *MMRHistoryV1Response) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *MMRHistoryV1Response) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *MMRHistoryV1Response) SetStatus(v int32) {
	o.Status = v
}

// GetTag returns the Tag field value
func (o *MMRHistoryV1Response) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *MMRHistoryV1Response) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *MMRHistoryV1Response) SetTag(v string) {
	o.Tag = v
}

func (o MMRHistoryV1Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRHistoryV1Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *MMRHistoryV1Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"name",
		"status",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRHistoryV1Response := _MMRHistoryV1Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRHistoryV1Response)

	if err != nil {
		return err
	}

	*o = MMRHistoryV1Response(varMMRHistoryV1Response)

	return err
}

type NullableMMRHistoryV1Response struct {
	value *MMRHistoryV1Response
	isSet bool
}

func (v NullableMMRHistoryV1Response) Get() *MMRHistoryV1Response {
	return v.value
}

func (v *NullableMMRHistoryV1Response) Set(val *MMRHistoryV1Response) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRHistoryV1Response) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRHistoryV1Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRHistoryV1Response(val *MMRHistoryV1Response) *NullableMMRHistoryV1Response {
	return &NullableMMRHistoryV1Response{value: val, isSet: true}
}

func (v NullableMMRHistoryV1Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRHistoryV1Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


