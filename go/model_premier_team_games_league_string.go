/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PremierTeamGamesLeagueString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PremierTeamGamesLeagueString{}

// PremierTeamGamesLeagueString struct for PremierTeamGamesLeagueString
type PremierTeamGamesLeagueString struct {
	Id string `json:"id"`
	PointsAfter int32 `json:"points_after"`
	PointsBefore int32 `json:"points_before"`
	StartedAt string `json:"started_at"`
}

type _PremierTeamGamesLeagueString PremierTeamGamesLeagueString

// NewPremierTeamGamesLeagueString instantiates a new PremierTeamGamesLeagueString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremierTeamGamesLeagueString(id string, pointsAfter int32, pointsBefore int32, startedAt string) *PremierTeamGamesLeagueString {
	this := PremierTeamGamesLeagueString{}
	this.Id = id
	this.PointsAfter = pointsAfter
	this.PointsBefore = pointsBefore
	this.StartedAt = startedAt
	return &this
}

// NewPremierTeamGamesLeagueStringWithDefaults instantiates a new PremierTeamGamesLeagueString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremierTeamGamesLeagueStringWithDefaults() *PremierTeamGamesLeagueString {
	this := PremierTeamGamesLeagueString{}
	return &this
}

// GetId returns the Id field value
func (o *PremierTeamGamesLeagueString) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesLeagueString) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PremierTeamGamesLeagueString) SetId(v string) {
	o.Id = v
}

// GetPointsAfter returns the PointsAfter field value
func (o *PremierTeamGamesLeagueString) GetPointsAfter() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PointsAfter
}

// GetPointsAfterOk returns a tuple with the PointsAfter field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesLeagueString) GetPointsAfterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PointsAfter, true
}

// SetPointsAfter sets field value
func (o *PremierTeamGamesLeagueString) SetPointsAfter(v int32) {
	o.PointsAfter = v
}

// GetPointsBefore returns the PointsBefore field value
func (o *PremierTeamGamesLeagueString) GetPointsBefore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PointsBefore
}

// GetPointsBeforeOk returns a tuple with the PointsBefore field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesLeagueString) GetPointsBeforeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PointsBefore, true
}

// SetPointsBefore sets field value
func (o *PremierTeamGamesLeagueString) SetPointsBefore(v int32) {
	o.PointsBefore = v
}

// GetStartedAt returns the StartedAt field value
func (o *PremierTeamGamesLeagueString) GetStartedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *PremierTeamGamesLeagueString) GetStartedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *PremierTeamGamesLeagueString) SetStartedAt(v string) {
	o.StartedAt = v
}

func (o PremierTeamGamesLeagueString) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PremierTeamGamesLeagueString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["points_after"] = o.PointsAfter
	toSerialize["points_before"] = o.PointsBefore
	toSerialize["started_at"] = o.StartedAt
	return toSerialize, nil
}

func (o *PremierTeamGamesLeagueString) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"points_after",
		"points_before",
		"started_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPremierTeamGamesLeagueString := _PremierTeamGamesLeagueString{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPremierTeamGamesLeagueString)

	if err != nil {
		return err
	}

	*o = PremierTeamGamesLeagueString(varPremierTeamGamesLeagueString)

	return err
}

type NullablePremierTeamGamesLeagueString struct {
	value *PremierTeamGamesLeagueString
	isSet bool
}

func (v NullablePremierTeamGamesLeagueString) Get() *PremierTeamGamesLeagueString {
	return v.value
}

func (v *NullablePremierTeamGamesLeagueString) Set(val *PremierTeamGamesLeagueString) {
	v.value = val
	v.isSet = true
}

func (v NullablePremierTeamGamesLeagueString) IsSet() bool {
	return v.isSet
}

func (v *NullablePremierTeamGamesLeagueString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremierTeamGamesLeagueString(val *PremierTeamGamesLeagueString) *NullablePremierTeamGamesLeagueString {
	return &NullablePremierTeamGamesLeagueString{value: val, isSet: true}
}

func (v NullablePremierTeamGamesLeagueString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremierTeamGamesLeagueString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


