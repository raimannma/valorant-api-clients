/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRV2Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRV2Data{}

// MMRV2Data struct for MMRV2Data
type MMRV2Data struct {
	BySeason interface{} `json:"by_season"`
	CurrentData MMRV2CurrentData `json:"current_data"`
	HighestRank MMRV2HighestRank `json:"highest_rank"`
	Name string `json:"name"`
	Puuid string `json:"puuid"`
	Tag string `json:"tag"`
}

type _MMRV2Data MMRV2Data

// NewMMRV2Data instantiates a new MMRV2Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRV2Data(bySeason interface{}, currentData MMRV2CurrentData, highestRank MMRV2HighestRank, name string, puuid string, tag string) *MMRV2Data {
	this := MMRV2Data{}
	this.BySeason = bySeason
	this.CurrentData = currentData
	this.HighestRank = highestRank
	this.Name = name
	this.Puuid = puuid
	this.Tag = tag
	return &this
}

// NewMMRV2DataWithDefaults instantiates a new MMRV2Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRV2DataWithDefaults() *MMRV2Data {
	this := MMRV2Data{}
	return &this
}

// GetBySeason returns the BySeason field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MMRV2Data) GetBySeason() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.BySeason
}

// GetBySeasonOk returns a tuple with the BySeason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MMRV2Data) GetBySeasonOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BySeason) {
		return nil, false
	}
	return &o.BySeason, true
}

// SetBySeason sets field value
func (o *MMRV2Data) SetBySeason(v interface{}) {
	o.BySeason = v
}

// GetCurrentData returns the CurrentData field value
func (o *MMRV2Data) GetCurrentData() MMRV2CurrentData {
	if o == nil {
		var ret MMRV2CurrentData
		return ret
	}

	return o.CurrentData
}

// GetCurrentDataOk returns a tuple with the CurrentData field value
// and a boolean to check if the value has been set.
func (o *MMRV2Data) GetCurrentDataOk() (*MMRV2CurrentData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentData, true
}

// SetCurrentData sets field value
func (o *MMRV2Data) SetCurrentData(v MMRV2CurrentData) {
	o.CurrentData = v
}

// GetHighestRank returns the HighestRank field value
func (o *MMRV2Data) GetHighestRank() MMRV2HighestRank {
	if o == nil {
		var ret MMRV2HighestRank
		return ret
	}

	return o.HighestRank
}

// GetHighestRankOk returns a tuple with the HighestRank field value
// and a boolean to check if the value has been set.
func (o *MMRV2Data) GetHighestRankOk() (*MMRV2HighestRank, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighestRank, true
}

// SetHighestRank sets field value
func (o *MMRV2Data) SetHighestRank(v MMRV2HighestRank) {
	o.HighestRank = v
}

// GetName returns the Name field value
func (o *MMRV2Data) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MMRV2Data) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MMRV2Data) SetName(v string) {
	o.Name = v
}

// GetPuuid returns the Puuid field value
func (o *MMRV2Data) GetPuuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Puuid
}

// GetPuuidOk returns a tuple with the Puuid field value
// and a boolean to check if the value has been set.
func (o *MMRV2Data) GetPuuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Puuid, true
}

// SetPuuid sets field value
func (o *MMRV2Data) SetPuuid(v string) {
	o.Puuid = v
}

// GetTag returns the Tag field value
func (o *MMRV2Data) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *MMRV2Data) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *MMRV2Data) SetTag(v string) {
	o.Tag = v
}

func (o MMRV2Data) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRV2Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BySeason != nil {
		toSerialize["by_season"] = o.BySeason
	}
	toSerialize["current_data"] = o.CurrentData
	toSerialize["highest_rank"] = o.HighestRank
	toSerialize["name"] = o.Name
	toSerialize["puuid"] = o.Puuid
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *MMRV2Data) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"by_season",
		"current_data",
		"highest_rank",
		"name",
		"puuid",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRV2Data := _MMRV2Data{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRV2Data)

	if err != nil {
		return err
	}

	*o = MMRV2Data(varMMRV2Data)

	return err
}

type NullableMMRV2Data struct {
	value *MMRV2Data
	isSet bool
}

func (v NullableMMRV2Data) Get() *MMRV2Data {
	return v.value
}

func (v *NullableMMRV2Data) Set(val *MMRV2Data) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRV2Data) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRV2Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRV2Data(val *MMRV2Data) *NullableMMRV2Data {
	return &NullableMMRV2Data{value: val, isSet: true}
}

func (v NullableMMRV2Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRV2Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


