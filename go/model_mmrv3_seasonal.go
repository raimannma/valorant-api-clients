/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRV3Seasonal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRV3Seasonal{}

// MMRV3Seasonal struct for MMRV3Seasonal
type MMRV3Seasonal struct {
	ActWins []TierIdNameCombo `json:"act_wins"`
	EndRr int32 `json:"end_rr"`
	EndTier TierIdNameCombo `json:"end_tier"`
	Games int32 `json:"games"`
	LeaderboardPlacement NullableMMRV3LeaderboardPlacement `json:"leaderboard_placement,omitempty"`
	RankingSchema string `json:"ranking_schema"`
	Season SeasonIdShortCombo `json:"season"`
	Wins int32 `json:"wins"`
}

type _MMRV3Seasonal MMRV3Seasonal

// NewMMRV3Seasonal instantiates a new MMRV3Seasonal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRV3Seasonal(actWins []TierIdNameCombo, endRr int32, endTier TierIdNameCombo, games int32, rankingSchema string, season SeasonIdShortCombo, wins int32) *MMRV3Seasonal {
	this := MMRV3Seasonal{}
	this.ActWins = actWins
	this.EndRr = endRr
	this.EndTier = endTier
	this.Games = games
	this.RankingSchema = rankingSchema
	this.Season = season
	this.Wins = wins
	return &this
}

// NewMMRV3SeasonalWithDefaults instantiates a new MMRV3Seasonal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRV3SeasonalWithDefaults() *MMRV3Seasonal {
	this := MMRV3Seasonal{}
	return &this
}

// GetActWins returns the ActWins field value
func (o *MMRV3Seasonal) GetActWins() []TierIdNameCombo {
	if o == nil {
		var ret []TierIdNameCombo
		return ret
	}

	return o.ActWins
}

// GetActWinsOk returns a tuple with the ActWins field value
// and a boolean to check if the value has been set.
func (o *MMRV3Seasonal) GetActWinsOk() ([]TierIdNameCombo, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActWins, true
}

// SetActWins sets field value
func (o *MMRV3Seasonal) SetActWins(v []TierIdNameCombo) {
	o.ActWins = v
}

// GetEndRr returns the EndRr field value
func (o *MMRV3Seasonal) GetEndRr() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndRr
}

// GetEndRrOk returns a tuple with the EndRr field value
// and a boolean to check if the value has been set.
func (o *MMRV3Seasonal) GetEndRrOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndRr, true
}

// SetEndRr sets field value
func (o *MMRV3Seasonal) SetEndRr(v int32) {
	o.EndRr = v
}

// GetEndTier returns the EndTier field value
func (o *MMRV3Seasonal) GetEndTier() TierIdNameCombo {
	if o == nil {
		var ret TierIdNameCombo
		return ret
	}

	return o.EndTier
}

// GetEndTierOk returns a tuple with the EndTier field value
// and a boolean to check if the value has been set.
func (o *MMRV3Seasonal) GetEndTierOk() (*TierIdNameCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTier, true
}

// SetEndTier sets field value
func (o *MMRV3Seasonal) SetEndTier(v TierIdNameCombo) {
	o.EndTier = v
}

// GetGames returns the Games field value
func (o *MMRV3Seasonal) GetGames() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Games
}

// GetGamesOk returns a tuple with the Games field value
// and a boolean to check if the value has been set.
func (o *MMRV3Seasonal) GetGamesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Games, true
}

// SetGames sets field value
func (o *MMRV3Seasonal) SetGames(v int32) {
	o.Games = v
}

// GetLeaderboardPlacement returns the LeaderboardPlacement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MMRV3Seasonal) GetLeaderboardPlacement() MMRV3LeaderboardPlacement {
	if o == nil || IsNil(o.LeaderboardPlacement.Get()) {
		var ret MMRV3LeaderboardPlacement
		return ret
	}
	return *o.LeaderboardPlacement.Get()
}

// GetLeaderboardPlacementOk returns a tuple with the LeaderboardPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MMRV3Seasonal) GetLeaderboardPlacementOk() (*MMRV3LeaderboardPlacement, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeaderboardPlacement.Get(), o.LeaderboardPlacement.IsSet()
}

// HasLeaderboardPlacement returns a boolean if a field has been set.
func (o *MMRV3Seasonal) HasLeaderboardPlacement() bool {
	if o != nil && o.LeaderboardPlacement.IsSet() {
		return true
	}

	return false
}

// SetLeaderboardPlacement gets a reference to the given NullableMMRV3LeaderboardPlacement and assigns it to the LeaderboardPlacement field.
func (o *MMRV3Seasonal) SetLeaderboardPlacement(v MMRV3LeaderboardPlacement) {
	o.LeaderboardPlacement.Set(&v)
}
// SetLeaderboardPlacementNil sets the value for LeaderboardPlacement to be an explicit nil
func (o *MMRV3Seasonal) SetLeaderboardPlacementNil() {
	o.LeaderboardPlacement.Set(nil)
}

// UnsetLeaderboardPlacement ensures that no value is present for LeaderboardPlacement, not even an explicit nil
func (o *MMRV3Seasonal) UnsetLeaderboardPlacement() {
	o.LeaderboardPlacement.Unset()
}

// GetRankingSchema returns the RankingSchema field value
func (o *MMRV3Seasonal) GetRankingSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RankingSchema
}

// GetRankingSchemaOk returns a tuple with the RankingSchema field value
// and a boolean to check if the value has been set.
func (o *MMRV3Seasonal) GetRankingSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RankingSchema, true
}

// SetRankingSchema sets field value
func (o *MMRV3Seasonal) SetRankingSchema(v string) {
	o.RankingSchema = v
}

// GetSeason returns the Season field value
func (o *MMRV3Seasonal) GetSeason() SeasonIdShortCombo {
	if o == nil {
		var ret SeasonIdShortCombo
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *MMRV3Seasonal) GetSeasonOk() (*SeasonIdShortCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *MMRV3Seasonal) SetSeason(v SeasonIdShortCombo) {
	o.Season = v
}

// GetWins returns the Wins field value
func (o *MMRV3Seasonal) GetWins() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Wins
}

// GetWinsOk returns a tuple with the Wins field value
// and a boolean to check if the value has been set.
func (o *MMRV3Seasonal) GetWinsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wins, true
}

// SetWins sets field value
func (o *MMRV3Seasonal) SetWins(v int32) {
	o.Wins = v
}

func (o MMRV3Seasonal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRV3Seasonal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["act_wins"] = o.ActWins
	toSerialize["end_rr"] = o.EndRr
	toSerialize["end_tier"] = o.EndTier
	toSerialize["games"] = o.Games
	if o.LeaderboardPlacement.IsSet() {
		toSerialize["leaderboard_placement"] = o.LeaderboardPlacement.Get()
	}
	toSerialize["ranking_schema"] = o.RankingSchema
	toSerialize["season"] = o.Season
	toSerialize["wins"] = o.Wins
	return toSerialize, nil
}

func (o *MMRV3Seasonal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"act_wins",
		"end_rr",
		"end_tier",
		"games",
		"ranking_schema",
		"season",
		"wins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRV3Seasonal := _MMRV3Seasonal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRV3Seasonal)

	if err != nil {
		return err
	}

	*o = MMRV3Seasonal(varMMRV3Seasonal)

	return err
}

type NullableMMRV3Seasonal struct {
	value *MMRV3Seasonal
	isSet bool
}

func (v NullableMMRV3Seasonal) Get() *MMRV3Seasonal {
	return v.value
}

func (v *NullableMMRV3Seasonal) Set(val *MMRV3Seasonal) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRV3Seasonal) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRV3Seasonal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRV3Seasonal(val *MMRV3Seasonal) *NullableMMRV3Seasonal {
	return &NullableMMRV3Seasonal{value: val, isSet: true}
}

func (v NullableMMRV3Seasonal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRV3Seasonal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


