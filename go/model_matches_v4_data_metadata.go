/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataMetadata{}

// MatchesV4DataMetadata struct for MatchesV4DataMetadata
type MatchesV4DataMetadata struct {
	Cluster NullableString `json:"cluster,omitempty"`
	GameLengthInMs int64 `json:"game_length_in_ms"`
	GameVersion string `json:"game_version"`
	IsCompleted bool `json:"is_completed"`
	Map MapIdNameCombo `json:"map"`
	MatchId string `json:"match_id"`
	PartyRrPenaltys []MatchesV4DataMetadataPartyRRPenalty `json:"party_rr_penaltys"`
	Platform string `json:"platform"`
	Premier interface{} `json:"premier,omitempty"`
	Queue MatchesV4DataMetadataQueue `json:"queue"`
	Region NullableString `json:"region,omitempty"`
	Season SeasonIdShortCombo `json:"season"`
	StartedAt string `json:"started_at"`
}

type _MatchesV4DataMetadata MatchesV4DataMetadata

// NewMatchesV4DataMetadata instantiates a new MatchesV4DataMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataMetadata(gameLengthInMs int64, gameVersion string, isCompleted bool, map_ MapIdNameCombo, matchId string, partyRrPenaltys []MatchesV4DataMetadataPartyRRPenalty, platform string, queue MatchesV4DataMetadataQueue, season SeasonIdShortCombo, startedAt string) *MatchesV4DataMetadata {
	this := MatchesV4DataMetadata{}
	this.GameLengthInMs = gameLengthInMs
	this.GameVersion = gameVersion
	this.IsCompleted = isCompleted
	this.Map = map_
	this.MatchId = matchId
	this.PartyRrPenaltys = partyRrPenaltys
	this.Platform = platform
	this.Queue = queue
	this.Season = season
	this.StartedAt = startedAt
	return &this
}

// NewMatchesV4DataMetadataWithDefaults instantiates a new MatchesV4DataMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataMetadataWithDefaults() *MatchesV4DataMetadata {
	this := MatchesV4DataMetadata{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataMetadata) GetCluster() string {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret string
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataMetadata) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *MatchesV4DataMetadata) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableString and assigns it to the Cluster field.
func (o *MatchesV4DataMetadata) SetCluster(v string) {
	o.Cluster.Set(&v)
}
// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *MatchesV4DataMetadata) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *MatchesV4DataMetadata) UnsetCluster() {
	o.Cluster.Unset()
}

// GetGameLengthInMs returns the GameLengthInMs field value
func (o *MatchesV4DataMetadata) GetGameLengthInMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GameLengthInMs
}

// GetGameLengthInMsOk returns a tuple with the GameLengthInMs field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetGameLengthInMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameLengthInMs, true
}

// SetGameLengthInMs sets field value
func (o *MatchesV4DataMetadata) SetGameLengthInMs(v int64) {
	o.GameLengthInMs = v
}

// GetGameVersion returns the GameVersion field value
func (o *MatchesV4DataMetadata) GetGameVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GameVersion
}

// GetGameVersionOk returns a tuple with the GameVersion field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetGameVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameVersion, true
}

// SetGameVersion sets field value
func (o *MatchesV4DataMetadata) SetGameVersion(v string) {
	o.GameVersion = v
}

// GetIsCompleted returns the IsCompleted field value
func (o *MatchesV4DataMetadata) GetIsCompleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCompleted
}

// GetIsCompletedOk returns a tuple with the IsCompleted field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetIsCompletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCompleted, true
}

// SetIsCompleted sets field value
func (o *MatchesV4DataMetadata) SetIsCompleted(v bool) {
	o.IsCompleted = v
}

// GetMap returns the Map field value
func (o *MatchesV4DataMetadata) GetMap() MapIdNameCombo {
	if o == nil {
		var ret MapIdNameCombo
		return ret
	}

	return o.Map
}

// GetMapOk returns a tuple with the Map field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetMapOk() (*MapIdNameCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Map, true
}

// SetMap sets field value
func (o *MatchesV4DataMetadata) SetMap(v MapIdNameCombo) {
	o.Map = v
}

// GetMatchId returns the MatchId field value
func (o *MatchesV4DataMetadata) GetMatchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetMatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchId, true
}

// SetMatchId sets field value
func (o *MatchesV4DataMetadata) SetMatchId(v string) {
	o.MatchId = v
}

// GetPartyRrPenaltys returns the PartyRrPenaltys field value
func (o *MatchesV4DataMetadata) GetPartyRrPenaltys() []MatchesV4DataMetadataPartyRRPenalty {
	if o == nil {
		var ret []MatchesV4DataMetadataPartyRRPenalty
		return ret
	}

	return o.PartyRrPenaltys
}

// GetPartyRrPenaltysOk returns a tuple with the PartyRrPenaltys field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetPartyRrPenaltysOk() ([]MatchesV4DataMetadataPartyRRPenalty, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartyRrPenaltys, true
}

// SetPartyRrPenaltys sets field value
func (o *MatchesV4DataMetadata) SetPartyRrPenaltys(v []MatchesV4DataMetadataPartyRRPenalty) {
	o.PartyRrPenaltys = v
}

// GetPlatform returns the Platform field value
func (o *MatchesV4DataMetadata) GetPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *MatchesV4DataMetadata) SetPlatform(v string) {
	o.Platform = v
}

// GetPremier returns the Premier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataMetadata) GetPremier() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Premier
}

// GetPremierOk returns a tuple with the Premier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataMetadata) GetPremierOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Premier) {
		return nil, false
	}
	return &o.Premier, true
}

// HasPremier returns a boolean if a field has been set.
func (o *MatchesV4DataMetadata) HasPremier() bool {
	if o != nil && !IsNil(o.Premier) {
		return true
	}

	return false
}

// SetPremier gets a reference to the given interface{} and assigns it to the Premier field.
func (o *MatchesV4DataMetadata) SetPremier(v interface{}) {
	o.Premier = v
}

// GetQueue returns the Queue field value
func (o *MatchesV4DataMetadata) GetQueue() MatchesV4DataMetadataQueue {
	if o == nil {
		var ret MatchesV4DataMetadataQueue
		return ret
	}

	return o.Queue
}

// GetQueueOk returns a tuple with the Queue field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetQueueOk() (*MatchesV4DataMetadataQueue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Queue, true
}

// SetQueue sets field value
func (o *MatchesV4DataMetadata) SetQueue(v MatchesV4DataMetadataQueue) {
	o.Queue = v
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV4DataMetadata) GetRegion() string {
	if o == nil || IsNil(o.Region.Get()) {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV4DataMetadata) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *MatchesV4DataMetadata) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *MatchesV4DataMetadata) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *MatchesV4DataMetadata) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *MatchesV4DataMetadata) UnsetRegion() {
	o.Region.Unset()
}

// GetSeason returns the Season field value
func (o *MatchesV4DataMetadata) GetSeason() SeasonIdShortCombo {
	if o == nil {
		var ret SeasonIdShortCombo
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetSeasonOk() (*SeasonIdShortCombo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *MatchesV4DataMetadata) SetSeason(v SeasonIdShortCombo) {
	o.Season = v
}

// GetStartedAt returns the StartedAt field value
func (o *MatchesV4DataMetadata) GetStartedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataMetadata) GetStartedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *MatchesV4DataMetadata) SetStartedAt(v string) {
	o.StartedAt = v
}

func (o MatchesV4DataMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	toSerialize["game_length_in_ms"] = o.GameLengthInMs
	toSerialize["game_version"] = o.GameVersion
	toSerialize["is_completed"] = o.IsCompleted
	toSerialize["map"] = o.Map
	toSerialize["match_id"] = o.MatchId
	toSerialize["party_rr_penaltys"] = o.PartyRrPenaltys
	toSerialize["platform"] = o.Platform
	if o.Premier != nil {
		toSerialize["premier"] = o.Premier
	}
	toSerialize["queue"] = o.Queue
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	toSerialize["season"] = o.Season
	toSerialize["started_at"] = o.StartedAt
	return toSerialize, nil
}

func (o *MatchesV4DataMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"game_length_in_ms",
		"game_version",
		"is_completed",
		"map",
		"match_id",
		"party_rr_penaltys",
		"platform",
		"queue",
		"season",
		"started_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataMetadata := _MatchesV4DataMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataMetadata)

	if err != nil {
		return err
	}

	*o = MatchesV4DataMetadata(varMatchesV4DataMetadata)

	return err
}

type NullableMatchesV4DataMetadata struct {
	value *MatchesV4DataMetadata
	isSet bool
}

func (v NullableMatchesV4DataMetadata) Get() *MatchesV4DataMetadata {
	return v.value
}

func (v *NullableMatchesV4DataMetadata) Set(val *MatchesV4DataMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataMetadata(val *MatchesV4DataMetadata) *NullableMatchesV4DataMetadata {
	return &NullableMatchesV4DataMetadata{value: val, isSet: true}
}

func (v NullableMatchesV4DataMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


