/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchesV4DataPlayerBehaviorFriendlyFire type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV4DataPlayerBehaviorFriendlyFire{}

// MatchesV4DataPlayerBehaviorFriendlyFire struct for MatchesV4DataPlayerBehaviorFriendlyFire
type MatchesV4DataPlayerBehaviorFriendlyFire struct {
	Incoming float32 `json:"incoming"`
	Outgoing float32 `json:"outgoing"`
}

type _MatchesV4DataPlayerBehaviorFriendlyFire MatchesV4DataPlayerBehaviorFriendlyFire

// NewMatchesV4DataPlayerBehaviorFriendlyFire instantiates a new MatchesV4DataPlayerBehaviorFriendlyFire object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV4DataPlayerBehaviorFriendlyFire(incoming float32, outgoing float32) *MatchesV4DataPlayerBehaviorFriendlyFire {
	this := MatchesV4DataPlayerBehaviorFriendlyFire{}
	this.Incoming = incoming
	this.Outgoing = outgoing
	return &this
}

// NewMatchesV4DataPlayerBehaviorFriendlyFireWithDefaults instantiates a new MatchesV4DataPlayerBehaviorFriendlyFire object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV4DataPlayerBehaviorFriendlyFireWithDefaults() *MatchesV4DataPlayerBehaviorFriendlyFire {
	this := MatchesV4DataPlayerBehaviorFriendlyFire{}
	return &this
}

// GetIncoming returns the Incoming field value
func (o *MatchesV4DataPlayerBehaviorFriendlyFire) GetIncoming() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Incoming
}

// GetIncomingOk returns a tuple with the Incoming field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerBehaviorFriendlyFire) GetIncomingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Incoming, true
}

// SetIncoming sets field value
func (o *MatchesV4DataPlayerBehaviorFriendlyFire) SetIncoming(v float32) {
	o.Incoming = v
}

// GetOutgoing returns the Outgoing field value
func (o *MatchesV4DataPlayerBehaviorFriendlyFire) GetOutgoing() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Outgoing
}

// GetOutgoingOk returns a tuple with the Outgoing field value
// and a boolean to check if the value has been set.
func (o *MatchesV4DataPlayerBehaviorFriendlyFire) GetOutgoingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outgoing, true
}

// SetOutgoing sets field value
func (o *MatchesV4DataPlayerBehaviorFriendlyFire) SetOutgoing(v float32) {
	o.Outgoing = v
}

func (o MatchesV4DataPlayerBehaviorFriendlyFire) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV4DataPlayerBehaviorFriendlyFire) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["incoming"] = o.Incoming
	toSerialize["outgoing"] = o.Outgoing
	return toSerialize, nil
}

func (o *MatchesV4DataPlayerBehaviorFriendlyFire) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"incoming",
		"outgoing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchesV4DataPlayerBehaviorFriendlyFire := _MatchesV4DataPlayerBehaviorFriendlyFire{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchesV4DataPlayerBehaviorFriendlyFire)

	if err != nil {
		return err
	}

	*o = MatchesV4DataPlayerBehaviorFriendlyFire(varMatchesV4DataPlayerBehaviorFriendlyFire)

	return err
}

type NullableMatchesV4DataPlayerBehaviorFriendlyFire struct {
	value *MatchesV4DataPlayerBehaviorFriendlyFire
	isSet bool
}

func (v NullableMatchesV4DataPlayerBehaviorFriendlyFire) Get() *MatchesV4DataPlayerBehaviorFriendlyFire {
	return v.value
}

func (v *NullableMatchesV4DataPlayerBehaviorFriendlyFire) Set(val *MatchesV4DataPlayerBehaviorFriendlyFire) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV4DataPlayerBehaviorFriendlyFire) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV4DataPlayerBehaviorFriendlyFire) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV4DataPlayerBehaviorFriendlyFire(val *MatchesV4DataPlayerBehaviorFriendlyFire) *NullableMatchesV4DataPlayerBehaviorFriendlyFire {
	return &NullableMatchesV4DataPlayerBehaviorFriendlyFire{value: val, isSet: true}
}

func (v NullableMatchesV4DataPlayerBehaviorFriendlyFire) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV4DataPlayerBehaviorFriendlyFire) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


