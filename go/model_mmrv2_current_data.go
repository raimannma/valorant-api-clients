/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MMRV2CurrentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MMRV2CurrentData{}

// MMRV2CurrentData struct for MMRV2CurrentData
type MMRV2CurrentData struct {
	Currenttier int32 `json:"currenttier"`
	Currenttierpatched string `json:"currenttierpatched"`
	Elo int32 `json:"elo"`
	GamesNeededForRating int32 `json:"games_needed_for_rating"`
	Images MMRDataImages `json:"images"`
	MmrChangeToLastGame int32 `json:"mmr_change_to_last_game"`
	Old bool `json:"old"`
	RankingInTier int32 `json:"ranking_in_tier"`
}

type _MMRV2CurrentData MMRV2CurrentData

// NewMMRV2CurrentData instantiates a new MMRV2CurrentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMMRV2CurrentData(currenttier int32, currenttierpatched string, elo int32, gamesNeededForRating int32, images MMRDataImages, mmrChangeToLastGame int32, old bool, rankingInTier int32) *MMRV2CurrentData {
	this := MMRV2CurrentData{}
	this.Currenttier = currenttier
	this.Currenttierpatched = currenttierpatched
	this.Elo = elo
	this.GamesNeededForRating = gamesNeededForRating
	this.Images = images
	this.MmrChangeToLastGame = mmrChangeToLastGame
	this.Old = old
	this.RankingInTier = rankingInTier
	return &this
}

// NewMMRV2CurrentDataWithDefaults instantiates a new MMRV2CurrentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMMRV2CurrentDataWithDefaults() *MMRV2CurrentData {
	this := MMRV2CurrentData{}
	return &this
}

// GetCurrenttier returns the Currenttier field value
func (o *MMRV2CurrentData) GetCurrenttier() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Currenttier
}

// GetCurrenttierOk returns a tuple with the Currenttier field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetCurrenttierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currenttier, true
}

// SetCurrenttier sets field value
func (o *MMRV2CurrentData) SetCurrenttier(v int32) {
	o.Currenttier = v
}

// GetCurrenttierpatched returns the Currenttierpatched field value
func (o *MMRV2CurrentData) GetCurrenttierpatched() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currenttierpatched
}

// GetCurrenttierpatchedOk returns a tuple with the Currenttierpatched field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetCurrenttierpatchedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currenttierpatched, true
}

// SetCurrenttierpatched sets field value
func (o *MMRV2CurrentData) SetCurrenttierpatched(v string) {
	o.Currenttierpatched = v
}

// GetElo returns the Elo field value
func (o *MMRV2CurrentData) GetElo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Elo
}

// GetEloOk returns a tuple with the Elo field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetEloOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Elo, true
}

// SetElo sets field value
func (o *MMRV2CurrentData) SetElo(v int32) {
	o.Elo = v
}

// GetGamesNeededForRating returns the GamesNeededForRating field value
func (o *MMRV2CurrentData) GetGamesNeededForRating() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GamesNeededForRating
}

// GetGamesNeededForRatingOk returns a tuple with the GamesNeededForRating field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetGamesNeededForRatingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GamesNeededForRating, true
}

// SetGamesNeededForRating sets field value
func (o *MMRV2CurrentData) SetGamesNeededForRating(v int32) {
	o.GamesNeededForRating = v
}

// GetImages returns the Images field value
func (o *MMRV2CurrentData) GetImages() MMRDataImages {
	if o == nil {
		var ret MMRDataImages
		return ret
	}

	return o.Images
}

// GetImagesOk returns a tuple with the Images field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetImagesOk() (*MMRDataImages, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Images, true
}

// SetImages sets field value
func (o *MMRV2CurrentData) SetImages(v MMRDataImages) {
	o.Images = v
}

// GetMmrChangeToLastGame returns the MmrChangeToLastGame field value
func (o *MMRV2CurrentData) GetMmrChangeToLastGame() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MmrChangeToLastGame
}

// GetMmrChangeToLastGameOk returns a tuple with the MmrChangeToLastGame field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetMmrChangeToLastGameOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MmrChangeToLastGame, true
}

// SetMmrChangeToLastGame sets field value
func (o *MMRV2CurrentData) SetMmrChangeToLastGame(v int32) {
	o.MmrChangeToLastGame = v
}

// GetOld returns the Old field value
func (o *MMRV2CurrentData) GetOld() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Old
}

// GetOldOk returns a tuple with the Old field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetOldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Old, true
}

// SetOld sets field value
func (o *MMRV2CurrentData) SetOld(v bool) {
	o.Old = v
}

// GetRankingInTier returns the RankingInTier field value
func (o *MMRV2CurrentData) GetRankingInTier() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RankingInTier
}

// GetRankingInTierOk returns a tuple with the RankingInTier field value
// and a boolean to check if the value has been set.
func (o *MMRV2CurrentData) GetRankingInTierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RankingInTier, true
}

// SetRankingInTier sets field value
func (o *MMRV2CurrentData) SetRankingInTier(v int32) {
	o.RankingInTier = v
}

func (o MMRV2CurrentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MMRV2CurrentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currenttier"] = o.Currenttier
	toSerialize["currenttierpatched"] = o.Currenttierpatched
	toSerialize["elo"] = o.Elo
	toSerialize["games_needed_for_rating"] = o.GamesNeededForRating
	toSerialize["images"] = o.Images
	toSerialize["mmr_change_to_last_game"] = o.MmrChangeToLastGame
	toSerialize["old"] = o.Old
	toSerialize["ranking_in_tier"] = o.RankingInTier
	return toSerialize, nil
}

func (o *MMRV2CurrentData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currenttier",
		"currenttierpatched",
		"elo",
		"games_needed_for_rating",
		"images",
		"mmr_change_to_last_game",
		"old",
		"ranking_in_tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMMRV2CurrentData := _MMRV2CurrentData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMMRV2CurrentData)

	if err != nil {
		return err
	}

	*o = MMRV2CurrentData(varMMRV2CurrentData)

	return err
}

type NullableMMRV2CurrentData struct {
	value *MMRV2CurrentData
	isSet bool
}

func (v NullableMMRV2CurrentData) Get() *MMRV2CurrentData {
	return v.value
}

func (v *NullableMMRV2CurrentData) Set(val *MMRV2CurrentData) {
	v.value = val
	v.isSet = true
}

func (v NullableMMRV2CurrentData) IsSet() bool {
	return v.isSet
}

func (v *NullableMMRV2CurrentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMMRV2CurrentData(val *MMRV2CurrentData) *NullableMMRV2CurrentData {
	return &NullableMMRV2CurrentData{value: val, isSet: true}
}

func (v NullableMMRV2CurrentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMMRV2CurrentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


