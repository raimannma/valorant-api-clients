/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebsiteV1Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebsiteV1Response{}

// WebsiteV1Response struct for WebsiteV1Response
type WebsiteV1Response struct {
	Data []WebsiteV1Data `json:"data"`
	Status int32 `json:"status"`
}

type _WebsiteV1Response WebsiteV1Response

// NewWebsiteV1Response instantiates a new WebsiteV1Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteV1Response(data []WebsiteV1Data, status int32) *WebsiteV1Response {
	this := WebsiteV1Response{}
	this.Data = data
	this.Status = status
	return &this
}

// NewWebsiteV1ResponseWithDefaults instantiates a new WebsiteV1Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteV1ResponseWithDefaults() *WebsiteV1Response {
	this := WebsiteV1Response{}
	return &this
}

// GetData returns the Data field value
func (o *WebsiteV1Response) GetData() []WebsiteV1Data {
	if o == nil {
		var ret []WebsiteV1Data
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebsiteV1Response) GetDataOk() ([]WebsiteV1Data, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *WebsiteV1Response) SetData(v []WebsiteV1Data) {
	o.Data = v
}

// GetStatus returns the Status field value
func (o *WebsiteV1Response) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WebsiteV1Response) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WebsiteV1Response) SetStatus(v int32) {
	o.Status = v
}

func (o WebsiteV1Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebsiteV1Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *WebsiteV1Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebsiteV1Response := _WebsiteV1Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebsiteV1Response)

	if err != nil {
		return err
	}

	*o = WebsiteV1Response(varWebsiteV1Response)

	return err
}

type NullableWebsiteV1Response struct {
	value *WebsiteV1Response
	isSet bool
}

func (v NullableWebsiteV1Response) Get() *WebsiteV1Response {
	return v.value
}

func (v *NullableWebsiteV1Response) Set(val *WebsiteV1Response) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteV1Response) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteV1Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteV1Response(val *WebsiteV1Response) *NullableWebsiteV1Response {
	return &NullableWebsiteV1Response{value: val, isSet: true}
}

func (v NullableWebsiteV1Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteV1Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


