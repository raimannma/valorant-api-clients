/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
)

// checks if the MatchesV2DataTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchesV2DataTeam{}

// MatchesV2DataTeam struct for MatchesV2DataTeam
type MatchesV2DataTeam struct {
	HasWon NullableBool `json:"has_won,omitempty"`
	Roster NullableMatchesV2DataTeamRoster `json:"roster,omitempty"`
	RoundsLost NullableInt32 `json:"rounds_lost,omitempty"`
	RoundsWon NullableInt32 `json:"rounds_won,omitempty"`
}

// NewMatchesV2DataTeam instantiates a new MatchesV2DataTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchesV2DataTeam() *MatchesV2DataTeam {
	this := MatchesV2DataTeam{}
	return &this
}

// NewMatchesV2DataTeamWithDefaults instantiates a new MatchesV2DataTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchesV2DataTeamWithDefaults() *MatchesV2DataTeam {
	this := MatchesV2DataTeam{}
	return &this
}

// GetHasWon returns the HasWon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataTeam) GetHasWon() bool {
	if o == nil || IsNil(o.HasWon.Get()) {
		var ret bool
		return ret
	}
	return *o.HasWon.Get()
}

// GetHasWonOk returns a tuple with the HasWon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataTeam) GetHasWonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasWon.Get(), o.HasWon.IsSet()
}

// HasHasWon returns a boolean if a field has been set.
func (o *MatchesV2DataTeam) HasHasWon() bool {
	if o != nil && o.HasWon.IsSet() {
		return true
	}

	return false
}

// SetHasWon gets a reference to the given NullableBool and assigns it to the HasWon field.
func (o *MatchesV2DataTeam) SetHasWon(v bool) {
	o.HasWon.Set(&v)
}
// SetHasWonNil sets the value for HasWon to be an explicit nil
func (o *MatchesV2DataTeam) SetHasWonNil() {
	o.HasWon.Set(nil)
}

// UnsetHasWon ensures that no value is present for HasWon, not even an explicit nil
func (o *MatchesV2DataTeam) UnsetHasWon() {
	o.HasWon.Unset()
}

// GetRoster returns the Roster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataTeam) GetRoster() MatchesV2DataTeamRoster {
	if o == nil || IsNil(o.Roster.Get()) {
		var ret MatchesV2DataTeamRoster
		return ret
	}
	return *o.Roster.Get()
}

// GetRosterOk returns a tuple with the Roster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataTeam) GetRosterOk() (*MatchesV2DataTeamRoster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roster.Get(), o.Roster.IsSet()
}

// HasRoster returns a boolean if a field has been set.
func (o *MatchesV2DataTeam) HasRoster() bool {
	if o != nil && o.Roster.IsSet() {
		return true
	}

	return false
}

// SetRoster gets a reference to the given NullableMatchesV2DataTeamRoster and assigns it to the Roster field.
func (o *MatchesV2DataTeam) SetRoster(v MatchesV2DataTeamRoster) {
	o.Roster.Set(&v)
}
// SetRosterNil sets the value for Roster to be an explicit nil
func (o *MatchesV2DataTeam) SetRosterNil() {
	o.Roster.Set(nil)
}

// UnsetRoster ensures that no value is present for Roster, not even an explicit nil
func (o *MatchesV2DataTeam) UnsetRoster() {
	o.Roster.Unset()
}

// GetRoundsLost returns the RoundsLost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataTeam) GetRoundsLost() int32 {
	if o == nil || IsNil(o.RoundsLost.Get()) {
		var ret int32
		return ret
	}
	return *o.RoundsLost.Get()
}

// GetRoundsLostOk returns a tuple with the RoundsLost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataTeam) GetRoundsLostOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundsLost.Get(), o.RoundsLost.IsSet()
}

// HasRoundsLost returns a boolean if a field has been set.
func (o *MatchesV2DataTeam) HasRoundsLost() bool {
	if o != nil && o.RoundsLost.IsSet() {
		return true
	}

	return false
}

// SetRoundsLost gets a reference to the given NullableInt32 and assigns it to the RoundsLost field.
func (o *MatchesV2DataTeam) SetRoundsLost(v int32) {
	o.RoundsLost.Set(&v)
}
// SetRoundsLostNil sets the value for RoundsLost to be an explicit nil
func (o *MatchesV2DataTeam) SetRoundsLostNil() {
	o.RoundsLost.Set(nil)
}

// UnsetRoundsLost ensures that no value is present for RoundsLost, not even an explicit nil
func (o *MatchesV2DataTeam) UnsetRoundsLost() {
	o.RoundsLost.Unset()
}

// GetRoundsWon returns the RoundsWon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchesV2DataTeam) GetRoundsWon() int32 {
	if o == nil || IsNil(o.RoundsWon.Get()) {
		var ret int32
		return ret
	}
	return *o.RoundsWon.Get()
}

// GetRoundsWonOk returns a tuple with the RoundsWon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchesV2DataTeam) GetRoundsWonOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundsWon.Get(), o.RoundsWon.IsSet()
}

// HasRoundsWon returns a boolean if a field has been set.
func (o *MatchesV2DataTeam) HasRoundsWon() bool {
	if o != nil && o.RoundsWon.IsSet() {
		return true
	}

	return false
}

// SetRoundsWon gets a reference to the given NullableInt32 and assigns it to the RoundsWon field.
func (o *MatchesV2DataTeam) SetRoundsWon(v int32) {
	o.RoundsWon.Set(&v)
}
// SetRoundsWonNil sets the value for RoundsWon to be an explicit nil
func (o *MatchesV2DataTeam) SetRoundsWonNil() {
	o.RoundsWon.Set(nil)
}

// UnsetRoundsWon ensures that no value is present for RoundsWon, not even an explicit nil
func (o *MatchesV2DataTeam) UnsetRoundsWon() {
	o.RoundsWon.Unset()
}

func (o MatchesV2DataTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchesV2DataTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HasWon.IsSet() {
		toSerialize["has_won"] = o.HasWon.Get()
	}
	if o.Roster.IsSet() {
		toSerialize["roster"] = o.Roster.Get()
	}
	if o.RoundsLost.IsSet() {
		toSerialize["rounds_lost"] = o.RoundsLost.Get()
	}
	if o.RoundsWon.IsSet() {
		toSerialize["rounds_won"] = o.RoundsWon.Get()
	}
	return toSerialize, nil
}

type NullableMatchesV2DataTeam struct {
	value *MatchesV2DataTeam
	isSet bool
}

func (v NullableMatchesV2DataTeam) Get() *MatchesV2DataTeam {
	return v.value
}

func (v *NullableMatchesV2DataTeam) Set(val *MatchesV2DataTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchesV2DataTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchesV2DataTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchesV2DataTeam(val *MatchesV2DataTeam) *NullableMatchesV2DataTeam {
	return &NullableMatchesV2DataTeam{value: val, isSet: true}
}

func (v NullableMatchesV2DataTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchesV2DataTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


