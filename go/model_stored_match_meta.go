/*
HenrikDev API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package henrikdevapiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoredMatchMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoredMatchMeta{}

// StoredMatchMeta struct for StoredMatchMeta
type StoredMatchMeta struct {
	Cluster NullableString `json:"cluster,omitempty"`
	Id string `json:"id"`
	Map StoredMatchMetaMap `json:"map"`
	Mode string `json:"mode"`
	Region string `json:"region"`
	Season StoredMatchMetaSeason `json:"season"`
	StartedAt string `json:"started_at"`
	Version string `json:"version"`
}

type _StoredMatchMeta StoredMatchMeta

// NewStoredMatchMeta instantiates a new StoredMatchMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoredMatchMeta(id string, map_ StoredMatchMetaMap, mode string, region string, season StoredMatchMetaSeason, startedAt string, version string) *StoredMatchMeta {
	this := StoredMatchMeta{}
	this.Id = id
	this.Map = map_
	this.Mode = mode
	this.Region = region
	this.Season = season
	this.StartedAt = startedAt
	this.Version = version
	return &this
}

// NewStoredMatchMetaWithDefaults instantiates a new StoredMatchMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoredMatchMetaWithDefaults() *StoredMatchMeta {
	this := StoredMatchMeta{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoredMatchMeta) GetCluster() string {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret string
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoredMatchMeta) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *StoredMatchMeta) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableString and assigns it to the Cluster field.
func (o *StoredMatchMeta) SetCluster(v string) {
	o.Cluster.Set(&v)
}
// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *StoredMatchMeta) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *StoredMatchMeta) UnsetCluster() {
	o.Cluster.Unset()
}

// GetId returns the Id field value
func (o *StoredMatchMeta) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StoredMatchMeta) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StoredMatchMeta) SetId(v string) {
	o.Id = v
}

// GetMap returns the Map field value
func (o *StoredMatchMeta) GetMap() StoredMatchMetaMap {
	if o == nil {
		var ret StoredMatchMetaMap
		return ret
	}

	return o.Map
}

// GetMapOk returns a tuple with the Map field value
// and a boolean to check if the value has been set.
func (o *StoredMatchMeta) GetMapOk() (*StoredMatchMetaMap, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Map, true
}

// SetMap sets field value
func (o *StoredMatchMeta) SetMap(v StoredMatchMetaMap) {
	o.Map = v
}

// GetMode returns the Mode field value
func (o *StoredMatchMeta) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *StoredMatchMeta) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *StoredMatchMeta) SetMode(v string) {
	o.Mode = v
}

// GetRegion returns the Region field value
func (o *StoredMatchMeta) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *StoredMatchMeta) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *StoredMatchMeta) SetRegion(v string) {
	o.Region = v
}

// GetSeason returns the Season field value
func (o *StoredMatchMeta) GetSeason() StoredMatchMetaSeason {
	if o == nil {
		var ret StoredMatchMetaSeason
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *StoredMatchMeta) GetSeasonOk() (*StoredMatchMetaSeason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *StoredMatchMeta) SetSeason(v StoredMatchMetaSeason) {
	o.Season = v
}

// GetStartedAt returns the StartedAt field value
func (o *StoredMatchMeta) GetStartedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *StoredMatchMeta) GetStartedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *StoredMatchMeta) SetStartedAt(v string) {
	o.StartedAt = v
}

// GetVersion returns the Version field value
func (o *StoredMatchMeta) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *StoredMatchMeta) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *StoredMatchMeta) SetVersion(v string) {
	o.Version = v
}

func (o StoredMatchMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoredMatchMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["map"] = o.Map
	toSerialize["mode"] = o.Mode
	toSerialize["region"] = o.Region
	toSerialize["season"] = o.Season
	toSerialize["started_at"] = o.StartedAt
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *StoredMatchMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"map",
		"mode",
		"region",
		"season",
		"started_at",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoredMatchMeta := _StoredMatchMeta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoredMatchMeta)

	if err != nil {
		return err
	}

	*o = StoredMatchMeta(varStoredMatchMeta)

	return err
}

type NullableStoredMatchMeta struct {
	value *StoredMatchMeta
	isSet bool
}

func (v NullableStoredMatchMeta) Get() *StoredMatchMeta {
	return v.value
}

func (v *NullableStoredMatchMeta) Set(val *StoredMatchMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableStoredMatchMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableStoredMatchMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoredMatchMeta(val *StoredMatchMeta) *NullableStoredMatchMeta {
	return &NullableStoredMatchMeta{value: val, isSet: true}
}

func (v NullableStoredMatchMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoredMatchMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


